// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Track is an object representing the database table.
type Track struct {
	ID              int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title           string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	AlbumID         null.Int64  `boil:"album_id" json:"album_id,omitempty" toml:"album_id" yaml:"album_id,omitempty"`
	DurationSeconds null.Int    `boil:"duration_seconds" json:"duration_seconds,omitempty" toml:"duration_seconds" yaml:"duration_seconds,omitempty"`
	Isrc            null.String `boil:"isrc" json:"isrc,omitempty" toml:"isrc" yaml:"isrc,omitempty"`
	Explicit        null.Bool   `boil:"explicit" json:"explicit,omitempty" toml:"explicit" yaml:"explicit,omitempty"`
	Status          null.Int16  `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	CreatedAt       null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *trackR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L trackL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TrackColumns = struct {
	ID              string
	Title           string
	AlbumID         string
	DurationSeconds string
	Isrc            string
	Explicit        string
	Status          string
	CreatedAt       string
}{
	ID:              "id",
	Title:           "title",
	AlbumID:         "album_id",
	DurationSeconds: "duration_seconds",
	Isrc:            "isrc",
	Explicit:        "explicit",
	Status:          "status",
	CreatedAt:       "created_at",
}

var TrackTableColumns = struct {
	ID              string
	Title           string
	AlbumID         string
	DurationSeconds string
	Isrc            string
	Explicit        string
	Status          string
	CreatedAt       string
}{
	ID:              "tracks.id",
	Title:           "tracks.title",
	AlbumID:         "tracks.album_id",
	DurationSeconds: "tracks.duration_seconds",
	Isrc:            "tracks.isrc",
	Explicit:        "tracks.explicit",
	Status:          "tracks.status",
	CreatedAt:       "tracks.created_at",
}

// Generated where

var TrackWhere = struct {
	ID              whereHelperint64
	Title           whereHelperstring
	AlbumID         whereHelpernull_Int64
	DurationSeconds whereHelpernull_Int
	Isrc            whereHelpernull_String
	Explicit        whereHelpernull_Bool
	Status          whereHelpernull_Int16
	CreatedAt       whereHelpernull_Time
}{
	ID:              whereHelperint64{field: "\"tracks\".\"id\""},
	Title:           whereHelperstring{field: "\"tracks\".\"title\""},
	AlbumID:         whereHelpernull_Int64{field: "\"tracks\".\"album_id\""},
	DurationSeconds: whereHelpernull_Int{field: "\"tracks\".\"duration_seconds\""},
	Isrc:            whereHelpernull_String{field: "\"tracks\".\"isrc\""},
	Explicit:        whereHelpernull_Bool{field: "\"tracks\".\"explicit\""},
	Status:          whereHelpernull_Int16{field: "\"tracks\".\"status\""},
	CreatedAt:       whereHelpernull_Time{field: "\"tracks\".\"created_at\""},
}

// TrackRels is where relationship names are stored.
var TrackRels = struct {
	Album           string
	Comments        string
	Likes           string
	PlaylistTracks  string
	Streams         string
	TrackFiles      string
	TrackOwnerships string
	TracksArtists   string
}{
	Album:           "Album",
	Comments:        "Comments",
	Likes:           "Likes",
	PlaylistTracks:  "PlaylistTracks",
	Streams:         "Streams",
	TrackFiles:      "TrackFiles",
	TrackOwnerships: "TrackOwnerships",
	TracksArtists:   "TracksArtists",
}

// trackR is where relationships are stored.
type trackR struct {
	Album           *Album              `boil:"Album" json:"Album" toml:"Album" yaml:"Album"`
	Comments        CommentSlice        `boil:"Comments" json:"Comments" toml:"Comments" yaml:"Comments"`
	Likes           LikeSlice           `boil:"Likes" json:"Likes" toml:"Likes" yaml:"Likes"`
	PlaylistTracks  PlaylistTrackSlice  `boil:"PlaylistTracks" json:"PlaylistTracks" toml:"PlaylistTracks" yaml:"PlaylistTracks"`
	Streams         StreamSlice         `boil:"Streams" json:"Streams" toml:"Streams" yaml:"Streams"`
	TrackFiles      TrackFileSlice      `boil:"TrackFiles" json:"TrackFiles" toml:"TrackFiles" yaml:"TrackFiles"`
	TrackOwnerships TrackOwnershipSlice `boil:"TrackOwnerships" json:"TrackOwnerships" toml:"TrackOwnerships" yaml:"TrackOwnerships"`
	TracksArtists   TracksArtistSlice   `boil:"TracksArtists" json:"TracksArtists" toml:"TracksArtists" yaml:"TracksArtists"`
}

// NewStruct creates a new relationship struct
func (*trackR) NewStruct() *trackR {
	return &trackR{}
}

func (o *Track) GetAlbum() *Album {
	if o == nil {
		return nil
	}

	return o.R.GetAlbum()
}

func (r *trackR) GetAlbum() *Album {
	if r == nil {
		return nil
	}

	return r.Album
}

func (o *Track) GetComments() CommentSlice {
	if o == nil {
		return nil
	}

	return o.R.GetComments()
}

func (r *trackR) GetComments() CommentSlice {
	if r == nil {
		return nil
	}

	return r.Comments
}

func (o *Track) GetLikes() LikeSlice {
	if o == nil {
		return nil
	}

	return o.R.GetLikes()
}

func (r *trackR) GetLikes() LikeSlice {
	if r == nil {
		return nil
	}

	return r.Likes
}

func (o *Track) GetPlaylistTracks() PlaylistTrackSlice {
	if o == nil {
		return nil
	}

	return o.R.GetPlaylistTracks()
}

func (r *trackR) GetPlaylistTracks() PlaylistTrackSlice {
	if r == nil {
		return nil
	}

	return r.PlaylistTracks
}

func (o *Track) GetStreams() StreamSlice {
	if o == nil {
		return nil
	}

	return o.R.GetStreams()
}

func (r *trackR) GetStreams() StreamSlice {
	if r == nil {
		return nil
	}

	return r.Streams
}

func (o *Track) GetTrackFiles() TrackFileSlice {
	if o == nil {
		return nil
	}

	return o.R.GetTrackFiles()
}

func (r *trackR) GetTrackFiles() TrackFileSlice {
	if r == nil {
		return nil
	}

	return r.TrackFiles
}

func (o *Track) GetTrackOwnerships() TrackOwnershipSlice {
	if o == nil {
		return nil
	}

	return o.R.GetTrackOwnerships()
}

func (r *trackR) GetTrackOwnerships() TrackOwnershipSlice {
	if r == nil {
		return nil
	}

	return r.TrackOwnerships
}

func (o *Track) GetTracksArtists() TracksArtistSlice {
	if o == nil {
		return nil
	}

	return o.R.GetTracksArtists()
}

func (r *trackR) GetTracksArtists() TracksArtistSlice {
	if r == nil {
		return nil
	}

	return r.TracksArtists
}

// trackL is where Load methods for each relationship are stored.
type trackL struct{}

var (
	trackAllColumns            = []string{"id", "title", "album_id", "duration_seconds", "isrc", "explicit", "status", "created_at"}
	trackColumnsWithoutDefault = []string{"title"}
	trackColumnsWithDefault    = []string{"id", "album_id", "duration_seconds", "isrc", "explicit", "status", "created_at"}
	trackPrimaryKeyColumns     = []string{"id"}
	trackGeneratedColumns      = []string{}
)

type (
	// TrackSlice is an alias for a slice of pointers to Track.
	// This should almost always be used instead of []Track.
	TrackSlice []*Track
	// TrackHook is the signature for custom Track hook methods
	TrackHook func(context.Context, boil.ContextExecutor, *Track) error

	trackQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	trackType                 = reflect.TypeOf(&Track{})
	trackMapping              = queries.MakeStructMapping(trackType)
	trackPrimaryKeyMapping, _ = queries.BindMapping(trackType, trackMapping, trackPrimaryKeyColumns)
	trackInsertCacheMut       sync.RWMutex
	trackInsertCache          = make(map[string]insertCache)
	trackUpdateCacheMut       sync.RWMutex
	trackUpdateCache          = make(map[string]updateCache)
	trackUpsertCacheMut       sync.RWMutex
	trackUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var trackAfterSelectMu sync.Mutex
var trackAfterSelectHooks []TrackHook

var trackBeforeInsertMu sync.Mutex
var trackBeforeInsertHooks []TrackHook
var trackAfterInsertMu sync.Mutex
var trackAfterInsertHooks []TrackHook

var trackBeforeUpdateMu sync.Mutex
var trackBeforeUpdateHooks []TrackHook
var trackAfterUpdateMu sync.Mutex
var trackAfterUpdateHooks []TrackHook

var trackBeforeDeleteMu sync.Mutex
var trackBeforeDeleteHooks []TrackHook
var trackAfterDeleteMu sync.Mutex
var trackAfterDeleteHooks []TrackHook

var trackBeforeUpsertMu sync.Mutex
var trackBeforeUpsertHooks []TrackHook
var trackAfterUpsertMu sync.Mutex
var trackAfterUpsertHooks []TrackHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Track) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Track) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Track) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Track) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Track) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Track) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Track) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Track) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Track) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTrackHook registers your hook function for all future operations.
func AddTrackHook(hookPoint boil.HookPoint, trackHook TrackHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		trackAfterSelectMu.Lock()
		trackAfterSelectHooks = append(trackAfterSelectHooks, trackHook)
		trackAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		trackBeforeInsertMu.Lock()
		trackBeforeInsertHooks = append(trackBeforeInsertHooks, trackHook)
		trackBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		trackAfterInsertMu.Lock()
		trackAfterInsertHooks = append(trackAfterInsertHooks, trackHook)
		trackAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		trackBeforeUpdateMu.Lock()
		trackBeforeUpdateHooks = append(trackBeforeUpdateHooks, trackHook)
		trackBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		trackAfterUpdateMu.Lock()
		trackAfterUpdateHooks = append(trackAfterUpdateHooks, trackHook)
		trackAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		trackBeforeDeleteMu.Lock()
		trackBeforeDeleteHooks = append(trackBeforeDeleteHooks, trackHook)
		trackBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		trackAfterDeleteMu.Lock()
		trackAfterDeleteHooks = append(trackAfterDeleteHooks, trackHook)
		trackAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		trackBeforeUpsertMu.Lock()
		trackBeforeUpsertHooks = append(trackBeforeUpsertHooks, trackHook)
		trackBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		trackAfterUpsertMu.Lock()
		trackAfterUpsertHooks = append(trackAfterUpsertHooks, trackHook)
		trackAfterUpsertMu.Unlock()
	}
}

// One returns a single track record from the query.
func (q trackQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Track, error) {
	o := &Track{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tracks")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Track records from the query.
func (q trackQuery) All(ctx context.Context, exec boil.ContextExecutor) (TrackSlice, error) {
	var o []*Track

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Track slice")
	}

	if len(trackAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Track records in the query.
func (q trackQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tracks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q trackQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tracks exists")
	}

	return count > 0, nil
}

// Album pointed to by the foreign key.
func (o *Track) Album(mods ...qm.QueryMod) albumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AlbumID),
	}

	queryMods = append(queryMods, mods...)

	return Albums(queryMods...)
}

// Comments retrieves all the comment's Comments with an executor.
func (o *Track) Comments(mods ...qm.QueryMod) commentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"comments\".\"track_id\"=?", o.ID),
	)

	return Comments(queryMods...)
}

// Likes retrieves all the like's Likes with an executor.
func (o *Track) Likes(mods ...qm.QueryMod) likeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"likes\".\"track_id\"=?", o.ID),
	)

	return Likes(queryMods...)
}

// PlaylistTracks retrieves all the playlist_track's PlaylistTracks with an executor.
func (o *Track) PlaylistTracks(mods ...qm.QueryMod) playlistTrackQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"playlist_tracks\".\"track_id\"=?", o.ID),
	)

	return PlaylistTracks(queryMods...)
}

// Streams retrieves all the stream's Streams with an executor.
func (o *Track) Streams(mods ...qm.QueryMod) streamQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"streams\".\"track_id\"=?", o.ID),
	)

	return Streams(queryMods...)
}

// TrackFiles retrieves all the track_file's TrackFiles with an executor.
func (o *Track) TrackFiles(mods ...qm.QueryMod) trackFileQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"track_files\".\"track_id\"=?", o.ID),
	)

	return TrackFiles(queryMods...)
}

// TrackOwnerships retrieves all the track_ownership's TrackOwnerships with an executor.
func (o *Track) TrackOwnerships(mods ...qm.QueryMod) trackOwnershipQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"track_ownership\".\"track_id\"=?", o.ID),
	)

	return TrackOwnerships(queryMods...)
}

// TracksArtists retrieves all the tracks_artist's TracksArtists with an executor.
func (o *Track) TracksArtists(mods ...qm.QueryMod) tracksArtistQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tracks_artists\".\"track_id\"=?", o.ID),
	)

	return TracksArtists(queryMods...)
}

// LoadAlbum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (trackL) LoadAlbum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrack interface{}, mods queries.Applicator) error {
	var slice []*Track
	var object *Track

	if singular {
		var ok bool
		object, ok = maybeTrack.(*Track)
		if !ok {
			object = new(Track)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrack))
			}
		}
	} else {
		s, ok := maybeTrack.(*[]*Track)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrack))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &trackR{}
		}
		if !queries.IsNil(object.AlbumID) {
			args[object.AlbumID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackR{}
			}

			if !queries.IsNil(obj.AlbumID) {
				args[obj.AlbumID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`albums`),
		qm.WhereIn(`albums.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Album")
	}

	var resultSlice []*Album
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Album")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for albums")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for albums")
	}

	if len(albumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Album = foreign
		if foreign.R == nil {
			foreign.R = &albumR{}
		}
		foreign.R.Tracks = append(foreign.R.Tracks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AlbumID, foreign.ID) {
				local.R.Album = foreign
				if foreign.R == nil {
					foreign.R = &albumR{}
				}
				foreign.R.Tracks = append(foreign.R.Tracks, local)
				break
			}
		}
	}

	return nil
}

// LoadComments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trackL) LoadComments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrack interface{}, mods queries.Applicator) error {
	var slice []*Track
	var object *Track

	if singular {
		var ok bool
		object, ok = maybeTrack.(*Track)
		if !ok {
			object = new(Track)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrack))
			}
		}
	} else {
		s, ok := maybeTrack.(*[]*Track)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrack))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &trackR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`comments`),
		qm.WhereIn(`comments.track_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load comments")
	}

	var resultSlice []*Comment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice comments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on comments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for comments")
	}

	if len(commentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Comments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &commentR{}
			}
			foreign.R.Track = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TrackID) {
				local.R.Comments = append(local.R.Comments, foreign)
				if foreign.R == nil {
					foreign.R = &commentR{}
				}
				foreign.R.Track = local
				break
			}
		}
	}

	return nil
}

// LoadLikes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trackL) LoadLikes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrack interface{}, mods queries.Applicator) error {
	var slice []*Track
	var object *Track

	if singular {
		var ok bool
		object, ok = maybeTrack.(*Track)
		if !ok {
			object = new(Track)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrack))
			}
		}
	} else {
		s, ok := maybeTrack.(*[]*Track)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrack))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &trackR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`likes`),
		qm.WhereIn(`likes.track_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load likes")
	}

	var resultSlice []*Like
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice likes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on likes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for likes")
	}

	if len(likeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Likes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &likeR{}
			}
			foreign.R.Track = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TrackID {
				local.R.Likes = append(local.R.Likes, foreign)
				if foreign.R == nil {
					foreign.R = &likeR{}
				}
				foreign.R.Track = local
				break
			}
		}
	}

	return nil
}

// LoadPlaylistTracks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trackL) LoadPlaylistTracks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrack interface{}, mods queries.Applicator) error {
	var slice []*Track
	var object *Track

	if singular {
		var ok bool
		object, ok = maybeTrack.(*Track)
		if !ok {
			object = new(Track)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrack))
			}
		}
	} else {
		s, ok := maybeTrack.(*[]*Track)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrack))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &trackR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`playlist_tracks`),
		qm.WhereIn(`playlist_tracks.track_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load playlist_tracks")
	}

	var resultSlice []*PlaylistTrack
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice playlist_tracks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on playlist_tracks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for playlist_tracks")
	}

	if len(playlistTrackAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PlaylistTracks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playlistTrackR{}
			}
			foreign.R.Track = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TrackID {
				local.R.PlaylistTracks = append(local.R.PlaylistTracks, foreign)
				if foreign.R == nil {
					foreign.R = &playlistTrackR{}
				}
				foreign.R.Track = local
				break
			}
		}
	}

	return nil
}

// LoadStreams allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trackL) LoadStreams(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrack interface{}, mods queries.Applicator) error {
	var slice []*Track
	var object *Track

	if singular {
		var ok bool
		object, ok = maybeTrack.(*Track)
		if !ok {
			object = new(Track)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrack))
			}
		}
	} else {
		s, ok := maybeTrack.(*[]*Track)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrack))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &trackR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`streams`),
		qm.WhereIn(`streams.track_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load streams")
	}

	var resultSlice []*Stream
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice streams")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on streams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for streams")
	}

	if len(streamAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Streams = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &streamR{}
			}
			foreign.R.Track = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TrackID {
				local.R.Streams = append(local.R.Streams, foreign)
				if foreign.R == nil {
					foreign.R = &streamR{}
				}
				foreign.R.Track = local
				break
			}
		}
	}

	return nil
}

// LoadTrackFiles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trackL) LoadTrackFiles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrack interface{}, mods queries.Applicator) error {
	var slice []*Track
	var object *Track

	if singular {
		var ok bool
		object, ok = maybeTrack.(*Track)
		if !ok {
			object = new(Track)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrack))
			}
		}
	} else {
		s, ok := maybeTrack.(*[]*Track)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrack))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &trackR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`track_files`),
		qm.WhereIn(`track_files.track_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load track_files")
	}

	var resultSlice []*TrackFile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice track_files")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on track_files")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for track_files")
	}

	if len(trackFileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TrackFiles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &trackFileR{}
			}
			foreign.R.Track = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TrackID) {
				local.R.TrackFiles = append(local.R.TrackFiles, foreign)
				if foreign.R == nil {
					foreign.R = &trackFileR{}
				}
				foreign.R.Track = local
				break
			}
		}
	}

	return nil
}

// LoadTrackOwnerships allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trackL) LoadTrackOwnerships(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrack interface{}, mods queries.Applicator) error {
	var slice []*Track
	var object *Track

	if singular {
		var ok bool
		object, ok = maybeTrack.(*Track)
		if !ok {
			object = new(Track)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrack))
			}
		}
	} else {
		s, ok := maybeTrack.(*[]*Track)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrack))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &trackR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`track_ownership`),
		qm.WhereIn(`track_ownership.track_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load track_ownership")
	}

	var resultSlice []*TrackOwnership
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice track_ownership")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on track_ownership")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for track_ownership")
	}

	if len(trackOwnershipAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TrackOwnerships = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &trackOwnershipR{}
			}
			foreign.R.Track = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TrackID) {
				local.R.TrackOwnerships = append(local.R.TrackOwnerships, foreign)
				if foreign.R == nil {
					foreign.R = &trackOwnershipR{}
				}
				foreign.R.Track = local
				break
			}
		}
	}

	return nil
}

// LoadTracksArtists allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trackL) LoadTracksArtists(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrack interface{}, mods queries.Applicator) error {
	var slice []*Track
	var object *Track

	if singular {
		var ok bool
		object, ok = maybeTrack.(*Track)
		if !ok {
			object = new(Track)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrack))
			}
		}
	} else {
		s, ok := maybeTrack.(*[]*Track)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrack))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &trackR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tracks_artists`),
		qm.WhereIn(`tracks_artists.track_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tracks_artists")
	}

	var resultSlice []*TracksArtist
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tracks_artists")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tracks_artists")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tracks_artists")
	}

	if len(tracksArtistAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TracksArtists = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tracksArtistR{}
			}
			foreign.R.Track = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TrackID {
				local.R.TracksArtists = append(local.R.TracksArtists, foreign)
				if foreign.R == nil {
					foreign.R = &tracksArtistR{}
				}
				foreign.R.Track = local
				break
			}
		}
	}

	return nil
}

// SetAlbum of the track to the related item.
// Sets o.R.Album to related.
// Adds o to related.R.Tracks.
func (o *Track) SetAlbum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Album) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tracks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"album_id"}),
		strmangle.WhereClause("\"", "\"", 2, trackPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AlbumID, related.ID)
	if o.R == nil {
		o.R = &trackR{
			Album: related,
		}
	} else {
		o.R.Album = related
	}

	if related.R == nil {
		related.R = &albumR{
			Tracks: TrackSlice{o},
		}
	} else {
		related.R.Tracks = append(related.R.Tracks, o)
	}

	return nil
}

// RemoveAlbum relationship.
// Sets o.R.Album to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Track) RemoveAlbum(ctx context.Context, exec boil.ContextExecutor, related *Album) error {
	var err error

	queries.SetScanner(&o.AlbumID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("album_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Album = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Tracks {
		if queries.Equal(o.AlbumID, ri.AlbumID) {
			continue
		}

		ln := len(related.R.Tracks)
		if ln > 1 && i < ln-1 {
			related.R.Tracks[i] = related.R.Tracks[ln-1]
		}
		related.R.Tracks = related.R.Tracks[:ln-1]
		break
	}
	return nil
}

// AddComments adds the given related objects to the existing relationships
// of the track, optionally inserting them as new records.
// Appends related to o.R.Comments.
// Sets related.R.Track appropriately.
func (o *Track) AddComments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Comment) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TrackID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"comments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"track_id"}),
				strmangle.WhereClause("\"", "\"", 2, commentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TrackID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &trackR{
			Comments: related,
		}
	} else {
		o.R.Comments = append(o.R.Comments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &commentR{
				Track: o,
			}
		} else {
			rel.R.Track = o
		}
	}
	return nil
}

// SetComments removes all previously related items of the
// track replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Track's Comments accordingly.
// Replaces o.R.Comments with related.
// Sets related.R.Track's Comments accordingly.
func (o *Track) SetComments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Comment) error {
	query := "update \"comments\" set \"track_id\" = null where \"track_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Comments {
			queries.SetScanner(&rel.TrackID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Track = nil
		}
		o.R.Comments = nil
	}

	return o.AddComments(ctx, exec, insert, related...)
}

// RemoveComments relationships from objects passed in.
// Removes related items from R.Comments (uses pointer comparison, removal does not keep order)
// Sets related.R.Track.
func (o *Track) RemoveComments(ctx context.Context, exec boil.ContextExecutor, related ...*Comment) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TrackID, nil)
		if rel.R != nil {
			rel.R.Track = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("track_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Comments {
			if rel != ri {
				continue
			}

			ln := len(o.R.Comments)
			if ln > 1 && i < ln-1 {
				o.R.Comments[i] = o.R.Comments[ln-1]
			}
			o.R.Comments = o.R.Comments[:ln-1]
			break
		}
	}

	return nil
}

// AddLikes adds the given related objects to the existing relationships
// of the track, optionally inserting them as new records.
// Appends related to o.R.Likes.
// Sets related.R.Track appropriately.
func (o *Track) AddLikes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Like) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TrackID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"likes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"track_id"}),
				strmangle.WhereClause("\"", "\"", 2, likePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.UserID, rel.TrackID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TrackID = o.ID
		}
	}

	if o.R == nil {
		o.R = &trackR{
			Likes: related,
		}
	} else {
		o.R.Likes = append(o.R.Likes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &likeR{
				Track: o,
			}
		} else {
			rel.R.Track = o
		}
	}
	return nil
}

// AddPlaylistTracks adds the given related objects to the existing relationships
// of the track, optionally inserting them as new records.
// Appends related to o.R.PlaylistTracks.
// Sets related.R.Track appropriately.
func (o *Track) AddPlaylistTracks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PlaylistTrack) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TrackID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"playlist_tracks\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"track_id"}),
				strmangle.WhereClause("\"", "\"", 2, playlistTrackPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.PlaylistID, rel.TrackID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TrackID = o.ID
		}
	}

	if o.R == nil {
		o.R = &trackR{
			PlaylistTracks: related,
		}
	} else {
		o.R.PlaylistTracks = append(o.R.PlaylistTracks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playlistTrackR{
				Track: o,
			}
		} else {
			rel.R.Track = o
		}
	}
	return nil
}

// AddStreams adds the given related objects to the existing relationships
// of the track, optionally inserting them as new records.
// Appends related to o.R.Streams.
// Sets related.R.Track appropriately.
func (o *Track) AddStreams(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Stream) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TrackID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"streams\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"track_id"}),
				strmangle.WhereClause("\"", "\"", 2, streamPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TrackID = o.ID
		}
	}

	if o.R == nil {
		o.R = &trackR{
			Streams: related,
		}
	} else {
		o.R.Streams = append(o.R.Streams, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &streamR{
				Track: o,
			}
		} else {
			rel.R.Track = o
		}
	}
	return nil
}

// AddTrackFiles adds the given related objects to the existing relationships
// of the track, optionally inserting them as new records.
// Appends related to o.R.TrackFiles.
// Sets related.R.Track appropriately.
func (o *Track) AddTrackFiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TrackFile) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TrackID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"track_files\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"track_id"}),
				strmangle.WhereClause("\"", "\"", 2, trackFilePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TrackID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &trackR{
			TrackFiles: related,
		}
	} else {
		o.R.TrackFiles = append(o.R.TrackFiles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &trackFileR{
				Track: o,
			}
		} else {
			rel.R.Track = o
		}
	}
	return nil
}

// SetTrackFiles removes all previously related items of the
// track replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Track's TrackFiles accordingly.
// Replaces o.R.TrackFiles with related.
// Sets related.R.Track's TrackFiles accordingly.
func (o *Track) SetTrackFiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TrackFile) error {
	query := "update \"track_files\" set \"track_id\" = null where \"track_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TrackFiles {
			queries.SetScanner(&rel.TrackID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Track = nil
		}
		o.R.TrackFiles = nil
	}

	return o.AddTrackFiles(ctx, exec, insert, related...)
}

// RemoveTrackFiles relationships from objects passed in.
// Removes related items from R.TrackFiles (uses pointer comparison, removal does not keep order)
// Sets related.R.Track.
func (o *Track) RemoveTrackFiles(ctx context.Context, exec boil.ContextExecutor, related ...*TrackFile) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TrackID, nil)
		if rel.R != nil {
			rel.R.Track = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("track_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TrackFiles {
			if rel != ri {
				continue
			}

			ln := len(o.R.TrackFiles)
			if ln > 1 && i < ln-1 {
				o.R.TrackFiles[i] = o.R.TrackFiles[ln-1]
			}
			o.R.TrackFiles = o.R.TrackFiles[:ln-1]
			break
		}
	}

	return nil
}

// AddTrackOwnerships adds the given related objects to the existing relationships
// of the track, optionally inserting them as new records.
// Appends related to o.R.TrackOwnerships.
// Sets related.R.Track appropriately.
func (o *Track) AddTrackOwnerships(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TrackOwnership) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TrackID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"track_ownership\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"track_id"}),
				strmangle.WhereClause("\"", "\"", 2, trackOwnershipPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TrackID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &trackR{
			TrackOwnerships: related,
		}
	} else {
		o.R.TrackOwnerships = append(o.R.TrackOwnerships, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &trackOwnershipR{
				Track: o,
			}
		} else {
			rel.R.Track = o
		}
	}
	return nil
}

// SetTrackOwnerships removes all previously related items of the
// track replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Track's TrackOwnerships accordingly.
// Replaces o.R.TrackOwnerships with related.
// Sets related.R.Track's TrackOwnerships accordingly.
func (o *Track) SetTrackOwnerships(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TrackOwnership) error {
	query := "update \"track_ownership\" set \"track_id\" = null where \"track_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TrackOwnerships {
			queries.SetScanner(&rel.TrackID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Track = nil
		}
		o.R.TrackOwnerships = nil
	}

	return o.AddTrackOwnerships(ctx, exec, insert, related...)
}

// RemoveTrackOwnerships relationships from objects passed in.
// Removes related items from R.TrackOwnerships (uses pointer comparison, removal does not keep order)
// Sets related.R.Track.
func (o *Track) RemoveTrackOwnerships(ctx context.Context, exec boil.ContextExecutor, related ...*TrackOwnership) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TrackID, nil)
		if rel.R != nil {
			rel.R.Track = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("track_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TrackOwnerships {
			if rel != ri {
				continue
			}

			ln := len(o.R.TrackOwnerships)
			if ln > 1 && i < ln-1 {
				o.R.TrackOwnerships[i] = o.R.TrackOwnerships[ln-1]
			}
			o.R.TrackOwnerships = o.R.TrackOwnerships[:ln-1]
			break
		}
	}

	return nil
}

// AddTracksArtists adds the given related objects to the existing relationships
// of the track, optionally inserting them as new records.
// Appends related to o.R.TracksArtists.
// Sets related.R.Track appropriately.
func (o *Track) AddTracksArtists(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TracksArtist) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TrackID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tracks_artists\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"track_id"}),
				strmangle.WhereClause("\"", "\"", 2, tracksArtistPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.TrackID, rel.ArtistID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TrackID = o.ID
		}
	}

	if o.R == nil {
		o.R = &trackR{
			TracksArtists: related,
		}
	} else {
		o.R.TracksArtists = append(o.R.TracksArtists, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tracksArtistR{
				Track: o,
			}
		} else {
			rel.R.Track = o
		}
	}
	return nil
}

// Tracks retrieves all the records using an executor.
func Tracks(mods ...qm.QueryMod) trackQuery {
	mods = append(mods, qm.From("\"tracks\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tracks\".*"})
	}

	return trackQuery{q}
}

// FindTrack retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTrack(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Track, error) {
	trackObj := &Track{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tracks\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, trackObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tracks")
	}

	if err = trackObj.doAfterSelectHooks(ctx, exec); err != nil {
		return trackObj, err
	}

	return trackObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Track) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tracks provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trackColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	trackInsertCacheMut.RLock()
	cache, cached := trackInsertCache[key]
	trackInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			trackAllColumns,
			trackColumnsWithDefault,
			trackColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(trackType, trackMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(trackType, trackMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tracks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tracks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tracks")
	}

	if !cached {
		trackInsertCacheMut.Lock()
		trackInsertCache[key] = cache
		trackInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Track.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Track) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	trackUpdateCacheMut.RLock()
	cache, cached := trackUpdateCache[key]
	trackUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			trackAllColumns,
			trackPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tracks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tracks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, trackPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(trackType, trackMapping, append(wl, trackPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tracks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tracks")
	}

	if !cached {
		trackUpdateCacheMut.Lock()
		trackUpdateCache[key] = cache
		trackUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q trackQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tracks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tracks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TrackSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tracks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, trackPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in track slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all track")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Track) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no tracks provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trackColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	trackUpsertCacheMut.RLock()
	cache, cached := trackUpsertCache[key]
	trackUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			trackAllColumns,
			trackColumnsWithDefault,
			trackColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			trackAllColumns,
			trackPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert tracks, could not build update column list")
		}

		ret := strmangle.SetComplement(trackAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(trackPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert tracks, could not build conflict column list")
			}

			conflict = make([]string, len(trackPrimaryKeyColumns))
			copy(conflict, trackPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tracks\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(trackType, trackMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(trackType, trackMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert tracks")
	}

	if !cached {
		trackUpsertCacheMut.Lock()
		trackUpsertCache[key] = cache
		trackUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Track record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Track) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Track provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), trackPrimaryKeyMapping)
	sql := "DELETE FROM \"tracks\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tracks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tracks")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q trackQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no trackQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tracks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tracks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TrackSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(trackBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tracks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trackPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from track slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tracks")
	}

	if len(trackAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Track) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTrack(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TrackSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TrackSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tracks\".* FROM \"tracks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trackPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TrackSlice")
	}

	*o = slice

	return nil
}

// TrackExists checks if the Track row exists.
func TrackExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tracks\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tracks exists")
	}

	return exists, nil
}

// Exists checks if the Track row exists.
func (o *Track) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TrackExists(ctx, exec, o.ID)
}
