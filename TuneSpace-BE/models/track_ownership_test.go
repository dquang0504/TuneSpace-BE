// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTrackOwnerships(t *testing.T) {
	t.Parallel()

	query := TrackOwnerships()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTrackOwnershipsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TrackOwnership{}
	if err = randomize.Struct(seed, o, trackOwnershipDBTypes, true, trackOwnershipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackOwnership struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TrackOwnerships().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTrackOwnershipsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TrackOwnership{}
	if err = randomize.Struct(seed, o, trackOwnershipDBTypes, true, trackOwnershipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackOwnership struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TrackOwnerships().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TrackOwnerships().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTrackOwnershipsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TrackOwnership{}
	if err = randomize.Struct(seed, o, trackOwnershipDBTypes, true, trackOwnershipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackOwnership struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TrackOwnershipSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TrackOwnerships().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTrackOwnershipsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TrackOwnership{}
	if err = randomize.Struct(seed, o, trackOwnershipDBTypes, true, trackOwnershipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackOwnership struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TrackOwnershipExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TrackOwnership exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TrackOwnershipExists to return true, but got false.")
	}
}

func testTrackOwnershipsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TrackOwnership{}
	if err = randomize.Struct(seed, o, trackOwnershipDBTypes, true, trackOwnershipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackOwnership struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	trackOwnershipFound, err := FindTrackOwnership(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if trackOwnershipFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTrackOwnershipsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TrackOwnership{}
	if err = randomize.Struct(seed, o, trackOwnershipDBTypes, true, trackOwnershipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackOwnership struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TrackOwnerships().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTrackOwnershipsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TrackOwnership{}
	if err = randomize.Struct(seed, o, trackOwnershipDBTypes, true, trackOwnershipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackOwnership struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TrackOwnerships().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTrackOwnershipsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	trackOwnershipOne := &TrackOwnership{}
	trackOwnershipTwo := &TrackOwnership{}
	if err = randomize.Struct(seed, trackOwnershipOne, trackOwnershipDBTypes, false, trackOwnershipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackOwnership struct: %s", err)
	}
	if err = randomize.Struct(seed, trackOwnershipTwo, trackOwnershipDBTypes, false, trackOwnershipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackOwnership struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = trackOwnershipOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = trackOwnershipTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TrackOwnerships().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTrackOwnershipsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	trackOwnershipOne := &TrackOwnership{}
	trackOwnershipTwo := &TrackOwnership{}
	if err = randomize.Struct(seed, trackOwnershipOne, trackOwnershipDBTypes, false, trackOwnershipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackOwnership struct: %s", err)
	}
	if err = randomize.Struct(seed, trackOwnershipTwo, trackOwnershipDBTypes, false, trackOwnershipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackOwnership struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = trackOwnershipOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = trackOwnershipTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TrackOwnerships().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func trackOwnershipBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TrackOwnership) error {
	*o = TrackOwnership{}
	return nil
}

func trackOwnershipAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TrackOwnership) error {
	*o = TrackOwnership{}
	return nil
}

func trackOwnershipAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TrackOwnership) error {
	*o = TrackOwnership{}
	return nil
}

func trackOwnershipBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TrackOwnership) error {
	*o = TrackOwnership{}
	return nil
}

func trackOwnershipAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TrackOwnership) error {
	*o = TrackOwnership{}
	return nil
}

func trackOwnershipBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TrackOwnership) error {
	*o = TrackOwnership{}
	return nil
}

func trackOwnershipAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TrackOwnership) error {
	*o = TrackOwnership{}
	return nil
}

func trackOwnershipBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TrackOwnership) error {
	*o = TrackOwnership{}
	return nil
}

func trackOwnershipAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TrackOwnership) error {
	*o = TrackOwnership{}
	return nil
}

func testTrackOwnershipsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TrackOwnership{}
	o := &TrackOwnership{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, trackOwnershipDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TrackOwnership object: %s", err)
	}

	AddTrackOwnershipHook(boil.BeforeInsertHook, trackOwnershipBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	trackOwnershipBeforeInsertHooks = []TrackOwnershipHook{}

	AddTrackOwnershipHook(boil.AfterInsertHook, trackOwnershipAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	trackOwnershipAfterInsertHooks = []TrackOwnershipHook{}

	AddTrackOwnershipHook(boil.AfterSelectHook, trackOwnershipAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	trackOwnershipAfterSelectHooks = []TrackOwnershipHook{}

	AddTrackOwnershipHook(boil.BeforeUpdateHook, trackOwnershipBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	trackOwnershipBeforeUpdateHooks = []TrackOwnershipHook{}

	AddTrackOwnershipHook(boil.AfterUpdateHook, trackOwnershipAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	trackOwnershipAfterUpdateHooks = []TrackOwnershipHook{}

	AddTrackOwnershipHook(boil.BeforeDeleteHook, trackOwnershipBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	trackOwnershipBeforeDeleteHooks = []TrackOwnershipHook{}

	AddTrackOwnershipHook(boil.AfterDeleteHook, trackOwnershipAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	trackOwnershipAfterDeleteHooks = []TrackOwnershipHook{}

	AddTrackOwnershipHook(boil.BeforeUpsertHook, trackOwnershipBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	trackOwnershipBeforeUpsertHooks = []TrackOwnershipHook{}

	AddTrackOwnershipHook(boil.AfterUpsertHook, trackOwnershipAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	trackOwnershipAfterUpsertHooks = []TrackOwnershipHook{}
}

func testTrackOwnershipsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TrackOwnership{}
	if err = randomize.Struct(seed, o, trackOwnershipDBTypes, true, trackOwnershipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackOwnership struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TrackOwnerships().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTrackOwnershipsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TrackOwnership{}
	if err = randomize.Struct(seed, o, trackOwnershipDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TrackOwnership struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(trackOwnershipPrimaryKeyColumns, trackOwnershipColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := TrackOwnerships().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTrackOwnershipToOneUserUsingOwnerUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TrackOwnership
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, trackOwnershipDBTypes, true, trackOwnershipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackOwnership struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.OwnerUserID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.OwnerUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TrackOwnershipSlice{&local}
	if err = local.L.LoadOwnerUser(ctx, tx, false, (*[]*TrackOwnership)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OwnerUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.OwnerUser = nil
	if err = local.L.LoadOwnerUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OwnerUser == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTrackOwnershipToOneTrackUsingTrack(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TrackOwnership
	var foreign Track

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, trackOwnershipDBTypes, true, trackOwnershipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackOwnership struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, trackDBTypes, false, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.TrackID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Track().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddTrackHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Track) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TrackOwnershipSlice{&local}
	if err = local.L.LoadTrack(ctx, tx, false, (*[]*TrackOwnership)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Track == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Track = nil
	if err = local.L.LoadTrack(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Track == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTrackOwnershipToOneSetOpUserUsingOwnerUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TrackOwnership
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackOwnershipDBTypes, false, strmangle.SetComplement(trackOwnershipPrimaryKeyColumns, trackOwnershipColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetOwnerUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.OwnerUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OwnerUserTrackOwnerships[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.OwnerUserID, x.ID) {
			t.Error("foreign key was wrong value", a.OwnerUserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OwnerUserID))
		reflect.Indirect(reflect.ValueOf(&a.OwnerUserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.OwnerUserID, x.ID) {
			t.Error("foreign key was wrong value", a.OwnerUserID, x.ID)
		}
	}
}

func testTrackOwnershipToOneRemoveOpUserUsingOwnerUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TrackOwnership
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackOwnershipDBTypes, false, strmangle.SetComplement(trackOwnershipPrimaryKeyColumns, trackOwnershipColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOwnerUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOwnerUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.OwnerUser().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.OwnerUser != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.OwnerUserID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.OwnerUserTrackOwnerships) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTrackOwnershipToOneSetOpTrackUsingTrack(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TrackOwnership
	var b, c Track

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackOwnershipDBTypes, false, strmangle.SetComplement(trackOwnershipPrimaryKeyColumns, trackOwnershipColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Track{&b, &c} {
		err = a.SetTrack(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Track != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TrackOwnerships[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.TrackID, x.ID) {
			t.Error("foreign key was wrong value", a.TrackID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TrackID))
		reflect.Indirect(reflect.ValueOf(&a.TrackID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.TrackID, x.ID) {
			t.Error("foreign key was wrong value", a.TrackID, x.ID)
		}
	}
}

func testTrackOwnershipToOneRemoveOpTrackUsingTrack(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TrackOwnership
	var b Track

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackOwnershipDBTypes, false, strmangle.SetComplement(trackOwnershipPrimaryKeyColumns, trackOwnershipColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTrack(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTrack(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Track().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Track != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.TrackID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.TrackOwnerships) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTrackOwnershipsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TrackOwnership{}
	if err = randomize.Struct(seed, o, trackOwnershipDBTypes, true, trackOwnershipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackOwnership struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTrackOwnershipsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TrackOwnership{}
	if err = randomize.Struct(seed, o, trackOwnershipDBTypes, true, trackOwnershipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackOwnership struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TrackOwnershipSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTrackOwnershipsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TrackOwnership{}
	if err = randomize.Struct(seed, o, trackOwnershipDBTypes, true, trackOwnershipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackOwnership struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TrackOwnerships().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	trackOwnershipDBTypes = map[string]string{`ID`: `bigint`, `TrackID`: `bigint`, `OwnerUserID`: `bigint`, `Chain`: `text`, `ContractAddress`: `text`, `TokenID`: `text`, `TXHash`: `text`, `TokenURI`: `text`, `RightsPercentage`: `numeric`, `MintedAt`: `timestamp with time zone`, `MetadataChecksum`: `text`}
	_                     = bytes.MinRead
)

func testTrackOwnershipsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(trackOwnershipPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(trackOwnershipAllColumns) == len(trackOwnershipPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TrackOwnership{}
	if err = randomize.Struct(seed, o, trackOwnershipDBTypes, true, trackOwnershipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackOwnership struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TrackOwnerships().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, trackOwnershipDBTypes, true, trackOwnershipPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TrackOwnership struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTrackOwnershipsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(trackOwnershipAllColumns) == len(trackOwnershipPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TrackOwnership{}
	if err = randomize.Struct(seed, o, trackOwnershipDBTypes, true, trackOwnershipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackOwnership struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TrackOwnerships().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, trackOwnershipDBTypes, true, trackOwnershipPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TrackOwnership struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(trackOwnershipAllColumns, trackOwnershipPrimaryKeyColumns) {
		fields = trackOwnershipAllColumns
	} else {
		fields = strmangle.SetComplement(
			trackOwnershipAllColumns,
			trackOwnershipPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TrackOwnershipSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTrackOwnershipsUpsert(t *testing.T) {
	t.Parallel()

	if len(trackOwnershipAllColumns) == len(trackOwnershipPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TrackOwnership{}
	if err = randomize.Struct(seed, &o, trackOwnershipDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TrackOwnership struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TrackOwnership: %s", err)
	}

	count, err := TrackOwnerships().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, trackOwnershipDBTypes, false, trackOwnershipPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TrackOwnership struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TrackOwnership: %s", err)
	}

	count, err = TrackOwnerships().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
