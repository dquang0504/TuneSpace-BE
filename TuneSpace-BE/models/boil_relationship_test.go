// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AlbumToArtistUsingArtist", testAlbumToOneArtistUsingArtist)
	t.Run("ArtistToUserUsingUser", testArtistToOneUserUsingUser)
	t.Run("ArtistsAlbumToAlbumUsingAlbum", testArtistsAlbumToOneAlbumUsingAlbum)
	t.Run("ArtistsAlbumToArtistUsingArtist", testArtistsAlbumToOneArtistUsingArtist)
	t.Run("CommentToTrackUsingTrack", testCommentToOneTrackUsingTrack)
	t.Run("CommentToUserUsingUser", testCommentToOneUserUsingUser)
	t.Run("LikeToTrackUsingTrack", testLikeToOneTrackUsingTrack)
	t.Run("LikeToUserUsingUser", testLikeToOneUserUsingUser)
	t.Run("PlaylistTrackToPlaylistUsingPlaylist", testPlaylistTrackToOnePlaylistUsingPlaylist)
	t.Run("PlaylistTrackToTrackUsingTrack", testPlaylistTrackToOneTrackUsingTrack)
	t.Run("PlaylistToUserUsingOwner", testPlaylistToOneUserUsingOwner)
	t.Run("StreamToTrackUsingTrack", testStreamToOneTrackUsingTrack)
	t.Run("StreamToUserUsingUser", testStreamToOneUserUsingUser)
	t.Run("TrackFileToTrackUsingTrack", testTrackFileToOneTrackUsingTrack)
	t.Run("TrackOwnershipToUserUsingOwnerUser", testTrackOwnershipToOneUserUsingOwnerUser)
	t.Run("TrackOwnershipToTrackUsingTrack", testTrackOwnershipToOneTrackUsingTrack)
	t.Run("TrackToAlbumUsingAlbum", testTrackToOneAlbumUsingAlbum)
	t.Run("TracksArtistToArtistUsingArtist", testTracksArtistToOneArtistUsingArtist)
	t.Run("TracksArtistToTrackUsingTrack", testTracksArtistToOneTrackUsingTrack)
	t.Run("UserToRoleUsingRole", testUserToOneRoleUsingRole)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AlbumToArtistsAlbums", testAlbumToManyArtistsAlbums)
	t.Run("AlbumToTracks", testAlbumToManyTracks)
	t.Run("ArtistToAlbums", testArtistToManyAlbums)
	t.Run("ArtistToArtistsAlbums", testArtistToManyArtistsAlbums)
	t.Run("ArtistToTracksArtists", testArtistToManyTracksArtists)
	t.Run("PlaylistToPlaylistTracks", testPlaylistToManyPlaylistTracks)
	t.Run("RoleToUsers", testRoleToManyUsers)
	t.Run("TrackToComments", testTrackToManyComments)
	t.Run("TrackToLikes", testTrackToManyLikes)
	t.Run("TrackToPlaylistTracks", testTrackToManyPlaylistTracks)
	t.Run("TrackToStreams", testTrackToManyStreams)
	t.Run("TrackToTrackFiles", testTrackToManyTrackFiles)
	t.Run("TrackToTrackOwnerships", testTrackToManyTrackOwnerships)
	t.Run("TrackToTracksArtists", testTrackToManyTracksArtists)
	t.Run("UserToArtists", testUserToManyArtists)
	t.Run("UserToComments", testUserToManyComments)
	t.Run("UserToLikes", testUserToManyLikes)
	t.Run("UserToOwnerPlaylists", testUserToManyOwnerPlaylists)
	t.Run("UserToStreams", testUserToManyStreams)
	t.Run("UserToOwnerUserTrackOwnerships", testUserToManyOwnerUserTrackOwnerships)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AlbumToArtistUsingAlbums", testAlbumToOneSetOpArtistUsingArtist)
	t.Run("ArtistToUserUsingArtists", testArtistToOneSetOpUserUsingUser)
	t.Run("ArtistsAlbumToAlbumUsingArtistsAlbums", testArtistsAlbumToOneSetOpAlbumUsingAlbum)
	t.Run("ArtistsAlbumToArtistUsingArtistsAlbums", testArtistsAlbumToOneSetOpArtistUsingArtist)
	t.Run("CommentToTrackUsingComments", testCommentToOneSetOpTrackUsingTrack)
	t.Run("CommentToUserUsingComments", testCommentToOneSetOpUserUsingUser)
	t.Run("LikeToTrackUsingLikes", testLikeToOneSetOpTrackUsingTrack)
	t.Run("LikeToUserUsingLikes", testLikeToOneSetOpUserUsingUser)
	t.Run("PlaylistTrackToPlaylistUsingPlaylistTracks", testPlaylistTrackToOneSetOpPlaylistUsingPlaylist)
	t.Run("PlaylistTrackToTrackUsingPlaylistTracks", testPlaylistTrackToOneSetOpTrackUsingTrack)
	t.Run("PlaylistToUserUsingOwnerPlaylists", testPlaylistToOneSetOpUserUsingOwner)
	t.Run("StreamToTrackUsingStreams", testStreamToOneSetOpTrackUsingTrack)
	t.Run("StreamToUserUsingStreams", testStreamToOneSetOpUserUsingUser)
	t.Run("TrackFileToTrackUsingTrackFiles", testTrackFileToOneSetOpTrackUsingTrack)
	t.Run("TrackOwnershipToUserUsingOwnerUserTrackOwnerships", testTrackOwnershipToOneSetOpUserUsingOwnerUser)
	t.Run("TrackOwnershipToTrackUsingTrackOwnerships", testTrackOwnershipToOneSetOpTrackUsingTrack)
	t.Run("TrackToAlbumUsingTracks", testTrackToOneSetOpAlbumUsingAlbum)
	t.Run("TracksArtistToArtistUsingTracksArtists", testTracksArtistToOneSetOpArtistUsingArtist)
	t.Run("TracksArtistToTrackUsingTracksArtists", testTracksArtistToOneSetOpTrackUsingTrack)
	t.Run("UserToRoleUsingUsers", testUserToOneSetOpRoleUsingRole)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("AlbumToArtistUsingAlbums", testAlbumToOneRemoveOpArtistUsingArtist)
	t.Run("ArtistToUserUsingArtists", testArtistToOneRemoveOpUserUsingUser)
	t.Run("CommentToTrackUsingComments", testCommentToOneRemoveOpTrackUsingTrack)
	t.Run("CommentToUserUsingComments", testCommentToOneRemoveOpUserUsingUser)
	t.Run("PlaylistToUserUsingOwnerPlaylists", testPlaylistToOneRemoveOpUserUsingOwner)
	t.Run("StreamToUserUsingStreams", testStreamToOneRemoveOpUserUsingUser)
	t.Run("TrackFileToTrackUsingTrackFiles", testTrackFileToOneRemoveOpTrackUsingTrack)
	t.Run("TrackOwnershipToUserUsingOwnerUserTrackOwnerships", testTrackOwnershipToOneRemoveOpUserUsingOwnerUser)
	t.Run("TrackOwnershipToTrackUsingTrackOwnerships", testTrackOwnershipToOneRemoveOpTrackUsingTrack)
	t.Run("TrackToAlbumUsingTracks", testTrackToOneRemoveOpAlbumUsingAlbum)
	t.Run("UserToRoleUsingUsers", testUserToOneRemoveOpRoleUsingRole)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AlbumToArtistsAlbums", testAlbumToManyAddOpArtistsAlbums)
	t.Run("AlbumToTracks", testAlbumToManyAddOpTracks)
	t.Run("ArtistToAlbums", testArtistToManyAddOpAlbums)
	t.Run("ArtistToArtistsAlbums", testArtistToManyAddOpArtistsAlbums)
	t.Run("ArtistToTracksArtists", testArtistToManyAddOpTracksArtists)
	t.Run("PlaylistToPlaylistTracks", testPlaylistToManyAddOpPlaylistTracks)
	t.Run("RoleToUsers", testRoleToManyAddOpUsers)
	t.Run("TrackToComments", testTrackToManyAddOpComments)
	t.Run("TrackToLikes", testTrackToManyAddOpLikes)
	t.Run("TrackToPlaylistTracks", testTrackToManyAddOpPlaylistTracks)
	t.Run("TrackToStreams", testTrackToManyAddOpStreams)
	t.Run("TrackToTrackFiles", testTrackToManyAddOpTrackFiles)
	t.Run("TrackToTrackOwnerships", testTrackToManyAddOpTrackOwnerships)
	t.Run("TrackToTracksArtists", testTrackToManyAddOpTracksArtists)
	t.Run("UserToArtists", testUserToManyAddOpArtists)
	t.Run("UserToComments", testUserToManyAddOpComments)
	t.Run("UserToLikes", testUserToManyAddOpLikes)
	t.Run("UserToOwnerPlaylists", testUserToManyAddOpOwnerPlaylists)
	t.Run("UserToStreams", testUserToManyAddOpStreams)
	t.Run("UserToOwnerUserTrackOwnerships", testUserToManyAddOpOwnerUserTrackOwnerships)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("AlbumToTracks", testAlbumToManySetOpTracks)
	t.Run("ArtistToAlbums", testArtistToManySetOpAlbums)
	t.Run("RoleToUsers", testRoleToManySetOpUsers)
	t.Run("TrackToComments", testTrackToManySetOpComments)
	t.Run("TrackToTrackFiles", testTrackToManySetOpTrackFiles)
	t.Run("TrackToTrackOwnerships", testTrackToManySetOpTrackOwnerships)
	t.Run("UserToArtists", testUserToManySetOpArtists)
	t.Run("UserToComments", testUserToManySetOpComments)
	t.Run("UserToOwnerPlaylists", testUserToManySetOpOwnerPlaylists)
	t.Run("UserToStreams", testUserToManySetOpStreams)
	t.Run("UserToOwnerUserTrackOwnerships", testUserToManySetOpOwnerUserTrackOwnerships)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("AlbumToTracks", testAlbumToManyRemoveOpTracks)
	t.Run("ArtistToAlbums", testArtistToManyRemoveOpAlbums)
	t.Run("RoleToUsers", testRoleToManyRemoveOpUsers)
	t.Run("TrackToComments", testTrackToManyRemoveOpComments)
	t.Run("TrackToTrackFiles", testTrackToManyRemoveOpTrackFiles)
	t.Run("TrackToTrackOwnerships", testTrackToManyRemoveOpTrackOwnerships)
	t.Run("UserToArtists", testUserToManyRemoveOpArtists)
	t.Run("UserToComments", testUserToManyRemoveOpComments)
	t.Run("UserToOwnerPlaylists", testUserToManyRemoveOpOwnerPlaylists)
	t.Run("UserToStreams", testUserToManyRemoveOpStreams)
	t.Run("UserToOwnerUserTrackOwnerships", testUserToManyRemoveOpOwnerUserTrackOwnerships)
}
