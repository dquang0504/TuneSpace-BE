// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Stream is an object representing the database table.
type Stream struct {
	ID               int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID           null.Int64  `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	TrackID          int64       `boil:"track_id" json:"track_id" toml:"track_id" yaml:"track_id"`
	StartedAt        time.Time   `boil:"started_at" json:"started_at" toml:"started_at" yaml:"started_at"`
	DurationListened null.Int    `boil:"duration_listened" json:"duration_listened,omitempty" toml:"duration_listened" yaml:"duration_listened,omitempty"`
	Device           null.String `boil:"device" json:"device,omitempty" toml:"device" yaml:"device,omitempty"`
	IP               null.String `boil:"ip" json:"ip,omitempty" toml:"ip" yaml:"ip,omitempty"`
	UserAgent        null.String `boil:"user_agent" json:"user_agent,omitempty" toml:"user_agent" yaml:"user_agent,omitempty"`
	IsCompleted      null.Bool   `boil:"is_completed" json:"is_completed,omitempty" toml:"is_completed" yaml:"is_completed,omitempty"`
	CreatedAt        null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *streamR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L streamL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StreamColumns = struct {
	ID               string
	UserID           string
	TrackID          string
	StartedAt        string
	DurationListened string
	Device           string
	IP               string
	UserAgent        string
	IsCompleted      string
	CreatedAt        string
}{
	ID:               "id",
	UserID:           "user_id",
	TrackID:          "track_id",
	StartedAt:        "started_at",
	DurationListened: "duration_listened",
	Device:           "device",
	IP:               "ip",
	UserAgent:        "user_agent",
	IsCompleted:      "is_completed",
	CreatedAt:        "created_at",
}

var StreamTableColumns = struct {
	ID               string
	UserID           string
	TrackID          string
	StartedAt        string
	DurationListened string
	Device           string
	IP               string
	UserAgent        string
	IsCompleted      string
	CreatedAt        string
}{
	ID:               "streams.id",
	UserID:           "streams.user_id",
	TrackID:          "streams.track_id",
	StartedAt:        "streams.started_at",
	DurationListened: "streams.duration_listened",
	Device:           "streams.device",
	IP:               "streams.ip",
	UserAgent:        "streams.user_agent",
	IsCompleted:      "streams.is_completed",
	CreatedAt:        "streams.created_at",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var StreamWhere = struct {
	ID               whereHelperint64
	UserID           whereHelpernull_Int64
	TrackID          whereHelperint64
	StartedAt        whereHelpertime_Time
	DurationListened whereHelpernull_Int
	Device           whereHelpernull_String
	IP               whereHelpernull_String
	UserAgent        whereHelpernull_String
	IsCompleted      whereHelpernull_Bool
	CreatedAt        whereHelpernull_Time
}{
	ID:               whereHelperint64{field: "\"streams\".\"id\""},
	UserID:           whereHelpernull_Int64{field: "\"streams\".\"user_id\""},
	TrackID:          whereHelperint64{field: "\"streams\".\"track_id\""},
	StartedAt:        whereHelpertime_Time{field: "\"streams\".\"started_at\""},
	DurationListened: whereHelpernull_Int{field: "\"streams\".\"duration_listened\""},
	Device:           whereHelpernull_String{field: "\"streams\".\"device\""},
	IP:               whereHelpernull_String{field: "\"streams\".\"ip\""},
	UserAgent:        whereHelpernull_String{field: "\"streams\".\"user_agent\""},
	IsCompleted:      whereHelpernull_Bool{field: "\"streams\".\"is_completed\""},
	CreatedAt:        whereHelpernull_Time{field: "\"streams\".\"created_at\""},
}

// StreamRels is where relationship names are stored.
var StreamRels = struct {
	Track string
	User  string
}{
	Track: "Track",
	User:  "User",
}

// streamR is where relationships are stored.
type streamR struct {
	Track *Track `boil:"Track" json:"Track" toml:"Track" yaml:"Track"`
	User  *User  `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*streamR) NewStruct() *streamR {
	return &streamR{}
}

func (o *Stream) GetTrack() *Track {
	if o == nil {
		return nil
	}

	return o.R.GetTrack()
}

func (r *streamR) GetTrack() *Track {
	if r == nil {
		return nil
	}

	return r.Track
}

func (o *Stream) GetUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetUser()
}

func (r *streamR) GetUser() *User {
	if r == nil {
		return nil
	}

	return r.User
}

// streamL is where Load methods for each relationship are stored.
type streamL struct{}

var (
	streamAllColumns            = []string{"id", "user_id", "track_id", "started_at", "duration_listened", "device", "ip", "user_agent", "is_completed", "created_at"}
	streamColumnsWithoutDefault = []string{"track_id"}
	streamColumnsWithDefault    = []string{"id", "user_id", "started_at", "duration_listened", "device", "ip", "user_agent", "is_completed", "created_at"}
	streamPrimaryKeyColumns     = []string{"id"}
	streamGeneratedColumns      = []string{}
)

type (
	// StreamSlice is an alias for a slice of pointers to Stream.
	// This should almost always be used instead of []Stream.
	StreamSlice []*Stream
	// StreamHook is the signature for custom Stream hook methods
	StreamHook func(context.Context, boil.ContextExecutor, *Stream) error

	streamQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	streamType                 = reflect.TypeOf(&Stream{})
	streamMapping              = queries.MakeStructMapping(streamType)
	streamPrimaryKeyMapping, _ = queries.BindMapping(streamType, streamMapping, streamPrimaryKeyColumns)
	streamInsertCacheMut       sync.RWMutex
	streamInsertCache          = make(map[string]insertCache)
	streamUpdateCacheMut       sync.RWMutex
	streamUpdateCache          = make(map[string]updateCache)
	streamUpsertCacheMut       sync.RWMutex
	streamUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var streamAfterSelectMu sync.Mutex
var streamAfterSelectHooks []StreamHook

var streamBeforeInsertMu sync.Mutex
var streamBeforeInsertHooks []StreamHook
var streamAfterInsertMu sync.Mutex
var streamAfterInsertHooks []StreamHook

var streamBeforeUpdateMu sync.Mutex
var streamBeforeUpdateHooks []StreamHook
var streamAfterUpdateMu sync.Mutex
var streamAfterUpdateHooks []StreamHook

var streamBeforeDeleteMu sync.Mutex
var streamBeforeDeleteHooks []StreamHook
var streamAfterDeleteMu sync.Mutex
var streamAfterDeleteHooks []StreamHook

var streamBeforeUpsertMu sync.Mutex
var streamBeforeUpsertHooks []StreamHook
var streamAfterUpsertMu sync.Mutex
var streamAfterUpsertHooks []StreamHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Stream) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range streamAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Stream) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range streamBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Stream) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range streamAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Stream) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range streamBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Stream) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range streamAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Stream) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range streamBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Stream) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range streamAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Stream) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range streamBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Stream) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range streamAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStreamHook registers your hook function for all future operations.
func AddStreamHook(hookPoint boil.HookPoint, streamHook StreamHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		streamAfterSelectMu.Lock()
		streamAfterSelectHooks = append(streamAfterSelectHooks, streamHook)
		streamAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		streamBeforeInsertMu.Lock()
		streamBeforeInsertHooks = append(streamBeforeInsertHooks, streamHook)
		streamBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		streamAfterInsertMu.Lock()
		streamAfterInsertHooks = append(streamAfterInsertHooks, streamHook)
		streamAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		streamBeforeUpdateMu.Lock()
		streamBeforeUpdateHooks = append(streamBeforeUpdateHooks, streamHook)
		streamBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		streamAfterUpdateMu.Lock()
		streamAfterUpdateHooks = append(streamAfterUpdateHooks, streamHook)
		streamAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		streamBeforeDeleteMu.Lock()
		streamBeforeDeleteHooks = append(streamBeforeDeleteHooks, streamHook)
		streamBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		streamAfterDeleteMu.Lock()
		streamAfterDeleteHooks = append(streamAfterDeleteHooks, streamHook)
		streamAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		streamBeforeUpsertMu.Lock()
		streamBeforeUpsertHooks = append(streamBeforeUpsertHooks, streamHook)
		streamBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		streamAfterUpsertMu.Lock()
		streamAfterUpsertHooks = append(streamAfterUpsertHooks, streamHook)
		streamAfterUpsertMu.Unlock()
	}
}

// One returns a single stream record from the query.
func (q streamQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Stream, error) {
	o := &Stream{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for streams")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Stream records from the query.
func (q streamQuery) All(ctx context.Context, exec boil.ContextExecutor) (StreamSlice, error) {
	var o []*Stream

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Stream slice")
	}

	if len(streamAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Stream records in the query.
func (q streamQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count streams rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q streamQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if streams exists")
	}

	return count > 0, nil
}

// Track pointed to by the foreign key.
func (o *Stream) Track(mods ...qm.QueryMod) trackQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TrackID),
	}

	queryMods = append(queryMods, mods...)

	return Tracks(queryMods...)
}

// User pointed to by the foreign key.
func (o *Stream) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadTrack allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (streamL) LoadTrack(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStream interface{}, mods queries.Applicator) error {
	var slice []*Stream
	var object *Stream

	if singular {
		var ok bool
		object, ok = maybeStream.(*Stream)
		if !ok {
			object = new(Stream)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStream)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStream))
			}
		}
	} else {
		s, ok := maybeStream.(*[]*Stream)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStream)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStream))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &streamR{}
		}
		args[object.TrackID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &streamR{}
			}

			args[obj.TrackID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tracks`),
		qm.WhereIn(`tracks.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Track")
	}

	var resultSlice []*Track
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Track")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tracks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tracks")
	}

	if len(trackAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Track = foreign
		if foreign.R == nil {
			foreign.R = &trackR{}
		}
		foreign.R.Streams = append(foreign.R.Streams, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TrackID == foreign.ID {
				local.R.Track = foreign
				if foreign.R == nil {
					foreign.R = &trackR{}
				}
				foreign.R.Streams = append(foreign.R.Streams, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (streamL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStream interface{}, mods queries.Applicator) error {
	var slice []*Stream
	var object *Stream

	if singular {
		var ok bool
		object, ok = maybeStream.(*Stream)
		if !ok {
			object = new(Stream)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStream)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStream))
			}
		}
	} else {
		s, ok := maybeStream.(*[]*Stream)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStream)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStream))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &streamR{}
		}
		if !queries.IsNil(object.UserID) {
			args[object.UserID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &streamR{}
			}

			if !queries.IsNil(obj.UserID) {
				args[obj.UserID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Streams = append(foreign.R.Streams, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Streams = append(foreign.R.Streams, local)
				break
			}
		}
	}

	return nil
}

// SetTrack of the stream to the related item.
// Sets o.R.Track to related.
// Adds o to related.R.Streams.
func (o *Stream) SetTrack(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Track) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"streams\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"track_id"}),
		strmangle.WhereClause("\"", "\"", 2, streamPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TrackID = related.ID
	if o.R == nil {
		o.R = &streamR{
			Track: related,
		}
	} else {
		o.R.Track = related
	}

	if related.R == nil {
		related.R = &trackR{
			Streams: StreamSlice{o},
		}
	} else {
		related.R.Streams = append(related.R.Streams, o)
	}

	return nil
}

// SetUser of the stream to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Streams.
func (o *Stream) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"streams\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, streamPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &streamR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Streams: StreamSlice{o},
		}
	} else {
		related.R.Streams = append(related.R.Streams, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Stream) RemoveUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.User = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Streams {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.Streams)
		if ln > 1 && i < ln-1 {
			related.R.Streams[i] = related.R.Streams[ln-1]
		}
		related.R.Streams = related.R.Streams[:ln-1]
		break
	}
	return nil
}

// Streams retrieves all the records using an executor.
func Streams(mods ...qm.QueryMod) streamQuery {
	mods = append(mods, qm.From("\"streams\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"streams\".*"})
	}

	return streamQuery{q}
}

// FindStream retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStream(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Stream, error) {
	streamObj := &Stream{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"streams\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, streamObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from streams")
	}

	if err = streamObj.doAfterSelectHooks(ctx, exec); err != nil {
		return streamObj, err
	}

	return streamObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Stream) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no streams provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(streamColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	streamInsertCacheMut.RLock()
	cache, cached := streamInsertCache[key]
	streamInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			streamAllColumns,
			streamColumnsWithDefault,
			streamColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(streamType, streamMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(streamType, streamMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"streams\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"streams\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into streams")
	}

	if !cached {
		streamInsertCacheMut.Lock()
		streamInsertCache[key] = cache
		streamInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Stream.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Stream) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	streamUpdateCacheMut.RLock()
	cache, cached := streamUpdateCache[key]
	streamUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			streamAllColumns,
			streamPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update streams, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"streams\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, streamPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(streamType, streamMapping, append(wl, streamPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update streams row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for streams")
	}

	if !cached {
		streamUpdateCacheMut.Lock()
		streamUpdateCache[key] = cache
		streamUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q streamQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for streams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for streams")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StreamSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), streamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"streams\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, streamPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in stream slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all stream")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Stream) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no streams provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(streamColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	streamUpsertCacheMut.RLock()
	cache, cached := streamUpsertCache[key]
	streamUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			streamAllColumns,
			streamColumnsWithDefault,
			streamColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			streamAllColumns,
			streamPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert streams, could not build update column list")
		}

		ret := strmangle.SetComplement(streamAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(streamPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert streams, could not build conflict column list")
			}

			conflict = make([]string, len(streamPrimaryKeyColumns))
			copy(conflict, streamPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"streams\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(streamType, streamMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(streamType, streamMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert streams")
	}

	if !cached {
		streamUpsertCacheMut.Lock()
		streamUpsertCache[key] = cache
		streamUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Stream record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Stream) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Stream provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), streamPrimaryKeyMapping)
	sql := "DELETE FROM \"streams\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from streams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for streams")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q streamQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no streamQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from streams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for streams")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StreamSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(streamBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), streamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"streams\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, streamPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from stream slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for streams")
	}

	if len(streamAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Stream) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStream(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StreamSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StreamSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), streamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"streams\".* FROM \"streams\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, streamPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StreamSlice")
	}

	*o = slice

	return nil
}

// StreamExists checks if the Stream row exists.
func StreamExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"streams\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if streams exists")
	}

	return exists, nil
}

// Exists checks if the Stream row exists.
func (o *Stream) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return StreamExists(ctx, exec, o.ID)
}
