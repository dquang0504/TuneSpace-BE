// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// TrackFile is an object representing the database table.
type TrackFile struct {
	ID         int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	TrackID    null.Int64  `boil:"track_id" json:"track_id,omitempty" toml:"track_id" yaml:"track_id,omitempty"`
	StorageURL string      `boil:"storage_url" json:"storage_url" toml:"storage_url" yaml:"storage_url"`
	Format     null.String `boil:"format" json:"format,omitempty" toml:"format" yaml:"format,omitempty"`
	Bitrate    null.Int    `boil:"bitrate" json:"bitrate,omitempty" toml:"bitrate" yaml:"bitrate,omitempty"`
	SizeBytes  null.Int64  `boil:"size_bytes" json:"size_bytes,omitempty" toml:"size_bytes" yaml:"size_bytes,omitempty"`
	Status     null.Int16  `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	UploadedAt null.Time   `boil:"uploaded_at" json:"uploaded_at,omitempty" toml:"uploaded_at" yaml:"uploaded_at,omitempty"`

	R *trackFileR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L trackFileL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TrackFileColumns = struct {
	ID         string
	TrackID    string
	StorageURL string
	Format     string
	Bitrate    string
	SizeBytes  string
	Status     string
	UploadedAt string
}{
	ID:         "id",
	TrackID:    "track_id",
	StorageURL: "storage_url",
	Format:     "format",
	Bitrate:    "bitrate",
	SizeBytes:  "size_bytes",
	Status:     "status",
	UploadedAt: "uploaded_at",
}

var TrackFileTableColumns = struct {
	ID         string
	TrackID    string
	StorageURL string
	Format     string
	Bitrate    string
	SizeBytes  string
	Status     string
	UploadedAt string
}{
	ID:         "track_files.id",
	TrackID:    "track_files.track_id",
	StorageURL: "track_files.storage_url",
	Format:     "track_files.format",
	Bitrate:    "track_files.bitrate",
	SizeBytes:  "track_files.size_bytes",
	Status:     "track_files.status",
	UploadedAt: "track_files.uploaded_at",
}

// Generated where

type whereHelpernull_Int16 struct{ field string }

func (w whereHelpernull_Int16) EQ(x null.Int16) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int16) NEQ(x null.Int16) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int16) LT(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int16) LTE(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int16) GT(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int16) GTE(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int16) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int16) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var TrackFileWhere = struct {
	ID         whereHelperint64
	TrackID    whereHelpernull_Int64
	StorageURL whereHelperstring
	Format     whereHelpernull_String
	Bitrate    whereHelpernull_Int
	SizeBytes  whereHelpernull_Int64
	Status     whereHelpernull_Int16
	UploadedAt whereHelpernull_Time
}{
	ID:         whereHelperint64{field: "\"track_files\".\"id\""},
	TrackID:    whereHelpernull_Int64{field: "\"track_files\".\"track_id\""},
	StorageURL: whereHelperstring{field: "\"track_files\".\"storage_url\""},
	Format:     whereHelpernull_String{field: "\"track_files\".\"format\""},
	Bitrate:    whereHelpernull_Int{field: "\"track_files\".\"bitrate\""},
	SizeBytes:  whereHelpernull_Int64{field: "\"track_files\".\"size_bytes\""},
	Status:     whereHelpernull_Int16{field: "\"track_files\".\"status\""},
	UploadedAt: whereHelpernull_Time{field: "\"track_files\".\"uploaded_at\""},
}

// TrackFileRels is where relationship names are stored.
var TrackFileRels = struct {
	Track string
}{
	Track: "Track",
}

// trackFileR is where relationships are stored.
type trackFileR struct {
	Track *Track `boil:"Track" json:"Track" toml:"Track" yaml:"Track"`
}

// NewStruct creates a new relationship struct
func (*trackFileR) NewStruct() *trackFileR {
	return &trackFileR{}
}

func (o *TrackFile) GetTrack() *Track {
	if o == nil {
		return nil
	}

	return o.R.GetTrack()
}

func (r *trackFileR) GetTrack() *Track {
	if r == nil {
		return nil
	}

	return r.Track
}

// trackFileL is where Load methods for each relationship are stored.
type trackFileL struct{}

var (
	trackFileAllColumns            = []string{"id", "track_id", "storage_url", "format", "bitrate", "size_bytes", "status", "uploaded_at"}
	trackFileColumnsWithoutDefault = []string{"storage_url"}
	trackFileColumnsWithDefault    = []string{"id", "track_id", "format", "bitrate", "size_bytes", "status", "uploaded_at"}
	trackFilePrimaryKeyColumns     = []string{"id"}
	trackFileGeneratedColumns      = []string{}
)

type (
	// TrackFileSlice is an alias for a slice of pointers to TrackFile.
	// This should almost always be used instead of []TrackFile.
	TrackFileSlice []*TrackFile
	// TrackFileHook is the signature for custom TrackFile hook methods
	TrackFileHook func(context.Context, boil.ContextExecutor, *TrackFile) error

	trackFileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	trackFileType                 = reflect.TypeOf(&TrackFile{})
	trackFileMapping              = queries.MakeStructMapping(trackFileType)
	trackFilePrimaryKeyMapping, _ = queries.BindMapping(trackFileType, trackFileMapping, trackFilePrimaryKeyColumns)
	trackFileInsertCacheMut       sync.RWMutex
	trackFileInsertCache          = make(map[string]insertCache)
	trackFileUpdateCacheMut       sync.RWMutex
	trackFileUpdateCache          = make(map[string]updateCache)
	trackFileUpsertCacheMut       sync.RWMutex
	trackFileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var trackFileAfterSelectMu sync.Mutex
var trackFileAfterSelectHooks []TrackFileHook

var trackFileBeforeInsertMu sync.Mutex
var trackFileBeforeInsertHooks []TrackFileHook
var trackFileAfterInsertMu sync.Mutex
var trackFileAfterInsertHooks []TrackFileHook

var trackFileBeforeUpdateMu sync.Mutex
var trackFileBeforeUpdateHooks []TrackFileHook
var trackFileAfterUpdateMu sync.Mutex
var trackFileAfterUpdateHooks []TrackFileHook

var trackFileBeforeDeleteMu sync.Mutex
var trackFileBeforeDeleteHooks []TrackFileHook
var trackFileAfterDeleteMu sync.Mutex
var trackFileAfterDeleteHooks []TrackFileHook

var trackFileBeforeUpsertMu sync.Mutex
var trackFileBeforeUpsertHooks []TrackFileHook
var trackFileAfterUpsertMu sync.Mutex
var trackFileAfterUpsertHooks []TrackFileHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TrackFile) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackFileAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TrackFile) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackFileBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TrackFile) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackFileAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TrackFile) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackFileBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TrackFile) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackFileAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TrackFile) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackFileBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TrackFile) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackFileAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TrackFile) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackFileBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TrackFile) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackFileAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTrackFileHook registers your hook function for all future operations.
func AddTrackFileHook(hookPoint boil.HookPoint, trackFileHook TrackFileHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		trackFileAfterSelectMu.Lock()
		trackFileAfterSelectHooks = append(trackFileAfterSelectHooks, trackFileHook)
		trackFileAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		trackFileBeforeInsertMu.Lock()
		trackFileBeforeInsertHooks = append(trackFileBeforeInsertHooks, trackFileHook)
		trackFileBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		trackFileAfterInsertMu.Lock()
		trackFileAfterInsertHooks = append(trackFileAfterInsertHooks, trackFileHook)
		trackFileAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		trackFileBeforeUpdateMu.Lock()
		trackFileBeforeUpdateHooks = append(trackFileBeforeUpdateHooks, trackFileHook)
		trackFileBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		trackFileAfterUpdateMu.Lock()
		trackFileAfterUpdateHooks = append(trackFileAfterUpdateHooks, trackFileHook)
		trackFileAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		trackFileBeforeDeleteMu.Lock()
		trackFileBeforeDeleteHooks = append(trackFileBeforeDeleteHooks, trackFileHook)
		trackFileBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		trackFileAfterDeleteMu.Lock()
		trackFileAfterDeleteHooks = append(trackFileAfterDeleteHooks, trackFileHook)
		trackFileAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		trackFileBeforeUpsertMu.Lock()
		trackFileBeforeUpsertHooks = append(trackFileBeforeUpsertHooks, trackFileHook)
		trackFileBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		trackFileAfterUpsertMu.Lock()
		trackFileAfterUpsertHooks = append(trackFileAfterUpsertHooks, trackFileHook)
		trackFileAfterUpsertMu.Unlock()
	}
}

// One returns a single trackFile record from the query.
func (q trackFileQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TrackFile, error) {
	o := &TrackFile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for track_files")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TrackFile records from the query.
func (q trackFileQuery) All(ctx context.Context, exec boil.ContextExecutor) (TrackFileSlice, error) {
	var o []*TrackFile

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TrackFile slice")
	}

	if len(trackFileAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TrackFile records in the query.
func (q trackFileQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count track_files rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q trackFileQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if track_files exists")
	}

	return count > 0, nil
}

// Track pointed to by the foreign key.
func (o *TrackFile) Track(mods ...qm.QueryMod) trackQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TrackID),
	}

	queryMods = append(queryMods, mods...)

	return Tracks(queryMods...)
}

// LoadTrack allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (trackFileL) LoadTrack(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrackFile interface{}, mods queries.Applicator) error {
	var slice []*TrackFile
	var object *TrackFile

	if singular {
		var ok bool
		object, ok = maybeTrackFile.(*TrackFile)
		if !ok {
			object = new(TrackFile)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrackFile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrackFile))
			}
		}
	} else {
		s, ok := maybeTrackFile.(*[]*TrackFile)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrackFile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrackFile))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &trackFileR{}
		}
		if !queries.IsNil(object.TrackID) {
			args[object.TrackID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackFileR{}
			}

			if !queries.IsNil(obj.TrackID) {
				args[obj.TrackID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tracks`),
		qm.WhereIn(`tracks.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Track")
	}

	var resultSlice []*Track
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Track")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tracks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tracks")
	}

	if len(trackAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Track = foreign
		if foreign.R == nil {
			foreign.R = &trackR{}
		}
		foreign.R.TrackFiles = append(foreign.R.TrackFiles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TrackID, foreign.ID) {
				local.R.Track = foreign
				if foreign.R == nil {
					foreign.R = &trackR{}
				}
				foreign.R.TrackFiles = append(foreign.R.TrackFiles, local)
				break
			}
		}
	}

	return nil
}

// SetTrack of the trackFile to the related item.
// Sets o.R.Track to related.
// Adds o to related.R.TrackFiles.
func (o *TrackFile) SetTrack(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Track) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"track_files\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"track_id"}),
		strmangle.WhereClause("\"", "\"", 2, trackFilePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TrackID, related.ID)
	if o.R == nil {
		o.R = &trackFileR{
			Track: related,
		}
	} else {
		o.R.Track = related
	}

	if related.R == nil {
		related.R = &trackR{
			TrackFiles: TrackFileSlice{o},
		}
	} else {
		related.R.TrackFiles = append(related.R.TrackFiles, o)
	}

	return nil
}

// RemoveTrack relationship.
// Sets o.R.Track to nil.
// Removes o from all passed in related items' relationships struct.
func (o *TrackFile) RemoveTrack(ctx context.Context, exec boil.ContextExecutor, related *Track) error {
	var err error

	queries.SetScanner(&o.TrackID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("track_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Track = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TrackFiles {
		if queries.Equal(o.TrackID, ri.TrackID) {
			continue
		}

		ln := len(related.R.TrackFiles)
		if ln > 1 && i < ln-1 {
			related.R.TrackFiles[i] = related.R.TrackFiles[ln-1]
		}
		related.R.TrackFiles = related.R.TrackFiles[:ln-1]
		break
	}
	return nil
}

// TrackFiles retrieves all the records using an executor.
func TrackFiles(mods ...qm.QueryMod) trackFileQuery {
	mods = append(mods, qm.From("\"track_files\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"track_files\".*"})
	}

	return trackFileQuery{q}
}

// FindTrackFile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTrackFile(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*TrackFile, error) {
	trackFileObj := &TrackFile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"track_files\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, trackFileObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from track_files")
	}

	if err = trackFileObj.doAfterSelectHooks(ctx, exec); err != nil {
		return trackFileObj, err
	}

	return trackFileObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TrackFile) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no track_files provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trackFileColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	trackFileInsertCacheMut.RLock()
	cache, cached := trackFileInsertCache[key]
	trackFileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			trackFileAllColumns,
			trackFileColumnsWithDefault,
			trackFileColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(trackFileType, trackFileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(trackFileType, trackFileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"track_files\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"track_files\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into track_files")
	}

	if !cached {
		trackFileInsertCacheMut.Lock()
		trackFileInsertCache[key] = cache
		trackFileInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TrackFile.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TrackFile) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	trackFileUpdateCacheMut.RLock()
	cache, cached := trackFileUpdateCache[key]
	trackFileUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			trackFileAllColumns,
			trackFilePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update track_files, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"track_files\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, trackFilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(trackFileType, trackFileMapping, append(wl, trackFilePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update track_files row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for track_files")
	}

	if !cached {
		trackFileUpdateCacheMut.Lock()
		trackFileUpdateCache[key] = cache
		trackFileUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q trackFileQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for track_files")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for track_files")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TrackFileSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"track_files\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, trackFilePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in trackFile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all trackFile")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TrackFile) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no track_files provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trackFileColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	trackFileUpsertCacheMut.RLock()
	cache, cached := trackFileUpsertCache[key]
	trackFileUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			trackFileAllColumns,
			trackFileColumnsWithDefault,
			trackFileColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			trackFileAllColumns,
			trackFilePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert track_files, could not build update column list")
		}

		ret := strmangle.SetComplement(trackFileAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(trackFilePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert track_files, could not build conflict column list")
			}

			conflict = make([]string, len(trackFilePrimaryKeyColumns))
			copy(conflict, trackFilePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"track_files\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(trackFileType, trackFileMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(trackFileType, trackFileMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert track_files")
	}

	if !cached {
		trackFileUpsertCacheMut.Lock()
		trackFileUpsertCache[key] = cache
		trackFileUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TrackFile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TrackFile) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TrackFile provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), trackFilePrimaryKeyMapping)
	sql := "DELETE FROM \"track_files\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from track_files")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for track_files")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q trackFileQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no trackFileQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from track_files")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for track_files")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TrackFileSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(trackFileBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"track_files\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trackFilePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from trackFile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for track_files")
	}

	if len(trackFileAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TrackFile) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTrackFile(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TrackFileSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TrackFileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"track_files\".* FROM \"track_files\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trackFilePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TrackFileSlice")
	}

	*o = slice

	return nil
}

// TrackFileExists checks if the TrackFile row exists.
func TrackFileExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"track_files\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if track_files exists")
	}

	return exists, nil
}

// Exists checks if the TrackFile row exists.
func (o *TrackFile) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TrackFileExists(ctx, exec, o.ID)
}
