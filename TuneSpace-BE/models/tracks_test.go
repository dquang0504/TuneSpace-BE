// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTracks(t *testing.T) {
	t.Parallel()

	query := Tracks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTracksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTracksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Tracks().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTracksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TrackSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTracksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TrackExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Track exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TrackExists to return true, but got false.")
	}
}

func testTracksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	trackFound, err := FindTrack(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if trackFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTracksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Tracks().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTracksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Tracks().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTracksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	trackOne := &Track{}
	trackTwo := &Track{}
	if err = randomize.Struct(seed, trackOne, trackDBTypes, false, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}
	if err = randomize.Struct(seed, trackTwo, trackDBTypes, false, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = trackOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = trackTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Tracks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTracksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	trackOne := &Track{}
	trackTwo := &Track{}
	if err = randomize.Struct(seed, trackOne, trackDBTypes, false, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}
	if err = randomize.Struct(seed, trackTwo, trackDBTypes, false, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = trackOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = trackTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func trackBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Track) error {
	*o = Track{}
	return nil
}

func trackAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Track) error {
	*o = Track{}
	return nil
}

func trackAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Track) error {
	*o = Track{}
	return nil
}

func trackBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Track) error {
	*o = Track{}
	return nil
}

func trackAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Track) error {
	*o = Track{}
	return nil
}

func trackBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Track) error {
	*o = Track{}
	return nil
}

func trackAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Track) error {
	*o = Track{}
	return nil
}

func trackBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Track) error {
	*o = Track{}
	return nil
}

func trackAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Track) error {
	*o = Track{}
	return nil
}

func testTracksHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Track{}
	o := &Track{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, trackDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Track object: %s", err)
	}

	AddTrackHook(boil.BeforeInsertHook, trackBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	trackBeforeInsertHooks = []TrackHook{}

	AddTrackHook(boil.AfterInsertHook, trackAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	trackAfterInsertHooks = []TrackHook{}

	AddTrackHook(boil.AfterSelectHook, trackAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	trackAfterSelectHooks = []TrackHook{}

	AddTrackHook(boil.BeforeUpdateHook, trackBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	trackBeforeUpdateHooks = []TrackHook{}

	AddTrackHook(boil.AfterUpdateHook, trackAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	trackAfterUpdateHooks = []TrackHook{}

	AddTrackHook(boil.BeforeDeleteHook, trackBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	trackBeforeDeleteHooks = []TrackHook{}

	AddTrackHook(boil.AfterDeleteHook, trackAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	trackAfterDeleteHooks = []TrackHook{}

	AddTrackHook(boil.BeforeUpsertHook, trackBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	trackBeforeUpsertHooks = []TrackHook{}

	AddTrackHook(boil.AfterUpsertHook, trackAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	trackAfterUpsertHooks = []TrackHook{}
}

func testTracksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTracksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := Tracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTrackToManyComments(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c Comment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, commentDBTypes, false, commentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, commentDBTypes, false, commentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.TrackID, a.ID)
	queries.Assign(&c.TrackID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Comments().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.TrackID, b.TrackID) {
			bFound = true
		}
		if queries.Equal(v.TrackID, c.TrackID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TrackSlice{&a}
	if err = a.L.LoadComments(ctx, tx, false, (*[]*Track)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Comments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Comments = nil
	if err = a.L.LoadComments(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Comments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTrackToManyLikes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c Like

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, likeDBTypes, false, likeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, likeDBTypes, false, likeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TrackID = a.ID
	c.TrackID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Likes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TrackID == b.TrackID {
			bFound = true
		}
		if v.TrackID == c.TrackID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TrackSlice{&a}
	if err = a.L.LoadLikes(ctx, tx, false, (*[]*Track)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Likes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Likes = nil
	if err = a.L.LoadLikes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Likes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTrackToManyPlaylistTracks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c PlaylistTrack

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, playlistTrackDBTypes, false, playlistTrackColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, playlistTrackDBTypes, false, playlistTrackColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TrackID = a.ID
	c.TrackID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PlaylistTracks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TrackID == b.TrackID {
			bFound = true
		}
		if v.TrackID == c.TrackID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TrackSlice{&a}
	if err = a.L.LoadPlaylistTracks(ctx, tx, false, (*[]*Track)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlaylistTracks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PlaylistTracks = nil
	if err = a.L.LoadPlaylistTracks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlaylistTracks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTrackToManyStreams(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c Stream

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, streamDBTypes, false, streamColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, streamDBTypes, false, streamColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TrackID = a.ID
	c.TrackID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Streams().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TrackID == b.TrackID {
			bFound = true
		}
		if v.TrackID == c.TrackID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TrackSlice{&a}
	if err = a.L.LoadStreams(ctx, tx, false, (*[]*Track)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Streams); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Streams = nil
	if err = a.L.LoadStreams(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Streams); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTrackToManyTrackFiles(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c TrackFile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, trackFileDBTypes, false, trackFileColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, trackFileDBTypes, false, trackFileColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.TrackID, a.ID)
	queries.Assign(&c.TrackID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TrackFiles().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.TrackID, b.TrackID) {
			bFound = true
		}
		if queries.Equal(v.TrackID, c.TrackID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TrackSlice{&a}
	if err = a.L.LoadTrackFiles(ctx, tx, false, (*[]*Track)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TrackFiles); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TrackFiles = nil
	if err = a.L.LoadTrackFiles(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TrackFiles); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTrackToManyTrackOwnerships(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c TrackOwnership

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, trackOwnershipDBTypes, false, trackOwnershipColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, trackOwnershipDBTypes, false, trackOwnershipColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.TrackID, a.ID)
	queries.Assign(&c.TrackID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TrackOwnerships().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.TrackID, b.TrackID) {
			bFound = true
		}
		if queries.Equal(v.TrackID, c.TrackID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TrackSlice{&a}
	if err = a.L.LoadTrackOwnerships(ctx, tx, false, (*[]*Track)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TrackOwnerships); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TrackOwnerships = nil
	if err = a.L.LoadTrackOwnerships(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TrackOwnerships); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTrackToManyTracksArtists(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c TracksArtist

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, tracksArtistDBTypes, false, tracksArtistColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tracksArtistDBTypes, false, tracksArtistColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TrackID = a.ID
	c.TrackID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TracksArtists().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TrackID == b.TrackID {
			bFound = true
		}
		if v.TrackID == c.TrackID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TrackSlice{&a}
	if err = a.L.LoadTracksArtists(ctx, tx, false, (*[]*Track)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TracksArtists); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TracksArtists = nil
	if err = a.L.LoadTracksArtists(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TracksArtists); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTrackToManyAddOpComments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c, d, e Comment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Comment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, commentDBTypes, false, strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Comment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddComments(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.TrackID) {
			t.Error("foreign key was wrong value", a.ID, first.TrackID)
		}
		if !queries.Equal(a.ID, second.TrackID) {
			t.Error("foreign key was wrong value", a.ID, second.TrackID)
		}

		if first.R.Track != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Track != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Comments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Comments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Comments().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTrackToManySetOpComments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c, d, e Comment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Comment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, commentDBTypes, false, strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetComments(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Comments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetComments(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Comments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TrackID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TrackID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.TrackID) {
		t.Error("foreign key was wrong value", a.ID, d.TrackID)
	}
	if !queries.Equal(a.ID, e.TrackID) {
		t.Error("foreign key was wrong value", a.ID, e.TrackID)
	}

	if b.R.Track != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Track != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Track != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Track != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Comments[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Comments[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTrackToManyRemoveOpComments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c, d, e Comment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Comment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, commentDBTypes, false, strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddComments(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Comments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveComments(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Comments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TrackID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TrackID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Track != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Track != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Track != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Track != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Comments) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Comments[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Comments[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTrackToManyAddOpLikes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c, d, e Like

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Like{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, likeDBTypes, false, strmangle.SetComplement(likePrimaryKeyColumns, likeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Like{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddLikes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TrackID {
			t.Error("foreign key was wrong value", a.ID, first.TrackID)
		}
		if a.ID != second.TrackID {
			t.Error("foreign key was wrong value", a.ID, second.TrackID)
		}

		if first.R.Track != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Track != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Likes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Likes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Likes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTrackToManyAddOpPlaylistTracks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c, d, e PlaylistTrack

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PlaylistTrack{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, playlistTrackDBTypes, false, strmangle.SetComplement(playlistTrackPrimaryKeyColumns, playlistTrackColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PlaylistTrack{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPlaylistTracks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TrackID {
			t.Error("foreign key was wrong value", a.ID, first.TrackID)
		}
		if a.ID != second.TrackID {
			t.Error("foreign key was wrong value", a.ID, second.TrackID)
		}

		if first.R.Track != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Track != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PlaylistTracks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PlaylistTracks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PlaylistTracks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTrackToManyAddOpStreams(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c, d, e Stream

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Stream{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, streamDBTypes, false, strmangle.SetComplement(streamPrimaryKeyColumns, streamColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Stream{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddStreams(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TrackID {
			t.Error("foreign key was wrong value", a.ID, first.TrackID)
		}
		if a.ID != second.TrackID {
			t.Error("foreign key was wrong value", a.ID, second.TrackID)
		}

		if first.R.Track != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Track != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Streams[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Streams[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Streams().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTrackToManyAddOpTrackFiles(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c, d, e TrackFile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TrackFile{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, trackFileDBTypes, false, strmangle.SetComplement(trackFilePrimaryKeyColumns, trackFileColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TrackFile{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTrackFiles(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.TrackID) {
			t.Error("foreign key was wrong value", a.ID, first.TrackID)
		}
		if !queries.Equal(a.ID, second.TrackID) {
			t.Error("foreign key was wrong value", a.ID, second.TrackID)
		}

		if first.R.Track != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Track != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TrackFiles[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TrackFiles[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TrackFiles().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTrackToManySetOpTrackFiles(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c, d, e TrackFile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TrackFile{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, trackFileDBTypes, false, strmangle.SetComplement(trackFilePrimaryKeyColumns, trackFileColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetTrackFiles(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.TrackFiles().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetTrackFiles(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.TrackFiles().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TrackID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TrackID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.TrackID) {
		t.Error("foreign key was wrong value", a.ID, d.TrackID)
	}
	if !queries.Equal(a.ID, e.TrackID) {
		t.Error("foreign key was wrong value", a.ID, e.TrackID)
	}

	if b.R.Track != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Track != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Track != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Track != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.TrackFiles[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.TrackFiles[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTrackToManyRemoveOpTrackFiles(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c, d, e TrackFile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TrackFile{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, trackFileDBTypes, false, strmangle.SetComplement(trackFilePrimaryKeyColumns, trackFileColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddTrackFiles(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.TrackFiles().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveTrackFiles(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.TrackFiles().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TrackID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TrackID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Track != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Track != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Track != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Track != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.TrackFiles) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.TrackFiles[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.TrackFiles[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTrackToManyAddOpTrackOwnerships(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c, d, e TrackOwnership

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TrackOwnership{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, trackOwnershipDBTypes, false, strmangle.SetComplement(trackOwnershipPrimaryKeyColumns, trackOwnershipColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TrackOwnership{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTrackOwnerships(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.TrackID) {
			t.Error("foreign key was wrong value", a.ID, first.TrackID)
		}
		if !queries.Equal(a.ID, second.TrackID) {
			t.Error("foreign key was wrong value", a.ID, second.TrackID)
		}

		if first.R.Track != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Track != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TrackOwnerships[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TrackOwnerships[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TrackOwnerships().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTrackToManySetOpTrackOwnerships(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c, d, e TrackOwnership

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TrackOwnership{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, trackOwnershipDBTypes, false, strmangle.SetComplement(trackOwnershipPrimaryKeyColumns, trackOwnershipColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetTrackOwnerships(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.TrackOwnerships().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetTrackOwnerships(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.TrackOwnerships().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TrackID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TrackID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.TrackID) {
		t.Error("foreign key was wrong value", a.ID, d.TrackID)
	}
	if !queries.Equal(a.ID, e.TrackID) {
		t.Error("foreign key was wrong value", a.ID, e.TrackID)
	}

	if b.R.Track != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Track != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Track != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Track != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.TrackOwnerships[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.TrackOwnerships[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTrackToManyRemoveOpTrackOwnerships(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c, d, e TrackOwnership

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TrackOwnership{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, trackOwnershipDBTypes, false, strmangle.SetComplement(trackOwnershipPrimaryKeyColumns, trackOwnershipColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddTrackOwnerships(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.TrackOwnerships().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveTrackOwnerships(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.TrackOwnerships().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TrackID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TrackID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Track != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Track != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Track != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Track != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.TrackOwnerships) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.TrackOwnerships[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.TrackOwnerships[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTrackToManyAddOpTracksArtists(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c, d, e TracksArtist

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TracksArtist{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tracksArtistDBTypes, false, strmangle.SetComplement(tracksArtistPrimaryKeyColumns, tracksArtistColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TracksArtist{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTracksArtists(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TrackID {
			t.Error("foreign key was wrong value", a.ID, first.TrackID)
		}
		if a.ID != second.TrackID {
			t.Error("foreign key was wrong value", a.ID, second.TrackID)
		}

		if first.R.Track != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Track != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TracksArtists[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TracksArtists[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TracksArtists().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTrackToOneAlbumUsingAlbum(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Track
	var foreign Album

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, albumDBTypes, false, albumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Album struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.AlbumID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Album().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddAlbumHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Album) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TrackSlice{&local}
	if err = local.L.LoadAlbum(ctx, tx, false, (*[]*Track)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Album == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Album = nil
	if err = local.L.LoadAlbum(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Album == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTrackToOneSetOpAlbumUsingAlbum(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c Album

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, albumDBTypes, false, strmangle.SetComplement(albumPrimaryKeyColumns, albumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, albumDBTypes, false, strmangle.SetComplement(albumPrimaryKeyColumns, albumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Album{&b, &c} {
		err = a.SetAlbum(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Album != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Tracks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.AlbumID, x.ID) {
			t.Error("foreign key was wrong value", a.AlbumID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AlbumID))
		reflect.Indirect(reflect.ValueOf(&a.AlbumID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.AlbumID, x.ID) {
			t.Error("foreign key was wrong value", a.AlbumID, x.ID)
		}
	}
}

func testTrackToOneRemoveOpAlbumUsingAlbum(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b Album

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, albumDBTypes, false, strmangle.SetComplement(albumPrimaryKeyColumns, albumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAlbum(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAlbum(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Album().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Album != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.AlbumID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Tracks) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTracksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTracksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TrackSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTracksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Tracks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	trackDBTypes = map[string]string{`ID`: `bigint`, `Title`: `text`, `AlbumID`: `bigint`, `DurationSeconds`: `integer`, `Isrc`: `text`, `Explicit`: `boolean`, `Status`: `smallint`, `CreatedAt`: `timestamp with time zone`}
	_            = bytes.MinRead
)

func testTracksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(trackPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(trackAllColumns) == len(trackPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, trackDBTypes, true, trackPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTracksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(trackAllColumns) == len(trackPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, trackDBTypes, true, trackPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(trackAllColumns, trackPrimaryKeyColumns) {
		fields = trackAllColumns
	} else {
		fields = strmangle.SetComplement(
			trackAllColumns,
			trackPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TrackSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTracksUpsert(t *testing.T) {
	t.Parallel()

	if len(trackAllColumns) == len(trackPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Track{}
	if err = randomize.Struct(seed, &o, trackDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Track: %s", err)
	}

	count, err := Tracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, trackDBTypes, false, trackPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Track: %s", err)
	}

	count, err = Tracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
