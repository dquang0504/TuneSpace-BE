// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// TracksArtist is an object representing the database table.
type TracksArtist struct {
	TrackID  int64       `boil:"track_id" json:"track_id" toml:"track_id" yaml:"track_id"`
	ArtistID int64       `boil:"artist_id" json:"artist_id" toml:"artist_id" yaml:"artist_id"`
	Role     null.String `boil:"role" json:"role,omitempty" toml:"role" yaml:"role,omitempty"`

	R *tracksArtistR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tracksArtistL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TracksArtistColumns = struct {
	TrackID  string
	ArtistID string
	Role     string
}{
	TrackID:  "track_id",
	ArtistID: "artist_id",
	Role:     "role",
}

var TracksArtistTableColumns = struct {
	TrackID  string
	ArtistID string
	Role     string
}{
	TrackID:  "tracks_artists.track_id",
	ArtistID: "tracks_artists.artist_id",
	Role:     "tracks_artists.role",
}

// Generated where

var TracksArtistWhere = struct {
	TrackID  whereHelperint64
	ArtistID whereHelperint64
	Role     whereHelpernull_String
}{
	TrackID:  whereHelperint64{field: "\"tracks_artists\".\"track_id\""},
	ArtistID: whereHelperint64{field: "\"tracks_artists\".\"artist_id\""},
	Role:     whereHelpernull_String{field: "\"tracks_artists\".\"role\""},
}

// TracksArtistRels is where relationship names are stored.
var TracksArtistRels = struct {
	Artist string
	Track  string
}{
	Artist: "Artist",
	Track:  "Track",
}

// tracksArtistR is where relationships are stored.
type tracksArtistR struct {
	Artist *Artist `boil:"Artist" json:"Artist" toml:"Artist" yaml:"Artist"`
	Track  *Track  `boil:"Track" json:"Track" toml:"Track" yaml:"Track"`
}

// NewStruct creates a new relationship struct
func (*tracksArtistR) NewStruct() *tracksArtistR {
	return &tracksArtistR{}
}

func (o *TracksArtist) GetArtist() *Artist {
	if o == nil {
		return nil
	}

	return o.R.GetArtist()
}

func (r *tracksArtistR) GetArtist() *Artist {
	if r == nil {
		return nil
	}

	return r.Artist
}

func (o *TracksArtist) GetTrack() *Track {
	if o == nil {
		return nil
	}

	return o.R.GetTrack()
}

func (r *tracksArtistR) GetTrack() *Track {
	if r == nil {
		return nil
	}

	return r.Track
}

// tracksArtistL is where Load methods for each relationship are stored.
type tracksArtistL struct{}

var (
	tracksArtistAllColumns            = []string{"track_id", "artist_id", "role"}
	tracksArtistColumnsWithoutDefault = []string{"track_id", "artist_id"}
	tracksArtistColumnsWithDefault    = []string{"role"}
	tracksArtistPrimaryKeyColumns     = []string{"track_id", "artist_id"}
	tracksArtistGeneratedColumns      = []string{}
)

type (
	// TracksArtistSlice is an alias for a slice of pointers to TracksArtist.
	// This should almost always be used instead of []TracksArtist.
	TracksArtistSlice []*TracksArtist
	// TracksArtistHook is the signature for custom TracksArtist hook methods
	TracksArtistHook func(context.Context, boil.ContextExecutor, *TracksArtist) error

	tracksArtistQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tracksArtistType                 = reflect.TypeOf(&TracksArtist{})
	tracksArtistMapping              = queries.MakeStructMapping(tracksArtistType)
	tracksArtistPrimaryKeyMapping, _ = queries.BindMapping(tracksArtistType, tracksArtistMapping, tracksArtistPrimaryKeyColumns)
	tracksArtistInsertCacheMut       sync.RWMutex
	tracksArtistInsertCache          = make(map[string]insertCache)
	tracksArtistUpdateCacheMut       sync.RWMutex
	tracksArtistUpdateCache          = make(map[string]updateCache)
	tracksArtistUpsertCacheMut       sync.RWMutex
	tracksArtistUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tracksArtistAfterSelectMu sync.Mutex
var tracksArtistAfterSelectHooks []TracksArtistHook

var tracksArtistBeforeInsertMu sync.Mutex
var tracksArtistBeforeInsertHooks []TracksArtistHook
var tracksArtistAfterInsertMu sync.Mutex
var tracksArtistAfterInsertHooks []TracksArtistHook

var tracksArtistBeforeUpdateMu sync.Mutex
var tracksArtistBeforeUpdateHooks []TracksArtistHook
var tracksArtistAfterUpdateMu sync.Mutex
var tracksArtistAfterUpdateHooks []TracksArtistHook

var tracksArtistBeforeDeleteMu sync.Mutex
var tracksArtistBeforeDeleteHooks []TracksArtistHook
var tracksArtistAfterDeleteMu sync.Mutex
var tracksArtistAfterDeleteHooks []TracksArtistHook

var tracksArtistBeforeUpsertMu sync.Mutex
var tracksArtistBeforeUpsertHooks []TracksArtistHook
var tracksArtistAfterUpsertMu sync.Mutex
var tracksArtistAfterUpsertHooks []TracksArtistHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TracksArtist) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tracksArtistAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TracksArtist) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tracksArtistBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TracksArtist) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tracksArtistAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TracksArtist) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tracksArtistBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TracksArtist) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tracksArtistAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TracksArtist) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tracksArtistBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TracksArtist) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tracksArtistAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TracksArtist) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tracksArtistBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TracksArtist) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tracksArtistAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTracksArtistHook registers your hook function for all future operations.
func AddTracksArtistHook(hookPoint boil.HookPoint, tracksArtistHook TracksArtistHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tracksArtistAfterSelectMu.Lock()
		tracksArtistAfterSelectHooks = append(tracksArtistAfterSelectHooks, tracksArtistHook)
		tracksArtistAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		tracksArtistBeforeInsertMu.Lock()
		tracksArtistBeforeInsertHooks = append(tracksArtistBeforeInsertHooks, tracksArtistHook)
		tracksArtistBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		tracksArtistAfterInsertMu.Lock()
		tracksArtistAfterInsertHooks = append(tracksArtistAfterInsertHooks, tracksArtistHook)
		tracksArtistAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		tracksArtistBeforeUpdateMu.Lock()
		tracksArtistBeforeUpdateHooks = append(tracksArtistBeforeUpdateHooks, tracksArtistHook)
		tracksArtistBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		tracksArtistAfterUpdateMu.Lock()
		tracksArtistAfterUpdateHooks = append(tracksArtistAfterUpdateHooks, tracksArtistHook)
		tracksArtistAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		tracksArtistBeforeDeleteMu.Lock()
		tracksArtistBeforeDeleteHooks = append(tracksArtistBeforeDeleteHooks, tracksArtistHook)
		tracksArtistBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		tracksArtistAfterDeleteMu.Lock()
		tracksArtistAfterDeleteHooks = append(tracksArtistAfterDeleteHooks, tracksArtistHook)
		tracksArtistAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		tracksArtistBeforeUpsertMu.Lock()
		tracksArtistBeforeUpsertHooks = append(tracksArtistBeforeUpsertHooks, tracksArtistHook)
		tracksArtistBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		tracksArtistAfterUpsertMu.Lock()
		tracksArtistAfterUpsertHooks = append(tracksArtistAfterUpsertHooks, tracksArtistHook)
		tracksArtistAfterUpsertMu.Unlock()
	}
}

// One returns a single tracksArtist record from the query.
func (q tracksArtistQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TracksArtist, error) {
	o := &TracksArtist{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tracks_artists")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TracksArtist records from the query.
func (q tracksArtistQuery) All(ctx context.Context, exec boil.ContextExecutor) (TracksArtistSlice, error) {
	var o []*TracksArtist

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TracksArtist slice")
	}

	if len(tracksArtistAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TracksArtist records in the query.
func (q tracksArtistQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tracks_artists rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tracksArtistQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tracks_artists exists")
	}

	return count > 0, nil
}

// Artist pointed to by the foreign key.
func (o *TracksArtist) Artist(mods ...qm.QueryMod) artistQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ArtistID),
	}

	queryMods = append(queryMods, mods...)

	return Artists(queryMods...)
}

// Track pointed to by the foreign key.
func (o *TracksArtist) Track(mods ...qm.QueryMod) trackQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TrackID),
	}

	queryMods = append(queryMods, mods...)

	return Tracks(queryMods...)
}

// LoadArtist allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tracksArtistL) LoadArtist(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTracksArtist interface{}, mods queries.Applicator) error {
	var slice []*TracksArtist
	var object *TracksArtist

	if singular {
		var ok bool
		object, ok = maybeTracksArtist.(*TracksArtist)
		if !ok {
			object = new(TracksArtist)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTracksArtist)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTracksArtist))
			}
		}
	} else {
		s, ok := maybeTracksArtist.(*[]*TracksArtist)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTracksArtist)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTracksArtist))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tracksArtistR{}
		}
		args[object.ArtistID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tracksArtistR{}
			}

			args[obj.ArtistID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`artists`),
		qm.WhereIn(`artists.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Artist")
	}

	var resultSlice []*Artist
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Artist")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for artists")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for artists")
	}

	if len(artistAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Artist = foreign
		if foreign.R == nil {
			foreign.R = &artistR{}
		}
		foreign.R.TracksArtists = append(foreign.R.TracksArtists, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ArtistID == foreign.ID {
				local.R.Artist = foreign
				if foreign.R == nil {
					foreign.R = &artistR{}
				}
				foreign.R.TracksArtists = append(foreign.R.TracksArtists, local)
				break
			}
		}
	}

	return nil
}

// LoadTrack allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tracksArtistL) LoadTrack(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTracksArtist interface{}, mods queries.Applicator) error {
	var slice []*TracksArtist
	var object *TracksArtist

	if singular {
		var ok bool
		object, ok = maybeTracksArtist.(*TracksArtist)
		if !ok {
			object = new(TracksArtist)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTracksArtist)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTracksArtist))
			}
		}
	} else {
		s, ok := maybeTracksArtist.(*[]*TracksArtist)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTracksArtist)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTracksArtist))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tracksArtistR{}
		}
		args[object.TrackID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tracksArtistR{}
			}

			args[obj.TrackID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tracks`),
		qm.WhereIn(`tracks.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Track")
	}

	var resultSlice []*Track
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Track")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tracks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tracks")
	}

	if len(trackAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Track = foreign
		if foreign.R == nil {
			foreign.R = &trackR{}
		}
		foreign.R.TracksArtists = append(foreign.R.TracksArtists, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TrackID == foreign.ID {
				local.R.Track = foreign
				if foreign.R == nil {
					foreign.R = &trackR{}
				}
				foreign.R.TracksArtists = append(foreign.R.TracksArtists, local)
				break
			}
		}
	}

	return nil
}

// SetArtist of the tracksArtist to the related item.
// Sets o.R.Artist to related.
// Adds o to related.R.TracksArtists.
func (o *TracksArtist) SetArtist(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Artist) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tracks_artists\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"artist_id"}),
		strmangle.WhereClause("\"", "\"", 2, tracksArtistPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.TrackID, o.ArtistID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ArtistID = related.ID
	if o.R == nil {
		o.R = &tracksArtistR{
			Artist: related,
		}
	} else {
		o.R.Artist = related
	}

	if related.R == nil {
		related.R = &artistR{
			TracksArtists: TracksArtistSlice{o},
		}
	} else {
		related.R.TracksArtists = append(related.R.TracksArtists, o)
	}

	return nil
}

// SetTrack of the tracksArtist to the related item.
// Sets o.R.Track to related.
// Adds o to related.R.TracksArtists.
func (o *TracksArtist) SetTrack(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Track) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tracks_artists\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"track_id"}),
		strmangle.WhereClause("\"", "\"", 2, tracksArtistPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.TrackID, o.ArtistID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TrackID = related.ID
	if o.R == nil {
		o.R = &tracksArtistR{
			Track: related,
		}
	} else {
		o.R.Track = related
	}

	if related.R == nil {
		related.R = &trackR{
			TracksArtists: TracksArtistSlice{o},
		}
	} else {
		related.R.TracksArtists = append(related.R.TracksArtists, o)
	}

	return nil
}

// TracksArtists retrieves all the records using an executor.
func TracksArtists(mods ...qm.QueryMod) tracksArtistQuery {
	mods = append(mods, qm.From("\"tracks_artists\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tracks_artists\".*"})
	}

	return tracksArtistQuery{q}
}

// FindTracksArtist retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTracksArtist(ctx context.Context, exec boil.ContextExecutor, trackID int64, artistID int64, selectCols ...string) (*TracksArtist, error) {
	tracksArtistObj := &TracksArtist{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tracks_artists\" where \"track_id\"=$1 AND \"artist_id\"=$2", sel,
	)

	q := queries.Raw(query, trackID, artistID)

	err := q.Bind(ctx, exec, tracksArtistObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tracks_artists")
	}

	if err = tracksArtistObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tracksArtistObj, err
	}

	return tracksArtistObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TracksArtist) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tracks_artists provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tracksArtistColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tracksArtistInsertCacheMut.RLock()
	cache, cached := tracksArtistInsertCache[key]
	tracksArtistInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tracksArtistAllColumns,
			tracksArtistColumnsWithDefault,
			tracksArtistColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tracksArtistType, tracksArtistMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tracksArtistType, tracksArtistMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tracks_artists\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tracks_artists\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tracks_artists")
	}

	if !cached {
		tracksArtistInsertCacheMut.Lock()
		tracksArtistInsertCache[key] = cache
		tracksArtistInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TracksArtist.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TracksArtist) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tracksArtistUpdateCacheMut.RLock()
	cache, cached := tracksArtistUpdateCache[key]
	tracksArtistUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tracksArtistAllColumns,
			tracksArtistPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tracks_artists, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tracks_artists\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tracksArtistPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tracksArtistType, tracksArtistMapping, append(wl, tracksArtistPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tracks_artists row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tracks_artists")
	}

	if !cached {
		tracksArtistUpdateCacheMut.Lock()
		tracksArtistUpdateCache[key] = cache
		tracksArtistUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tracksArtistQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tracks_artists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tracks_artists")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TracksArtistSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tracksArtistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tracks_artists\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tracksArtistPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tracksArtist slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tracksArtist")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TracksArtist) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no tracks_artists provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tracksArtistColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tracksArtistUpsertCacheMut.RLock()
	cache, cached := tracksArtistUpsertCache[key]
	tracksArtistUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			tracksArtistAllColumns,
			tracksArtistColumnsWithDefault,
			tracksArtistColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tracksArtistAllColumns,
			tracksArtistPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert tracks_artists, could not build update column list")
		}

		ret := strmangle.SetComplement(tracksArtistAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(tracksArtistPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert tracks_artists, could not build conflict column list")
			}

			conflict = make([]string, len(tracksArtistPrimaryKeyColumns))
			copy(conflict, tracksArtistPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tracks_artists\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(tracksArtistType, tracksArtistMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tracksArtistType, tracksArtistMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert tracks_artists")
	}

	if !cached {
		tracksArtistUpsertCacheMut.Lock()
		tracksArtistUpsertCache[key] = cache
		tracksArtistUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TracksArtist record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TracksArtist) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TracksArtist provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tracksArtistPrimaryKeyMapping)
	sql := "DELETE FROM \"tracks_artists\" WHERE \"track_id\"=$1 AND \"artist_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tracks_artists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tracks_artists")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tracksArtistQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tracksArtistQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tracks_artists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tracks_artists")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TracksArtistSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tracksArtistBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tracksArtistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tracks_artists\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tracksArtistPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tracksArtist slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tracks_artists")
	}

	if len(tracksArtistAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TracksArtist) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTracksArtist(ctx, exec, o.TrackID, o.ArtistID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TracksArtistSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TracksArtistSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tracksArtistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tracks_artists\".* FROM \"tracks_artists\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tracksArtistPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TracksArtistSlice")
	}

	*o = slice

	return nil
}

// TracksArtistExists checks if the TracksArtist row exists.
func TracksArtistExists(ctx context.Context, exec boil.ContextExecutor, trackID int64, artistID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tracks_artists\" where \"track_id\"=$1 AND \"artist_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, trackID, artistID)
	}
	row := exec.QueryRowContext(ctx, sql, trackID, artistID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tracks_artists exists")
	}

	return exists, nil
}

// Exists checks if the TracksArtist row exists.
func (o *TracksArtist) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TracksArtistExists(ctx, exec, o.TrackID, o.ArtistID)
}
