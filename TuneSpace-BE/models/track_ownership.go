// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// TrackOwnership is an object representing the database table.
type TrackOwnership struct {
	ID               int64             `boil:"id" json:"id" toml:"id" yaml:"id"`
	TrackID          null.Int64        `boil:"track_id" json:"track_id,omitempty" toml:"track_id" yaml:"track_id,omitempty"`
	OwnerUserID      null.Int64        `boil:"owner_user_id" json:"owner_user_id,omitempty" toml:"owner_user_id" yaml:"owner_user_id,omitempty"`
	Chain            null.String       `boil:"chain" json:"chain,omitempty" toml:"chain" yaml:"chain,omitempty"`
	ContractAddress  null.String       `boil:"contract_address" json:"contract_address,omitempty" toml:"contract_address" yaml:"contract_address,omitempty"`
	TokenID          null.String       `boil:"token_id" json:"token_id,omitempty" toml:"token_id" yaml:"token_id,omitempty"`
	TXHash           null.String       `boil:"tx_hash" json:"tx_hash,omitempty" toml:"tx_hash" yaml:"tx_hash,omitempty"`
	TokenURI         null.String       `boil:"token_uri" json:"token_uri,omitempty" toml:"token_uri" yaml:"token_uri,omitempty"`
	RightsPercentage types.NullDecimal `boil:"rights_percentage" json:"rights_percentage,omitempty" toml:"rights_percentage" yaml:"rights_percentage,omitempty"`
	MintedAt         null.Time         `boil:"minted_at" json:"minted_at,omitempty" toml:"minted_at" yaml:"minted_at,omitempty"`
	MetadataChecksum null.String       `boil:"metadata_checksum" json:"metadata_checksum,omitempty" toml:"metadata_checksum" yaml:"metadata_checksum,omitempty"`

	R *trackOwnershipR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L trackOwnershipL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TrackOwnershipColumns = struct {
	ID               string
	TrackID          string
	OwnerUserID      string
	Chain            string
	ContractAddress  string
	TokenID          string
	TXHash           string
	TokenURI         string
	RightsPercentage string
	MintedAt         string
	MetadataChecksum string
}{
	ID:               "id",
	TrackID:          "track_id",
	OwnerUserID:      "owner_user_id",
	Chain:            "chain",
	ContractAddress:  "contract_address",
	TokenID:          "token_id",
	TXHash:           "tx_hash",
	TokenURI:         "token_uri",
	RightsPercentage: "rights_percentage",
	MintedAt:         "minted_at",
	MetadataChecksum: "metadata_checksum",
}

var TrackOwnershipTableColumns = struct {
	ID               string
	TrackID          string
	OwnerUserID      string
	Chain            string
	ContractAddress  string
	TokenID          string
	TXHash           string
	TokenURI         string
	RightsPercentage string
	MintedAt         string
	MetadataChecksum string
}{
	ID:               "track_ownership.id",
	TrackID:          "track_ownership.track_id",
	OwnerUserID:      "track_ownership.owner_user_id",
	Chain:            "track_ownership.chain",
	ContractAddress:  "track_ownership.contract_address",
	TokenID:          "track_ownership.token_id",
	TXHash:           "track_ownership.tx_hash",
	TokenURI:         "track_ownership.token_uri",
	RightsPercentage: "track_ownership.rights_percentage",
	MintedAt:         "track_ownership.minted_at",
	MetadataChecksum: "track_ownership.metadata_checksum",
}

// Generated where

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var TrackOwnershipWhere = struct {
	ID               whereHelperint64
	TrackID          whereHelpernull_Int64
	OwnerUserID      whereHelpernull_Int64
	Chain            whereHelpernull_String
	ContractAddress  whereHelpernull_String
	TokenID          whereHelpernull_String
	TXHash           whereHelpernull_String
	TokenURI         whereHelpernull_String
	RightsPercentage whereHelpertypes_NullDecimal
	MintedAt         whereHelpernull_Time
	MetadataChecksum whereHelpernull_String
}{
	ID:               whereHelperint64{field: "\"track_ownership\".\"id\""},
	TrackID:          whereHelpernull_Int64{field: "\"track_ownership\".\"track_id\""},
	OwnerUserID:      whereHelpernull_Int64{field: "\"track_ownership\".\"owner_user_id\""},
	Chain:            whereHelpernull_String{field: "\"track_ownership\".\"chain\""},
	ContractAddress:  whereHelpernull_String{field: "\"track_ownership\".\"contract_address\""},
	TokenID:          whereHelpernull_String{field: "\"track_ownership\".\"token_id\""},
	TXHash:           whereHelpernull_String{field: "\"track_ownership\".\"tx_hash\""},
	TokenURI:         whereHelpernull_String{field: "\"track_ownership\".\"token_uri\""},
	RightsPercentage: whereHelpertypes_NullDecimal{field: "\"track_ownership\".\"rights_percentage\""},
	MintedAt:         whereHelpernull_Time{field: "\"track_ownership\".\"minted_at\""},
	MetadataChecksum: whereHelpernull_String{field: "\"track_ownership\".\"metadata_checksum\""},
}

// TrackOwnershipRels is where relationship names are stored.
var TrackOwnershipRels = struct {
	OwnerUser string
	Track     string
}{
	OwnerUser: "OwnerUser",
	Track:     "Track",
}

// trackOwnershipR is where relationships are stored.
type trackOwnershipR struct {
	OwnerUser *User  `boil:"OwnerUser" json:"OwnerUser" toml:"OwnerUser" yaml:"OwnerUser"`
	Track     *Track `boil:"Track" json:"Track" toml:"Track" yaml:"Track"`
}

// NewStruct creates a new relationship struct
func (*trackOwnershipR) NewStruct() *trackOwnershipR {
	return &trackOwnershipR{}
}

func (o *TrackOwnership) GetOwnerUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetOwnerUser()
}

func (r *trackOwnershipR) GetOwnerUser() *User {
	if r == nil {
		return nil
	}

	return r.OwnerUser
}

func (o *TrackOwnership) GetTrack() *Track {
	if o == nil {
		return nil
	}

	return o.R.GetTrack()
}

func (r *trackOwnershipR) GetTrack() *Track {
	if r == nil {
		return nil
	}

	return r.Track
}

// trackOwnershipL is where Load methods for each relationship are stored.
type trackOwnershipL struct{}

var (
	trackOwnershipAllColumns            = []string{"id", "track_id", "owner_user_id", "chain", "contract_address", "token_id", "tx_hash", "token_uri", "rights_percentage", "minted_at", "metadata_checksum"}
	trackOwnershipColumnsWithoutDefault = []string{}
	trackOwnershipColumnsWithDefault    = []string{"id", "track_id", "owner_user_id", "chain", "contract_address", "token_id", "tx_hash", "token_uri", "rights_percentage", "minted_at", "metadata_checksum"}
	trackOwnershipPrimaryKeyColumns     = []string{"id"}
	trackOwnershipGeneratedColumns      = []string{}
)

type (
	// TrackOwnershipSlice is an alias for a slice of pointers to TrackOwnership.
	// This should almost always be used instead of []TrackOwnership.
	TrackOwnershipSlice []*TrackOwnership
	// TrackOwnershipHook is the signature for custom TrackOwnership hook methods
	TrackOwnershipHook func(context.Context, boil.ContextExecutor, *TrackOwnership) error

	trackOwnershipQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	trackOwnershipType                 = reflect.TypeOf(&TrackOwnership{})
	trackOwnershipMapping              = queries.MakeStructMapping(trackOwnershipType)
	trackOwnershipPrimaryKeyMapping, _ = queries.BindMapping(trackOwnershipType, trackOwnershipMapping, trackOwnershipPrimaryKeyColumns)
	trackOwnershipInsertCacheMut       sync.RWMutex
	trackOwnershipInsertCache          = make(map[string]insertCache)
	trackOwnershipUpdateCacheMut       sync.RWMutex
	trackOwnershipUpdateCache          = make(map[string]updateCache)
	trackOwnershipUpsertCacheMut       sync.RWMutex
	trackOwnershipUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var trackOwnershipAfterSelectMu sync.Mutex
var trackOwnershipAfterSelectHooks []TrackOwnershipHook

var trackOwnershipBeforeInsertMu sync.Mutex
var trackOwnershipBeforeInsertHooks []TrackOwnershipHook
var trackOwnershipAfterInsertMu sync.Mutex
var trackOwnershipAfterInsertHooks []TrackOwnershipHook

var trackOwnershipBeforeUpdateMu sync.Mutex
var trackOwnershipBeforeUpdateHooks []TrackOwnershipHook
var trackOwnershipAfterUpdateMu sync.Mutex
var trackOwnershipAfterUpdateHooks []TrackOwnershipHook

var trackOwnershipBeforeDeleteMu sync.Mutex
var trackOwnershipBeforeDeleteHooks []TrackOwnershipHook
var trackOwnershipAfterDeleteMu sync.Mutex
var trackOwnershipAfterDeleteHooks []TrackOwnershipHook

var trackOwnershipBeforeUpsertMu sync.Mutex
var trackOwnershipBeforeUpsertHooks []TrackOwnershipHook
var trackOwnershipAfterUpsertMu sync.Mutex
var trackOwnershipAfterUpsertHooks []TrackOwnershipHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TrackOwnership) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackOwnershipAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TrackOwnership) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackOwnershipBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TrackOwnership) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackOwnershipAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TrackOwnership) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackOwnershipBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TrackOwnership) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackOwnershipAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TrackOwnership) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackOwnershipBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TrackOwnership) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackOwnershipAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TrackOwnership) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackOwnershipBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TrackOwnership) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackOwnershipAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTrackOwnershipHook registers your hook function for all future operations.
func AddTrackOwnershipHook(hookPoint boil.HookPoint, trackOwnershipHook TrackOwnershipHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		trackOwnershipAfterSelectMu.Lock()
		trackOwnershipAfterSelectHooks = append(trackOwnershipAfterSelectHooks, trackOwnershipHook)
		trackOwnershipAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		trackOwnershipBeforeInsertMu.Lock()
		trackOwnershipBeforeInsertHooks = append(trackOwnershipBeforeInsertHooks, trackOwnershipHook)
		trackOwnershipBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		trackOwnershipAfterInsertMu.Lock()
		trackOwnershipAfterInsertHooks = append(trackOwnershipAfterInsertHooks, trackOwnershipHook)
		trackOwnershipAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		trackOwnershipBeforeUpdateMu.Lock()
		trackOwnershipBeforeUpdateHooks = append(trackOwnershipBeforeUpdateHooks, trackOwnershipHook)
		trackOwnershipBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		trackOwnershipAfterUpdateMu.Lock()
		trackOwnershipAfterUpdateHooks = append(trackOwnershipAfterUpdateHooks, trackOwnershipHook)
		trackOwnershipAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		trackOwnershipBeforeDeleteMu.Lock()
		trackOwnershipBeforeDeleteHooks = append(trackOwnershipBeforeDeleteHooks, trackOwnershipHook)
		trackOwnershipBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		trackOwnershipAfterDeleteMu.Lock()
		trackOwnershipAfterDeleteHooks = append(trackOwnershipAfterDeleteHooks, trackOwnershipHook)
		trackOwnershipAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		trackOwnershipBeforeUpsertMu.Lock()
		trackOwnershipBeforeUpsertHooks = append(trackOwnershipBeforeUpsertHooks, trackOwnershipHook)
		trackOwnershipBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		trackOwnershipAfterUpsertMu.Lock()
		trackOwnershipAfterUpsertHooks = append(trackOwnershipAfterUpsertHooks, trackOwnershipHook)
		trackOwnershipAfterUpsertMu.Unlock()
	}
}

// One returns a single trackOwnership record from the query.
func (q trackOwnershipQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TrackOwnership, error) {
	o := &TrackOwnership{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for track_ownership")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TrackOwnership records from the query.
func (q trackOwnershipQuery) All(ctx context.Context, exec boil.ContextExecutor) (TrackOwnershipSlice, error) {
	var o []*TrackOwnership

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TrackOwnership slice")
	}

	if len(trackOwnershipAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TrackOwnership records in the query.
func (q trackOwnershipQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count track_ownership rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q trackOwnershipQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if track_ownership exists")
	}

	return count > 0, nil
}

// OwnerUser pointed to by the foreign key.
func (o *TrackOwnership) OwnerUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OwnerUserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Track pointed to by the foreign key.
func (o *TrackOwnership) Track(mods ...qm.QueryMod) trackQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TrackID),
	}

	queryMods = append(queryMods, mods...)

	return Tracks(queryMods...)
}

// LoadOwnerUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (trackOwnershipL) LoadOwnerUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrackOwnership interface{}, mods queries.Applicator) error {
	var slice []*TrackOwnership
	var object *TrackOwnership

	if singular {
		var ok bool
		object, ok = maybeTrackOwnership.(*TrackOwnership)
		if !ok {
			object = new(TrackOwnership)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrackOwnership)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrackOwnership))
			}
		}
	} else {
		s, ok := maybeTrackOwnership.(*[]*TrackOwnership)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrackOwnership)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrackOwnership))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &trackOwnershipR{}
		}
		if !queries.IsNil(object.OwnerUserID) {
			args[object.OwnerUserID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackOwnershipR{}
			}

			if !queries.IsNil(obj.OwnerUserID) {
				args[obj.OwnerUserID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OwnerUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.OwnerUserTrackOwnerships = append(foreign.R.OwnerUserTrackOwnerships, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OwnerUserID, foreign.ID) {
				local.R.OwnerUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.OwnerUserTrackOwnerships = append(foreign.R.OwnerUserTrackOwnerships, local)
				break
			}
		}
	}

	return nil
}

// LoadTrack allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (trackOwnershipL) LoadTrack(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrackOwnership interface{}, mods queries.Applicator) error {
	var slice []*TrackOwnership
	var object *TrackOwnership

	if singular {
		var ok bool
		object, ok = maybeTrackOwnership.(*TrackOwnership)
		if !ok {
			object = new(TrackOwnership)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrackOwnership)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrackOwnership))
			}
		}
	} else {
		s, ok := maybeTrackOwnership.(*[]*TrackOwnership)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrackOwnership)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrackOwnership))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &trackOwnershipR{}
		}
		if !queries.IsNil(object.TrackID) {
			args[object.TrackID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackOwnershipR{}
			}

			if !queries.IsNil(obj.TrackID) {
				args[obj.TrackID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tracks`),
		qm.WhereIn(`tracks.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Track")
	}

	var resultSlice []*Track
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Track")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tracks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tracks")
	}

	if len(trackAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Track = foreign
		if foreign.R == nil {
			foreign.R = &trackR{}
		}
		foreign.R.TrackOwnerships = append(foreign.R.TrackOwnerships, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TrackID, foreign.ID) {
				local.R.Track = foreign
				if foreign.R == nil {
					foreign.R = &trackR{}
				}
				foreign.R.TrackOwnerships = append(foreign.R.TrackOwnerships, local)
				break
			}
		}
	}

	return nil
}

// SetOwnerUser of the trackOwnership to the related item.
// Sets o.R.OwnerUser to related.
// Adds o to related.R.OwnerUserTrackOwnerships.
func (o *TrackOwnership) SetOwnerUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"track_ownership\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, trackOwnershipPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OwnerUserID, related.ID)
	if o.R == nil {
		o.R = &trackOwnershipR{
			OwnerUser: related,
		}
	} else {
		o.R.OwnerUser = related
	}

	if related.R == nil {
		related.R = &userR{
			OwnerUserTrackOwnerships: TrackOwnershipSlice{o},
		}
	} else {
		related.R.OwnerUserTrackOwnerships = append(related.R.OwnerUserTrackOwnerships, o)
	}

	return nil
}

// RemoveOwnerUser relationship.
// Sets o.R.OwnerUser to nil.
// Removes o from all passed in related items' relationships struct.
func (o *TrackOwnership) RemoveOwnerUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.OwnerUserID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("owner_user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OwnerUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OwnerUserTrackOwnerships {
		if queries.Equal(o.OwnerUserID, ri.OwnerUserID) {
			continue
		}

		ln := len(related.R.OwnerUserTrackOwnerships)
		if ln > 1 && i < ln-1 {
			related.R.OwnerUserTrackOwnerships[i] = related.R.OwnerUserTrackOwnerships[ln-1]
		}
		related.R.OwnerUserTrackOwnerships = related.R.OwnerUserTrackOwnerships[:ln-1]
		break
	}
	return nil
}

// SetTrack of the trackOwnership to the related item.
// Sets o.R.Track to related.
// Adds o to related.R.TrackOwnerships.
func (o *TrackOwnership) SetTrack(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Track) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"track_ownership\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"track_id"}),
		strmangle.WhereClause("\"", "\"", 2, trackOwnershipPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TrackID, related.ID)
	if o.R == nil {
		o.R = &trackOwnershipR{
			Track: related,
		}
	} else {
		o.R.Track = related
	}

	if related.R == nil {
		related.R = &trackR{
			TrackOwnerships: TrackOwnershipSlice{o},
		}
	} else {
		related.R.TrackOwnerships = append(related.R.TrackOwnerships, o)
	}

	return nil
}

// RemoveTrack relationship.
// Sets o.R.Track to nil.
// Removes o from all passed in related items' relationships struct.
func (o *TrackOwnership) RemoveTrack(ctx context.Context, exec boil.ContextExecutor, related *Track) error {
	var err error

	queries.SetScanner(&o.TrackID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("track_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Track = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TrackOwnerships {
		if queries.Equal(o.TrackID, ri.TrackID) {
			continue
		}

		ln := len(related.R.TrackOwnerships)
		if ln > 1 && i < ln-1 {
			related.R.TrackOwnerships[i] = related.R.TrackOwnerships[ln-1]
		}
		related.R.TrackOwnerships = related.R.TrackOwnerships[:ln-1]
		break
	}
	return nil
}

// TrackOwnerships retrieves all the records using an executor.
func TrackOwnerships(mods ...qm.QueryMod) trackOwnershipQuery {
	mods = append(mods, qm.From("\"track_ownership\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"track_ownership\".*"})
	}

	return trackOwnershipQuery{q}
}

// FindTrackOwnership retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTrackOwnership(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*TrackOwnership, error) {
	trackOwnershipObj := &TrackOwnership{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"track_ownership\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, trackOwnershipObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from track_ownership")
	}

	if err = trackOwnershipObj.doAfterSelectHooks(ctx, exec); err != nil {
		return trackOwnershipObj, err
	}

	return trackOwnershipObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TrackOwnership) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no track_ownership provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trackOwnershipColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	trackOwnershipInsertCacheMut.RLock()
	cache, cached := trackOwnershipInsertCache[key]
	trackOwnershipInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			trackOwnershipAllColumns,
			trackOwnershipColumnsWithDefault,
			trackOwnershipColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(trackOwnershipType, trackOwnershipMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(trackOwnershipType, trackOwnershipMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"track_ownership\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"track_ownership\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into track_ownership")
	}

	if !cached {
		trackOwnershipInsertCacheMut.Lock()
		trackOwnershipInsertCache[key] = cache
		trackOwnershipInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TrackOwnership.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TrackOwnership) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	trackOwnershipUpdateCacheMut.RLock()
	cache, cached := trackOwnershipUpdateCache[key]
	trackOwnershipUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			trackOwnershipAllColumns,
			trackOwnershipPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update track_ownership, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"track_ownership\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, trackOwnershipPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(trackOwnershipType, trackOwnershipMapping, append(wl, trackOwnershipPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update track_ownership row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for track_ownership")
	}

	if !cached {
		trackOwnershipUpdateCacheMut.Lock()
		trackOwnershipUpdateCache[key] = cache
		trackOwnershipUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q trackOwnershipQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for track_ownership")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for track_ownership")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TrackOwnershipSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackOwnershipPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"track_ownership\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, trackOwnershipPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in trackOwnership slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all trackOwnership")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TrackOwnership) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no track_ownership provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trackOwnershipColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	trackOwnershipUpsertCacheMut.RLock()
	cache, cached := trackOwnershipUpsertCache[key]
	trackOwnershipUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			trackOwnershipAllColumns,
			trackOwnershipColumnsWithDefault,
			trackOwnershipColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			trackOwnershipAllColumns,
			trackOwnershipPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert track_ownership, could not build update column list")
		}

		ret := strmangle.SetComplement(trackOwnershipAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(trackOwnershipPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert track_ownership, could not build conflict column list")
			}

			conflict = make([]string, len(trackOwnershipPrimaryKeyColumns))
			copy(conflict, trackOwnershipPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"track_ownership\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(trackOwnershipType, trackOwnershipMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(trackOwnershipType, trackOwnershipMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert track_ownership")
	}

	if !cached {
		trackOwnershipUpsertCacheMut.Lock()
		trackOwnershipUpsertCache[key] = cache
		trackOwnershipUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TrackOwnership record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TrackOwnership) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TrackOwnership provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), trackOwnershipPrimaryKeyMapping)
	sql := "DELETE FROM \"track_ownership\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from track_ownership")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for track_ownership")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q trackOwnershipQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no trackOwnershipQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from track_ownership")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for track_ownership")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TrackOwnershipSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(trackOwnershipBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackOwnershipPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"track_ownership\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trackOwnershipPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from trackOwnership slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for track_ownership")
	}

	if len(trackOwnershipAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TrackOwnership) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTrackOwnership(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TrackOwnershipSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TrackOwnershipSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackOwnershipPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"track_ownership\".* FROM \"track_ownership\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trackOwnershipPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TrackOwnershipSlice")
	}

	*o = slice

	return nil
}

// TrackOwnershipExists checks if the TrackOwnership row exists.
func TrackOwnershipExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"track_ownership\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if track_ownership exists")
	}

	return exists, nil
}

// Exists checks if the TrackOwnership row exists.
func (o *TrackOwnership) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TrackOwnershipExists(ctx, exec, o.ID)
}
