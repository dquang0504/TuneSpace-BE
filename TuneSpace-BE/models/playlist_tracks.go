// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// PlaylistTrack is an object representing the database table.
type PlaylistTrack struct {
	PlaylistID int64    `boil:"playlist_id" json:"playlist_id" toml:"playlist_id" yaml:"playlist_id"`
	TrackID    int64    `boil:"track_id" json:"track_id" toml:"track_id" yaml:"track_id"`
	OrderIndex null.Int `boil:"order_index" json:"order_index,omitempty" toml:"order_index" yaml:"order_index,omitempty"`

	R *playlistTrackR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L playlistTrackL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlaylistTrackColumns = struct {
	PlaylistID string
	TrackID    string
	OrderIndex string
}{
	PlaylistID: "playlist_id",
	TrackID:    "track_id",
	OrderIndex: "order_index",
}

var PlaylistTrackTableColumns = struct {
	PlaylistID string
	TrackID    string
	OrderIndex string
}{
	PlaylistID: "playlist_tracks.playlist_id",
	TrackID:    "playlist_tracks.track_id",
	OrderIndex: "playlist_tracks.order_index",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var PlaylistTrackWhere = struct {
	PlaylistID whereHelperint64
	TrackID    whereHelperint64
	OrderIndex whereHelpernull_Int
}{
	PlaylistID: whereHelperint64{field: "\"playlist_tracks\".\"playlist_id\""},
	TrackID:    whereHelperint64{field: "\"playlist_tracks\".\"track_id\""},
	OrderIndex: whereHelpernull_Int{field: "\"playlist_tracks\".\"order_index\""},
}

// PlaylistTrackRels is where relationship names are stored.
var PlaylistTrackRels = struct {
	Playlist string
	Track    string
}{
	Playlist: "Playlist",
	Track:    "Track",
}

// playlistTrackR is where relationships are stored.
type playlistTrackR struct {
	Playlist *Playlist `boil:"Playlist" json:"Playlist" toml:"Playlist" yaml:"Playlist"`
	Track    *Track    `boil:"Track" json:"Track" toml:"Track" yaml:"Track"`
}

// NewStruct creates a new relationship struct
func (*playlistTrackR) NewStruct() *playlistTrackR {
	return &playlistTrackR{}
}

func (o *PlaylistTrack) GetPlaylist() *Playlist {
	if o == nil {
		return nil
	}

	return o.R.GetPlaylist()
}

func (r *playlistTrackR) GetPlaylist() *Playlist {
	if r == nil {
		return nil
	}

	return r.Playlist
}

func (o *PlaylistTrack) GetTrack() *Track {
	if o == nil {
		return nil
	}

	return o.R.GetTrack()
}

func (r *playlistTrackR) GetTrack() *Track {
	if r == nil {
		return nil
	}

	return r.Track
}

// playlistTrackL is where Load methods for each relationship are stored.
type playlistTrackL struct{}

var (
	playlistTrackAllColumns            = []string{"playlist_id", "track_id", "order_index"}
	playlistTrackColumnsWithoutDefault = []string{"playlist_id", "track_id"}
	playlistTrackColumnsWithDefault    = []string{"order_index"}
	playlistTrackPrimaryKeyColumns     = []string{"playlist_id", "track_id"}
	playlistTrackGeneratedColumns      = []string{}
)

type (
	// PlaylistTrackSlice is an alias for a slice of pointers to PlaylistTrack.
	// This should almost always be used instead of []PlaylistTrack.
	PlaylistTrackSlice []*PlaylistTrack
	// PlaylistTrackHook is the signature for custom PlaylistTrack hook methods
	PlaylistTrackHook func(context.Context, boil.ContextExecutor, *PlaylistTrack) error

	playlistTrackQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playlistTrackType                 = reflect.TypeOf(&PlaylistTrack{})
	playlistTrackMapping              = queries.MakeStructMapping(playlistTrackType)
	playlistTrackPrimaryKeyMapping, _ = queries.BindMapping(playlistTrackType, playlistTrackMapping, playlistTrackPrimaryKeyColumns)
	playlistTrackInsertCacheMut       sync.RWMutex
	playlistTrackInsertCache          = make(map[string]insertCache)
	playlistTrackUpdateCacheMut       sync.RWMutex
	playlistTrackUpdateCache          = make(map[string]updateCache)
	playlistTrackUpsertCacheMut       sync.RWMutex
	playlistTrackUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var playlistTrackAfterSelectMu sync.Mutex
var playlistTrackAfterSelectHooks []PlaylistTrackHook

var playlistTrackBeforeInsertMu sync.Mutex
var playlistTrackBeforeInsertHooks []PlaylistTrackHook
var playlistTrackAfterInsertMu sync.Mutex
var playlistTrackAfterInsertHooks []PlaylistTrackHook

var playlistTrackBeforeUpdateMu sync.Mutex
var playlistTrackBeforeUpdateHooks []PlaylistTrackHook
var playlistTrackAfterUpdateMu sync.Mutex
var playlistTrackAfterUpdateHooks []PlaylistTrackHook

var playlistTrackBeforeDeleteMu sync.Mutex
var playlistTrackBeforeDeleteHooks []PlaylistTrackHook
var playlistTrackAfterDeleteMu sync.Mutex
var playlistTrackAfterDeleteHooks []PlaylistTrackHook

var playlistTrackBeforeUpsertMu sync.Mutex
var playlistTrackBeforeUpsertHooks []PlaylistTrackHook
var playlistTrackAfterUpsertMu sync.Mutex
var playlistTrackAfterUpsertHooks []PlaylistTrackHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PlaylistTrack) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistTrackAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PlaylistTrack) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistTrackBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PlaylistTrack) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistTrackAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PlaylistTrack) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistTrackBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PlaylistTrack) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistTrackAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PlaylistTrack) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistTrackBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PlaylistTrack) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistTrackAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PlaylistTrack) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistTrackBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PlaylistTrack) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistTrackAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlaylistTrackHook registers your hook function for all future operations.
func AddPlaylistTrackHook(hookPoint boil.HookPoint, playlistTrackHook PlaylistTrackHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		playlistTrackAfterSelectMu.Lock()
		playlistTrackAfterSelectHooks = append(playlistTrackAfterSelectHooks, playlistTrackHook)
		playlistTrackAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		playlistTrackBeforeInsertMu.Lock()
		playlistTrackBeforeInsertHooks = append(playlistTrackBeforeInsertHooks, playlistTrackHook)
		playlistTrackBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		playlistTrackAfterInsertMu.Lock()
		playlistTrackAfterInsertHooks = append(playlistTrackAfterInsertHooks, playlistTrackHook)
		playlistTrackAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		playlistTrackBeforeUpdateMu.Lock()
		playlistTrackBeforeUpdateHooks = append(playlistTrackBeforeUpdateHooks, playlistTrackHook)
		playlistTrackBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		playlistTrackAfterUpdateMu.Lock()
		playlistTrackAfterUpdateHooks = append(playlistTrackAfterUpdateHooks, playlistTrackHook)
		playlistTrackAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		playlistTrackBeforeDeleteMu.Lock()
		playlistTrackBeforeDeleteHooks = append(playlistTrackBeforeDeleteHooks, playlistTrackHook)
		playlistTrackBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		playlistTrackAfterDeleteMu.Lock()
		playlistTrackAfterDeleteHooks = append(playlistTrackAfterDeleteHooks, playlistTrackHook)
		playlistTrackAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		playlistTrackBeforeUpsertMu.Lock()
		playlistTrackBeforeUpsertHooks = append(playlistTrackBeforeUpsertHooks, playlistTrackHook)
		playlistTrackBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		playlistTrackAfterUpsertMu.Lock()
		playlistTrackAfterUpsertHooks = append(playlistTrackAfterUpsertHooks, playlistTrackHook)
		playlistTrackAfterUpsertMu.Unlock()
	}
}

// One returns a single playlistTrack record from the query.
func (q playlistTrackQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PlaylistTrack, error) {
	o := &PlaylistTrack{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for playlist_tracks")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PlaylistTrack records from the query.
func (q playlistTrackQuery) All(ctx context.Context, exec boil.ContextExecutor) (PlaylistTrackSlice, error) {
	var o []*PlaylistTrack

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PlaylistTrack slice")
	}

	if len(playlistTrackAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PlaylistTrack records in the query.
func (q playlistTrackQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count playlist_tracks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q playlistTrackQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if playlist_tracks exists")
	}

	return count > 0, nil
}

// Playlist pointed to by the foreign key.
func (o *PlaylistTrack) Playlist(mods ...qm.QueryMod) playlistQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlaylistID),
	}

	queryMods = append(queryMods, mods...)

	return Playlists(queryMods...)
}

// Track pointed to by the foreign key.
func (o *PlaylistTrack) Track(mods ...qm.QueryMod) trackQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TrackID),
	}

	queryMods = append(queryMods, mods...)

	return Tracks(queryMods...)
}

// LoadPlaylist allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playlistTrackL) LoadPlaylist(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlaylistTrack interface{}, mods queries.Applicator) error {
	var slice []*PlaylistTrack
	var object *PlaylistTrack

	if singular {
		var ok bool
		object, ok = maybePlaylistTrack.(*PlaylistTrack)
		if !ok {
			object = new(PlaylistTrack)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlaylistTrack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlaylistTrack))
			}
		}
	} else {
		s, ok := maybePlaylistTrack.(*[]*PlaylistTrack)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlaylistTrack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlaylistTrack))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &playlistTrackR{}
		}
		args[object.PlaylistID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playlistTrackR{}
			}

			args[obj.PlaylistID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`playlists`),
		qm.WhereIn(`playlists.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Playlist")
	}

	var resultSlice []*Playlist
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Playlist")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for playlists")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for playlists")
	}

	if len(playlistAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Playlist = foreign
		if foreign.R == nil {
			foreign.R = &playlistR{}
		}
		foreign.R.PlaylistTracks = append(foreign.R.PlaylistTracks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlaylistID == foreign.ID {
				local.R.Playlist = foreign
				if foreign.R == nil {
					foreign.R = &playlistR{}
				}
				foreign.R.PlaylistTracks = append(foreign.R.PlaylistTracks, local)
				break
			}
		}
	}

	return nil
}

// LoadTrack allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playlistTrackL) LoadTrack(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlaylistTrack interface{}, mods queries.Applicator) error {
	var slice []*PlaylistTrack
	var object *PlaylistTrack

	if singular {
		var ok bool
		object, ok = maybePlaylistTrack.(*PlaylistTrack)
		if !ok {
			object = new(PlaylistTrack)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlaylistTrack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlaylistTrack))
			}
		}
	} else {
		s, ok := maybePlaylistTrack.(*[]*PlaylistTrack)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlaylistTrack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlaylistTrack))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &playlistTrackR{}
		}
		args[object.TrackID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playlistTrackR{}
			}

			args[obj.TrackID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tracks`),
		qm.WhereIn(`tracks.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Track")
	}

	var resultSlice []*Track
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Track")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tracks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tracks")
	}

	if len(trackAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Track = foreign
		if foreign.R == nil {
			foreign.R = &trackR{}
		}
		foreign.R.PlaylistTracks = append(foreign.R.PlaylistTracks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TrackID == foreign.ID {
				local.R.Track = foreign
				if foreign.R == nil {
					foreign.R = &trackR{}
				}
				foreign.R.PlaylistTracks = append(foreign.R.PlaylistTracks, local)
				break
			}
		}
	}

	return nil
}

// SetPlaylist of the playlistTrack to the related item.
// Sets o.R.Playlist to related.
// Adds o to related.R.PlaylistTracks.
func (o *PlaylistTrack) SetPlaylist(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Playlist) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"playlist_tracks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"playlist_id"}),
		strmangle.WhereClause("\"", "\"", 2, playlistTrackPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.PlaylistID, o.TrackID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlaylistID = related.ID
	if o.R == nil {
		o.R = &playlistTrackR{
			Playlist: related,
		}
	} else {
		o.R.Playlist = related
	}

	if related.R == nil {
		related.R = &playlistR{
			PlaylistTracks: PlaylistTrackSlice{o},
		}
	} else {
		related.R.PlaylistTracks = append(related.R.PlaylistTracks, o)
	}

	return nil
}

// SetTrack of the playlistTrack to the related item.
// Sets o.R.Track to related.
// Adds o to related.R.PlaylistTracks.
func (o *PlaylistTrack) SetTrack(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Track) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"playlist_tracks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"track_id"}),
		strmangle.WhereClause("\"", "\"", 2, playlistTrackPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.PlaylistID, o.TrackID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TrackID = related.ID
	if o.R == nil {
		o.R = &playlistTrackR{
			Track: related,
		}
	} else {
		o.R.Track = related
	}

	if related.R == nil {
		related.R = &trackR{
			PlaylistTracks: PlaylistTrackSlice{o},
		}
	} else {
		related.R.PlaylistTracks = append(related.R.PlaylistTracks, o)
	}

	return nil
}

// PlaylistTracks retrieves all the records using an executor.
func PlaylistTracks(mods ...qm.QueryMod) playlistTrackQuery {
	mods = append(mods, qm.From("\"playlist_tracks\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"playlist_tracks\".*"})
	}

	return playlistTrackQuery{q}
}

// FindPlaylistTrack retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlaylistTrack(ctx context.Context, exec boil.ContextExecutor, playlistID int64, trackID int64, selectCols ...string) (*PlaylistTrack, error) {
	playlistTrackObj := &PlaylistTrack{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"playlist_tracks\" where \"playlist_id\"=$1 AND \"track_id\"=$2", sel,
	)

	q := queries.Raw(query, playlistID, trackID)

	err := q.Bind(ctx, exec, playlistTrackObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from playlist_tracks")
	}

	if err = playlistTrackObj.doAfterSelectHooks(ctx, exec); err != nil {
		return playlistTrackObj, err
	}

	return playlistTrackObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PlaylistTrack) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no playlist_tracks provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playlistTrackColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	playlistTrackInsertCacheMut.RLock()
	cache, cached := playlistTrackInsertCache[key]
	playlistTrackInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			playlistTrackAllColumns,
			playlistTrackColumnsWithDefault,
			playlistTrackColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(playlistTrackType, playlistTrackMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playlistTrackType, playlistTrackMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"playlist_tracks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"playlist_tracks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into playlist_tracks")
	}

	if !cached {
		playlistTrackInsertCacheMut.Lock()
		playlistTrackInsertCache[key] = cache
		playlistTrackInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PlaylistTrack.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PlaylistTrack) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	playlistTrackUpdateCacheMut.RLock()
	cache, cached := playlistTrackUpdateCache[key]
	playlistTrackUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			playlistTrackAllColumns,
			playlistTrackPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update playlist_tracks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"playlist_tracks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, playlistTrackPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playlistTrackType, playlistTrackMapping, append(wl, playlistTrackPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update playlist_tracks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for playlist_tracks")
	}

	if !cached {
		playlistTrackUpdateCacheMut.Lock()
		playlistTrackUpdateCache[key] = cache
		playlistTrackUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q playlistTrackQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for playlist_tracks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for playlist_tracks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlaylistTrackSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playlistTrackPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"playlist_tracks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, playlistTrackPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in playlistTrack slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all playlistTrack")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PlaylistTrack) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no playlist_tracks provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playlistTrackColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playlistTrackUpsertCacheMut.RLock()
	cache, cached := playlistTrackUpsertCache[key]
	playlistTrackUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			playlistTrackAllColumns,
			playlistTrackColumnsWithDefault,
			playlistTrackColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			playlistTrackAllColumns,
			playlistTrackPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert playlist_tracks, could not build update column list")
		}

		ret := strmangle.SetComplement(playlistTrackAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(playlistTrackPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert playlist_tracks, could not build conflict column list")
			}

			conflict = make([]string, len(playlistTrackPrimaryKeyColumns))
			copy(conflict, playlistTrackPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"playlist_tracks\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(playlistTrackType, playlistTrackMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playlistTrackType, playlistTrackMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert playlist_tracks")
	}

	if !cached {
		playlistTrackUpsertCacheMut.Lock()
		playlistTrackUpsertCache[key] = cache
		playlistTrackUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PlaylistTrack record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PlaylistTrack) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PlaylistTrack provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playlistTrackPrimaryKeyMapping)
	sql := "DELETE FROM \"playlist_tracks\" WHERE \"playlist_id\"=$1 AND \"track_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from playlist_tracks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for playlist_tracks")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q playlistTrackQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no playlistTrackQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from playlist_tracks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for playlist_tracks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlaylistTrackSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(playlistTrackBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playlistTrackPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"playlist_tracks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playlistTrackPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from playlistTrack slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for playlist_tracks")
	}

	if len(playlistTrackAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PlaylistTrack) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPlaylistTrack(ctx, exec, o.PlaylistID, o.TrackID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlaylistTrackSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlaylistTrackSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playlistTrackPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"playlist_tracks\".* FROM \"playlist_tracks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playlistTrackPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PlaylistTrackSlice")
	}

	*o = slice

	return nil
}

// PlaylistTrackExists checks if the PlaylistTrack row exists.
func PlaylistTrackExists(ctx context.Context, exec boil.ContextExecutor, playlistID int64, trackID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"playlist_tracks\" where \"playlist_id\"=$1 AND \"track_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, playlistID, trackID)
	}
	row := exec.QueryRowContext(ctx, sql, playlistID, trackID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if playlist_tracks exists")
	}

	return exists, nil
}

// Exists checks if the PlaylistTrack row exists.
func (o *PlaylistTrack) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PlaylistTrackExists(ctx, exec, o.PlaylistID, o.TrackID)
}
