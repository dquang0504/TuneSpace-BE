// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPlaylistTracks(t *testing.T) {
	t.Parallel()

	query := PlaylistTracks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPlaylistTracksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistTrack{}
	if err = randomize.Struct(seed, o, playlistTrackDBTypes, true, playlistTrackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistTrack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PlaylistTracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlaylistTracksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistTrack{}
	if err = randomize.Struct(seed, o, playlistTrackDBTypes, true, playlistTrackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistTrack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PlaylistTracks().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PlaylistTracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlaylistTracksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistTrack{}
	if err = randomize.Struct(seed, o, playlistTrackDBTypes, true, playlistTrackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistTrack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlaylistTrackSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PlaylistTracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlaylistTracksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistTrack{}
	if err = randomize.Struct(seed, o, playlistTrackDBTypes, true, playlistTrackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistTrack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PlaylistTrackExists(ctx, tx, o.PlaylistID, o.TrackID)
	if err != nil {
		t.Errorf("Unable to check if PlaylistTrack exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PlaylistTrackExists to return true, but got false.")
	}
}

func testPlaylistTracksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistTrack{}
	if err = randomize.Struct(seed, o, playlistTrackDBTypes, true, playlistTrackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistTrack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	playlistTrackFound, err := FindPlaylistTrack(ctx, tx, o.PlaylistID, o.TrackID)
	if err != nil {
		t.Error(err)
	}

	if playlistTrackFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPlaylistTracksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistTrack{}
	if err = randomize.Struct(seed, o, playlistTrackDBTypes, true, playlistTrackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistTrack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PlaylistTracks().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPlaylistTracksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistTrack{}
	if err = randomize.Struct(seed, o, playlistTrackDBTypes, true, playlistTrackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistTrack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PlaylistTracks().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPlaylistTracksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlistTrackOne := &PlaylistTrack{}
	playlistTrackTwo := &PlaylistTrack{}
	if err = randomize.Struct(seed, playlistTrackOne, playlistTrackDBTypes, false, playlistTrackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistTrack struct: %s", err)
	}
	if err = randomize.Struct(seed, playlistTrackTwo, playlistTrackDBTypes, false, playlistTrackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistTrack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = playlistTrackOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = playlistTrackTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PlaylistTracks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPlaylistTracksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	playlistTrackOne := &PlaylistTrack{}
	playlistTrackTwo := &PlaylistTrack{}
	if err = randomize.Struct(seed, playlistTrackOne, playlistTrackDBTypes, false, playlistTrackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistTrack struct: %s", err)
	}
	if err = randomize.Struct(seed, playlistTrackTwo, playlistTrackDBTypes, false, playlistTrackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistTrack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = playlistTrackOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = playlistTrackTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlaylistTracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func playlistTrackBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PlaylistTrack) error {
	*o = PlaylistTrack{}
	return nil
}

func playlistTrackAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PlaylistTrack) error {
	*o = PlaylistTrack{}
	return nil
}

func playlistTrackAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PlaylistTrack) error {
	*o = PlaylistTrack{}
	return nil
}

func playlistTrackBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PlaylistTrack) error {
	*o = PlaylistTrack{}
	return nil
}

func playlistTrackAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PlaylistTrack) error {
	*o = PlaylistTrack{}
	return nil
}

func playlistTrackBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PlaylistTrack) error {
	*o = PlaylistTrack{}
	return nil
}

func playlistTrackAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PlaylistTrack) error {
	*o = PlaylistTrack{}
	return nil
}

func playlistTrackBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PlaylistTrack) error {
	*o = PlaylistTrack{}
	return nil
}

func playlistTrackAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PlaylistTrack) error {
	*o = PlaylistTrack{}
	return nil
}

func testPlaylistTracksHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PlaylistTrack{}
	o := &PlaylistTrack{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, playlistTrackDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PlaylistTrack object: %s", err)
	}

	AddPlaylistTrackHook(boil.BeforeInsertHook, playlistTrackBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	playlistTrackBeforeInsertHooks = []PlaylistTrackHook{}

	AddPlaylistTrackHook(boil.AfterInsertHook, playlistTrackAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	playlistTrackAfterInsertHooks = []PlaylistTrackHook{}

	AddPlaylistTrackHook(boil.AfterSelectHook, playlistTrackAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	playlistTrackAfterSelectHooks = []PlaylistTrackHook{}

	AddPlaylistTrackHook(boil.BeforeUpdateHook, playlistTrackBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	playlistTrackBeforeUpdateHooks = []PlaylistTrackHook{}

	AddPlaylistTrackHook(boil.AfterUpdateHook, playlistTrackAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	playlistTrackAfterUpdateHooks = []PlaylistTrackHook{}

	AddPlaylistTrackHook(boil.BeforeDeleteHook, playlistTrackBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	playlistTrackBeforeDeleteHooks = []PlaylistTrackHook{}

	AddPlaylistTrackHook(boil.AfterDeleteHook, playlistTrackAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	playlistTrackAfterDeleteHooks = []PlaylistTrackHook{}

	AddPlaylistTrackHook(boil.BeforeUpsertHook, playlistTrackBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	playlistTrackBeforeUpsertHooks = []PlaylistTrackHook{}

	AddPlaylistTrackHook(boil.AfterUpsertHook, playlistTrackAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	playlistTrackAfterUpsertHooks = []PlaylistTrackHook{}
}

func testPlaylistTracksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistTrack{}
	if err = randomize.Struct(seed, o, playlistTrackDBTypes, true, playlistTrackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistTrack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlaylistTracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlaylistTracksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistTrack{}
	if err = randomize.Struct(seed, o, playlistTrackDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlaylistTrack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(playlistTrackPrimaryKeyColumns, playlistTrackColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := PlaylistTracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlaylistTrackToOnePlaylistUsingPlaylist(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PlaylistTrack
	var foreign Playlist

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, playlistTrackDBTypes, false, playlistTrackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistTrack struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, playlistDBTypes, false, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PlaylistID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Playlist().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddPlaylistHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Playlist) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := PlaylistTrackSlice{&local}
	if err = local.L.LoadPlaylist(ctx, tx, false, (*[]*PlaylistTrack)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Playlist == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Playlist = nil
	if err = local.L.LoadPlaylist(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Playlist == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testPlaylistTrackToOneTrackUsingTrack(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PlaylistTrack
	var foreign Track

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, playlistTrackDBTypes, false, playlistTrackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistTrack struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, trackDBTypes, false, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TrackID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Track().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddTrackHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Track) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := PlaylistTrackSlice{&local}
	if err = local.L.LoadTrack(ctx, tx, false, (*[]*PlaylistTrack)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Track == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Track = nil
	if err = local.L.LoadTrack(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Track == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testPlaylistTrackToOneSetOpPlaylistUsingPlaylist(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PlaylistTrack
	var b, c Playlist

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playlistTrackDBTypes, false, strmangle.SetComplement(playlistTrackPrimaryKeyColumns, playlistTrackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, playlistDBTypes, false, strmangle.SetComplement(playlistPrimaryKeyColumns, playlistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, playlistDBTypes, false, strmangle.SetComplement(playlistPrimaryKeyColumns, playlistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Playlist{&b, &c} {
		err = a.SetPlaylist(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Playlist != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PlaylistTracks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PlaylistID != x.ID {
			t.Error("foreign key was wrong value", a.PlaylistID)
		}

		if exists, err := PlaylistTrackExists(ctx, tx, a.PlaylistID, a.TrackID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testPlaylistTrackToOneSetOpTrackUsingTrack(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PlaylistTrack
	var b, c Track

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playlistTrackDBTypes, false, strmangle.SetComplement(playlistTrackPrimaryKeyColumns, playlistTrackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Track{&b, &c} {
		err = a.SetTrack(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Track != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PlaylistTracks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TrackID != x.ID {
			t.Error("foreign key was wrong value", a.TrackID)
		}

		if exists, err := PlaylistTrackExists(ctx, tx, a.PlaylistID, a.TrackID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testPlaylistTracksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistTrack{}
	if err = randomize.Struct(seed, o, playlistTrackDBTypes, true, playlistTrackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistTrack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPlaylistTracksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistTrack{}
	if err = randomize.Struct(seed, o, playlistTrackDBTypes, true, playlistTrackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistTrack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlaylistTrackSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPlaylistTracksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistTrack{}
	if err = randomize.Struct(seed, o, playlistTrackDBTypes, true, playlistTrackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistTrack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PlaylistTracks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	playlistTrackDBTypes = map[string]string{`PlaylistID`: `bigint`, `TrackID`: `bigint`, `OrderIndex`: `integer`}
	_                    = bytes.MinRead
)

func testPlaylistTracksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(playlistTrackPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(playlistTrackAllColumns) == len(playlistTrackPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistTrack{}
	if err = randomize.Struct(seed, o, playlistTrackDBTypes, true, playlistTrackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistTrack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlaylistTracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, playlistTrackDBTypes, true, playlistTrackPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PlaylistTrack struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPlaylistTracksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(playlistTrackAllColumns) == len(playlistTrackPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistTrack{}
	if err = randomize.Struct(seed, o, playlistTrackDBTypes, true, playlistTrackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistTrack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlaylistTracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, playlistTrackDBTypes, true, playlistTrackPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PlaylistTrack struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(playlistTrackAllColumns, playlistTrackPrimaryKeyColumns) {
		fields = playlistTrackAllColumns
	} else {
		fields = strmangle.SetComplement(
			playlistTrackAllColumns,
			playlistTrackPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PlaylistTrackSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPlaylistTracksUpsert(t *testing.T) {
	t.Parallel()

	if len(playlistTrackAllColumns) == len(playlistTrackPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PlaylistTrack{}
	if err = randomize.Struct(seed, &o, playlistTrackDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlaylistTrack struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PlaylistTrack: %s", err)
	}

	count, err := PlaylistTracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, playlistTrackDBTypes, false, playlistTrackPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PlaylistTrack struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PlaylistTrack: %s", err)
	}

	count, err = PlaylistTracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
