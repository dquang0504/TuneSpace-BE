// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPlaylists(t *testing.T) {
	t.Parallel()

	query := Playlists()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPlaylistsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Playlist{}
	if err = randomize.Struct(seed, o, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Playlists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlaylistsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Playlist{}
	if err = randomize.Struct(seed, o, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Playlists().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Playlists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlaylistsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Playlist{}
	if err = randomize.Struct(seed, o, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlaylistSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Playlists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlaylistsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Playlist{}
	if err = randomize.Struct(seed, o, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PlaylistExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Playlist exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PlaylistExists to return true, but got false.")
	}
}

func testPlaylistsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Playlist{}
	if err = randomize.Struct(seed, o, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	playlistFound, err := FindPlaylist(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if playlistFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPlaylistsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Playlist{}
	if err = randomize.Struct(seed, o, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Playlists().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPlaylistsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Playlist{}
	if err = randomize.Struct(seed, o, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Playlists().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPlaylistsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlistOne := &Playlist{}
	playlistTwo := &Playlist{}
	if err = randomize.Struct(seed, playlistOne, playlistDBTypes, false, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}
	if err = randomize.Struct(seed, playlistTwo, playlistDBTypes, false, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = playlistOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = playlistTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Playlists().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPlaylistsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	playlistOne := &Playlist{}
	playlistTwo := &Playlist{}
	if err = randomize.Struct(seed, playlistOne, playlistDBTypes, false, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}
	if err = randomize.Struct(seed, playlistTwo, playlistDBTypes, false, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = playlistOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = playlistTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Playlists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func playlistBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Playlist) error {
	*o = Playlist{}
	return nil
}

func playlistAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Playlist) error {
	*o = Playlist{}
	return nil
}

func playlistAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Playlist) error {
	*o = Playlist{}
	return nil
}

func playlistBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Playlist) error {
	*o = Playlist{}
	return nil
}

func playlistAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Playlist) error {
	*o = Playlist{}
	return nil
}

func playlistBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Playlist) error {
	*o = Playlist{}
	return nil
}

func playlistAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Playlist) error {
	*o = Playlist{}
	return nil
}

func playlistBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Playlist) error {
	*o = Playlist{}
	return nil
}

func playlistAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Playlist) error {
	*o = Playlist{}
	return nil
}

func testPlaylistsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Playlist{}
	o := &Playlist{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, playlistDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Playlist object: %s", err)
	}

	AddPlaylistHook(boil.BeforeInsertHook, playlistBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	playlistBeforeInsertHooks = []PlaylistHook{}

	AddPlaylistHook(boil.AfterInsertHook, playlistAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	playlistAfterInsertHooks = []PlaylistHook{}

	AddPlaylistHook(boil.AfterSelectHook, playlistAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	playlistAfterSelectHooks = []PlaylistHook{}

	AddPlaylistHook(boil.BeforeUpdateHook, playlistBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	playlistBeforeUpdateHooks = []PlaylistHook{}

	AddPlaylistHook(boil.AfterUpdateHook, playlistAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	playlistAfterUpdateHooks = []PlaylistHook{}

	AddPlaylistHook(boil.BeforeDeleteHook, playlistBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	playlistBeforeDeleteHooks = []PlaylistHook{}

	AddPlaylistHook(boil.AfterDeleteHook, playlistAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	playlistAfterDeleteHooks = []PlaylistHook{}

	AddPlaylistHook(boil.BeforeUpsertHook, playlistBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	playlistBeforeUpsertHooks = []PlaylistHook{}

	AddPlaylistHook(boil.AfterUpsertHook, playlistAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	playlistAfterUpsertHooks = []PlaylistHook{}
}

func testPlaylistsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Playlist{}
	if err = randomize.Struct(seed, o, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Playlists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlaylistsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Playlist{}
	if err = randomize.Struct(seed, o, playlistDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(playlistPrimaryKeyColumns, playlistColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := Playlists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlaylistToManyPlaylistTracks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Playlist
	var b, c PlaylistTrack

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, playlistTrackDBTypes, false, playlistTrackColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, playlistTrackDBTypes, false, playlistTrackColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PlaylistID = a.ID
	c.PlaylistID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PlaylistTracks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PlaylistID == b.PlaylistID {
			bFound = true
		}
		if v.PlaylistID == c.PlaylistID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PlaylistSlice{&a}
	if err = a.L.LoadPlaylistTracks(ctx, tx, false, (*[]*Playlist)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlaylistTracks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PlaylistTracks = nil
	if err = a.L.LoadPlaylistTracks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlaylistTracks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPlaylistToManyAddOpPlaylistTracks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Playlist
	var b, c, d, e PlaylistTrack

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playlistDBTypes, false, strmangle.SetComplement(playlistPrimaryKeyColumns, playlistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PlaylistTrack{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, playlistTrackDBTypes, false, strmangle.SetComplement(playlistTrackPrimaryKeyColumns, playlistTrackColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PlaylistTrack{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPlaylistTracks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PlaylistID {
			t.Error("foreign key was wrong value", a.ID, first.PlaylistID)
		}
		if a.ID != second.PlaylistID {
			t.Error("foreign key was wrong value", a.ID, second.PlaylistID)
		}

		if first.R.Playlist != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Playlist != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PlaylistTracks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PlaylistTracks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PlaylistTracks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPlaylistToOneUserUsingOwner(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Playlist
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.OwnerID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Owner().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := PlaylistSlice{&local}
	if err = local.L.LoadOwner(ctx, tx, false, (*[]*Playlist)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Owner == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Owner = nil
	if err = local.L.LoadOwner(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Owner == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testPlaylistToOneSetOpUserUsingOwner(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Playlist
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playlistDBTypes, false, strmangle.SetComplement(playlistPrimaryKeyColumns, playlistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetOwner(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Owner != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OwnerPlaylists[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.OwnerID, x.ID) {
			t.Error("foreign key was wrong value", a.OwnerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OwnerID))
		reflect.Indirect(reflect.ValueOf(&a.OwnerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.OwnerID, x.ID) {
			t.Error("foreign key was wrong value", a.OwnerID, x.ID)
		}
	}
}

func testPlaylistToOneRemoveOpUserUsingOwner(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Playlist
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playlistDBTypes, false, strmangle.SetComplement(playlistPrimaryKeyColumns, playlistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOwner(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOwner(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Owner().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Owner != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.OwnerID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.OwnerPlaylists) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testPlaylistsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Playlist{}
	if err = randomize.Struct(seed, o, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPlaylistsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Playlist{}
	if err = randomize.Struct(seed, o, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlaylistSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPlaylistsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Playlist{}
	if err = randomize.Struct(seed, o, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Playlists().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	playlistDBTypes = map[string]string{`ID`: `bigint`, `OwnerID`: `bigint`, `Title`: `text`, `IsPublic`: `boolean`, `CoverURL`: `text`, `CreatedAt`: `timestamp with time zone`}
	_               = bytes.MinRead
)

func testPlaylistsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(playlistPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(playlistAllColumns) == len(playlistPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Playlist{}
	if err = randomize.Struct(seed, o, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Playlists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, playlistDBTypes, true, playlistPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPlaylistsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(playlistAllColumns) == len(playlistPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Playlist{}
	if err = randomize.Struct(seed, o, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Playlists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, playlistDBTypes, true, playlistPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(playlistAllColumns, playlistPrimaryKeyColumns) {
		fields = playlistAllColumns
	} else {
		fields = strmangle.SetComplement(
			playlistAllColumns,
			playlistPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PlaylistSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPlaylistsUpsert(t *testing.T) {
	t.Parallel()

	if len(playlistAllColumns) == len(playlistPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Playlist{}
	if err = randomize.Struct(seed, &o, playlistDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Playlist: %s", err)
	}

	count, err := Playlists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, playlistDBTypes, false, playlistPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Playlist: %s", err)
	}

	count, err = Playlists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
