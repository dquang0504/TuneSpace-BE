// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// ArtistsAlbum is an object representing the database table.
type ArtistsAlbum struct {
	AlbumID  int64       `boil:"album_id" json:"album_id" toml:"album_id" yaml:"album_id"`
	ArtistID int64       `boil:"artist_id" json:"artist_id" toml:"artist_id" yaml:"artist_id"`
	Role     null.String `boil:"role" json:"role,omitempty" toml:"role" yaml:"role,omitempty"`
	Status   null.Bool   `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`

	R *artistsAlbumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L artistsAlbumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ArtistsAlbumColumns = struct {
	AlbumID  string
	ArtistID string
	Role     string
	Status   string
}{
	AlbumID:  "album_id",
	ArtistID: "artist_id",
	Role:     "role",
	Status:   "status",
}

var ArtistsAlbumTableColumns = struct {
	AlbumID  string
	ArtistID string
	Role     string
	Status   string
}{
	AlbumID:  "artists_albums.album_id",
	ArtistID: "artists_albums.artist_id",
	Role:     "artists_albums.role",
	Status:   "artists_albums.status",
}

// Generated where

var ArtistsAlbumWhere = struct {
	AlbumID  whereHelperint64
	ArtistID whereHelperint64
	Role     whereHelpernull_String
	Status   whereHelpernull_Bool
}{
	AlbumID:  whereHelperint64{field: "\"artists_albums\".\"album_id\""},
	ArtistID: whereHelperint64{field: "\"artists_albums\".\"artist_id\""},
	Role:     whereHelpernull_String{field: "\"artists_albums\".\"role\""},
	Status:   whereHelpernull_Bool{field: "\"artists_albums\".\"status\""},
}

// ArtistsAlbumRels is where relationship names are stored.
var ArtistsAlbumRels = struct {
	Album  string
	Artist string
}{
	Album:  "Album",
	Artist: "Artist",
}

// artistsAlbumR is where relationships are stored.
type artistsAlbumR struct {
	Album  *Album  `boil:"Album" json:"Album" toml:"Album" yaml:"Album"`
	Artist *Artist `boil:"Artist" json:"Artist" toml:"Artist" yaml:"Artist"`
}

// NewStruct creates a new relationship struct
func (*artistsAlbumR) NewStruct() *artistsAlbumR {
	return &artistsAlbumR{}
}

func (o *ArtistsAlbum) GetAlbum() *Album {
	if o == nil {
		return nil
	}

	return o.R.GetAlbum()
}

func (r *artistsAlbumR) GetAlbum() *Album {
	if r == nil {
		return nil
	}

	return r.Album
}

func (o *ArtistsAlbum) GetArtist() *Artist {
	if o == nil {
		return nil
	}

	return o.R.GetArtist()
}

func (r *artistsAlbumR) GetArtist() *Artist {
	if r == nil {
		return nil
	}

	return r.Artist
}

// artistsAlbumL is where Load methods for each relationship are stored.
type artistsAlbumL struct{}

var (
	artistsAlbumAllColumns            = []string{"album_id", "artist_id", "role", "status"}
	artistsAlbumColumnsWithoutDefault = []string{"album_id", "artist_id"}
	artistsAlbumColumnsWithDefault    = []string{"role", "status"}
	artistsAlbumPrimaryKeyColumns     = []string{"artist_id", "album_id"}
	artistsAlbumGeneratedColumns      = []string{}
)

type (
	// ArtistsAlbumSlice is an alias for a slice of pointers to ArtistsAlbum.
	// This should almost always be used instead of []ArtistsAlbum.
	ArtistsAlbumSlice []*ArtistsAlbum
	// ArtistsAlbumHook is the signature for custom ArtistsAlbum hook methods
	ArtistsAlbumHook func(context.Context, boil.ContextExecutor, *ArtistsAlbum) error

	artistsAlbumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	artistsAlbumType                 = reflect.TypeOf(&ArtistsAlbum{})
	artistsAlbumMapping              = queries.MakeStructMapping(artistsAlbumType)
	artistsAlbumPrimaryKeyMapping, _ = queries.BindMapping(artistsAlbumType, artistsAlbumMapping, artistsAlbumPrimaryKeyColumns)
	artistsAlbumInsertCacheMut       sync.RWMutex
	artistsAlbumInsertCache          = make(map[string]insertCache)
	artistsAlbumUpdateCacheMut       sync.RWMutex
	artistsAlbumUpdateCache          = make(map[string]updateCache)
	artistsAlbumUpsertCacheMut       sync.RWMutex
	artistsAlbumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var artistsAlbumAfterSelectMu sync.Mutex
var artistsAlbumAfterSelectHooks []ArtistsAlbumHook

var artistsAlbumBeforeInsertMu sync.Mutex
var artistsAlbumBeforeInsertHooks []ArtistsAlbumHook
var artistsAlbumAfterInsertMu sync.Mutex
var artistsAlbumAfterInsertHooks []ArtistsAlbumHook

var artistsAlbumBeforeUpdateMu sync.Mutex
var artistsAlbumBeforeUpdateHooks []ArtistsAlbumHook
var artistsAlbumAfterUpdateMu sync.Mutex
var artistsAlbumAfterUpdateHooks []ArtistsAlbumHook

var artistsAlbumBeforeDeleteMu sync.Mutex
var artistsAlbumBeforeDeleteHooks []ArtistsAlbumHook
var artistsAlbumAfterDeleteMu sync.Mutex
var artistsAlbumAfterDeleteHooks []ArtistsAlbumHook

var artistsAlbumBeforeUpsertMu sync.Mutex
var artistsAlbumBeforeUpsertHooks []ArtistsAlbumHook
var artistsAlbumAfterUpsertMu sync.Mutex
var artistsAlbumAfterUpsertHooks []ArtistsAlbumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ArtistsAlbum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistsAlbumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ArtistsAlbum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistsAlbumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ArtistsAlbum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistsAlbumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ArtistsAlbum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistsAlbumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ArtistsAlbum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistsAlbumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ArtistsAlbum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistsAlbumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ArtistsAlbum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistsAlbumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ArtistsAlbum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistsAlbumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ArtistsAlbum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistsAlbumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddArtistsAlbumHook registers your hook function for all future operations.
func AddArtistsAlbumHook(hookPoint boil.HookPoint, artistsAlbumHook ArtistsAlbumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		artistsAlbumAfterSelectMu.Lock()
		artistsAlbumAfterSelectHooks = append(artistsAlbumAfterSelectHooks, artistsAlbumHook)
		artistsAlbumAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		artistsAlbumBeforeInsertMu.Lock()
		artistsAlbumBeforeInsertHooks = append(artistsAlbumBeforeInsertHooks, artistsAlbumHook)
		artistsAlbumBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		artistsAlbumAfterInsertMu.Lock()
		artistsAlbumAfterInsertHooks = append(artistsAlbumAfterInsertHooks, artistsAlbumHook)
		artistsAlbumAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		artistsAlbumBeforeUpdateMu.Lock()
		artistsAlbumBeforeUpdateHooks = append(artistsAlbumBeforeUpdateHooks, artistsAlbumHook)
		artistsAlbumBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		artistsAlbumAfterUpdateMu.Lock()
		artistsAlbumAfterUpdateHooks = append(artistsAlbumAfterUpdateHooks, artistsAlbumHook)
		artistsAlbumAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		artistsAlbumBeforeDeleteMu.Lock()
		artistsAlbumBeforeDeleteHooks = append(artistsAlbumBeforeDeleteHooks, artistsAlbumHook)
		artistsAlbumBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		artistsAlbumAfterDeleteMu.Lock()
		artistsAlbumAfterDeleteHooks = append(artistsAlbumAfterDeleteHooks, artistsAlbumHook)
		artistsAlbumAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		artistsAlbumBeforeUpsertMu.Lock()
		artistsAlbumBeforeUpsertHooks = append(artistsAlbumBeforeUpsertHooks, artistsAlbumHook)
		artistsAlbumBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		artistsAlbumAfterUpsertMu.Lock()
		artistsAlbumAfterUpsertHooks = append(artistsAlbumAfterUpsertHooks, artistsAlbumHook)
		artistsAlbumAfterUpsertMu.Unlock()
	}
}

// One returns a single artistsAlbum record from the query.
func (q artistsAlbumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ArtistsAlbum, error) {
	o := &ArtistsAlbum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for artists_albums")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ArtistsAlbum records from the query.
func (q artistsAlbumQuery) All(ctx context.Context, exec boil.ContextExecutor) (ArtistsAlbumSlice, error) {
	var o []*ArtistsAlbum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ArtistsAlbum slice")
	}

	if len(artistsAlbumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ArtistsAlbum records in the query.
func (q artistsAlbumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count artists_albums rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q artistsAlbumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if artists_albums exists")
	}

	return count > 0, nil
}

// Album pointed to by the foreign key.
func (o *ArtistsAlbum) Album(mods ...qm.QueryMod) albumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AlbumID),
	}

	queryMods = append(queryMods, mods...)

	return Albums(queryMods...)
}

// Artist pointed to by the foreign key.
func (o *ArtistsAlbum) Artist(mods ...qm.QueryMod) artistQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ArtistID),
	}

	queryMods = append(queryMods, mods...)

	return Artists(queryMods...)
}

// LoadAlbum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (artistsAlbumL) LoadAlbum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeArtistsAlbum interface{}, mods queries.Applicator) error {
	var slice []*ArtistsAlbum
	var object *ArtistsAlbum

	if singular {
		var ok bool
		object, ok = maybeArtistsAlbum.(*ArtistsAlbum)
		if !ok {
			object = new(ArtistsAlbum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeArtistsAlbum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeArtistsAlbum))
			}
		}
	} else {
		s, ok := maybeArtistsAlbum.(*[]*ArtistsAlbum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeArtistsAlbum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeArtistsAlbum))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &artistsAlbumR{}
		}
		args[object.AlbumID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &artistsAlbumR{}
			}

			args[obj.AlbumID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`albums`),
		qm.WhereIn(`albums.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Album")
	}

	var resultSlice []*Album
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Album")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for albums")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for albums")
	}

	if len(albumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Album = foreign
		if foreign.R == nil {
			foreign.R = &albumR{}
		}
		foreign.R.ArtistsAlbums = append(foreign.R.ArtistsAlbums, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AlbumID == foreign.ID {
				local.R.Album = foreign
				if foreign.R == nil {
					foreign.R = &albumR{}
				}
				foreign.R.ArtistsAlbums = append(foreign.R.ArtistsAlbums, local)
				break
			}
		}
	}

	return nil
}

// LoadArtist allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (artistsAlbumL) LoadArtist(ctx context.Context, e boil.ContextExecutor, singular bool, maybeArtistsAlbum interface{}, mods queries.Applicator) error {
	var slice []*ArtistsAlbum
	var object *ArtistsAlbum

	if singular {
		var ok bool
		object, ok = maybeArtistsAlbum.(*ArtistsAlbum)
		if !ok {
			object = new(ArtistsAlbum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeArtistsAlbum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeArtistsAlbum))
			}
		}
	} else {
		s, ok := maybeArtistsAlbum.(*[]*ArtistsAlbum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeArtistsAlbum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeArtistsAlbum))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &artistsAlbumR{}
		}
		args[object.ArtistID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &artistsAlbumR{}
			}

			args[obj.ArtistID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`artists`),
		qm.WhereIn(`artists.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Artist")
	}

	var resultSlice []*Artist
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Artist")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for artists")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for artists")
	}

	if len(artistAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Artist = foreign
		if foreign.R == nil {
			foreign.R = &artistR{}
		}
		foreign.R.ArtistsAlbums = append(foreign.R.ArtistsAlbums, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ArtistID == foreign.ID {
				local.R.Artist = foreign
				if foreign.R == nil {
					foreign.R = &artistR{}
				}
				foreign.R.ArtistsAlbums = append(foreign.R.ArtistsAlbums, local)
				break
			}
		}
	}

	return nil
}

// SetAlbum of the artistsAlbum to the related item.
// Sets o.R.Album to related.
// Adds o to related.R.ArtistsAlbums.
func (o *ArtistsAlbum) SetAlbum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Album) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"artists_albums\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"album_id"}),
		strmangle.WhereClause("\"", "\"", 2, artistsAlbumPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ArtistID, o.AlbumID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AlbumID = related.ID
	if o.R == nil {
		o.R = &artistsAlbumR{
			Album: related,
		}
	} else {
		o.R.Album = related
	}

	if related.R == nil {
		related.R = &albumR{
			ArtistsAlbums: ArtistsAlbumSlice{o},
		}
	} else {
		related.R.ArtistsAlbums = append(related.R.ArtistsAlbums, o)
	}

	return nil
}

// SetArtist of the artistsAlbum to the related item.
// Sets o.R.Artist to related.
// Adds o to related.R.ArtistsAlbums.
func (o *ArtistsAlbum) SetArtist(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Artist) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"artists_albums\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"artist_id"}),
		strmangle.WhereClause("\"", "\"", 2, artistsAlbumPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ArtistID, o.AlbumID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ArtistID = related.ID
	if o.R == nil {
		o.R = &artistsAlbumR{
			Artist: related,
		}
	} else {
		o.R.Artist = related
	}

	if related.R == nil {
		related.R = &artistR{
			ArtistsAlbums: ArtistsAlbumSlice{o},
		}
	} else {
		related.R.ArtistsAlbums = append(related.R.ArtistsAlbums, o)
	}

	return nil
}

// ArtistsAlbums retrieves all the records using an executor.
func ArtistsAlbums(mods ...qm.QueryMod) artistsAlbumQuery {
	mods = append(mods, qm.From("\"artists_albums\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"artists_albums\".*"})
	}

	return artistsAlbumQuery{q}
}

// FindArtistsAlbum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindArtistsAlbum(ctx context.Context, exec boil.ContextExecutor, artistID int64, albumID int64, selectCols ...string) (*ArtistsAlbum, error) {
	artistsAlbumObj := &ArtistsAlbum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"artists_albums\" where \"artist_id\"=$1 AND \"album_id\"=$2", sel,
	)

	q := queries.Raw(query, artistID, albumID)

	err := q.Bind(ctx, exec, artistsAlbumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from artists_albums")
	}

	if err = artistsAlbumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return artistsAlbumObj, err
	}

	return artistsAlbumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ArtistsAlbum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no artists_albums provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(artistsAlbumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	artistsAlbumInsertCacheMut.RLock()
	cache, cached := artistsAlbumInsertCache[key]
	artistsAlbumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			artistsAlbumAllColumns,
			artistsAlbumColumnsWithDefault,
			artistsAlbumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(artistsAlbumType, artistsAlbumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(artistsAlbumType, artistsAlbumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"artists_albums\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"artists_albums\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into artists_albums")
	}

	if !cached {
		artistsAlbumInsertCacheMut.Lock()
		artistsAlbumInsertCache[key] = cache
		artistsAlbumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ArtistsAlbum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ArtistsAlbum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	artistsAlbumUpdateCacheMut.RLock()
	cache, cached := artistsAlbumUpdateCache[key]
	artistsAlbumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			artistsAlbumAllColumns,
			artistsAlbumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update artists_albums, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"artists_albums\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, artistsAlbumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(artistsAlbumType, artistsAlbumMapping, append(wl, artistsAlbumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update artists_albums row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for artists_albums")
	}

	if !cached {
		artistsAlbumUpdateCacheMut.Lock()
		artistsAlbumUpdateCache[key] = cache
		artistsAlbumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q artistsAlbumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for artists_albums")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for artists_albums")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ArtistsAlbumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), artistsAlbumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"artists_albums\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, artistsAlbumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in artistsAlbum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all artistsAlbum")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ArtistsAlbum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no artists_albums provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(artistsAlbumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	artistsAlbumUpsertCacheMut.RLock()
	cache, cached := artistsAlbumUpsertCache[key]
	artistsAlbumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			artistsAlbumAllColumns,
			artistsAlbumColumnsWithDefault,
			artistsAlbumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			artistsAlbumAllColumns,
			artistsAlbumPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert artists_albums, could not build update column list")
		}

		ret := strmangle.SetComplement(artistsAlbumAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(artistsAlbumPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert artists_albums, could not build conflict column list")
			}

			conflict = make([]string, len(artistsAlbumPrimaryKeyColumns))
			copy(conflict, artistsAlbumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"artists_albums\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(artistsAlbumType, artistsAlbumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(artistsAlbumType, artistsAlbumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert artists_albums")
	}

	if !cached {
		artistsAlbumUpsertCacheMut.Lock()
		artistsAlbumUpsertCache[key] = cache
		artistsAlbumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ArtistsAlbum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ArtistsAlbum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ArtistsAlbum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), artistsAlbumPrimaryKeyMapping)
	sql := "DELETE FROM \"artists_albums\" WHERE \"artist_id\"=$1 AND \"album_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from artists_albums")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for artists_albums")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q artistsAlbumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no artistsAlbumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from artists_albums")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for artists_albums")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ArtistsAlbumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(artistsAlbumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), artistsAlbumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"artists_albums\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, artistsAlbumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from artistsAlbum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for artists_albums")
	}

	if len(artistsAlbumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ArtistsAlbum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindArtistsAlbum(ctx, exec, o.ArtistID, o.AlbumID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ArtistsAlbumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ArtistsAlbumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), artistsAlbumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"artists_albums\".* FROM \"artists_albums\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, artistsAlbumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ArtistsAlbumSlice")
	}

	*o = slice

	return nil
}

// ArtistsAlbumExists checks if the ArtistsAlbum row exists.
func ArtistsAlbumExists(ctx context.Context, exec boil.ContextExecutor, artistID int64, albumID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"artists_albums\" where \"artist_id\"=$1 AND \"album_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, artistID, albumID)
	}
	row := exec.QueryRowContext(ctx, sql, artistID, albumID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if artists_albums exists")
	}

	return exists, nil
}

// Exists checks if the ArtistsAlbum row exists.
func (o *ArtistsAlbum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ArtistsAlbumExists(ctx, exec, o.ArtistID, o.AlbumID)
}
