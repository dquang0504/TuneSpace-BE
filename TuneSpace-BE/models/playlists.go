// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Playlist is an object representing the database table.
type Playlist struct {
	ID        int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	OwnerID   null.Int64  `boil:"owner_id" json:"owner_id,omitempty" toml:"owner_id" yaml:"owner_id,omitempty"`
	Title     null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	IsPublic  null.Bool   `boil:"is_public" json:"is_public,omitempty" toml:"is_public" yaml:"is_public,omitempty"`
	CoverURL  null.String `boil:"cover_url" json:"cover_url,omitempty" toml:"cover_url" yaml:"cover_url,omitempty"`
	CreatedAt null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *playlistR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L playlistL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlaylistColumns = struct {
	ID        string
	OwnerID   string
	Title     string
	IsPublic  string
	CoverURL  string
	CreatedAt string
}{
	ID:        "id",
	OwnerID:   "owner_id",
	Title:     "title",
	IsPublic:  "is_public",
	CoverURL:  "cover_url",
	CreatedAt: "created_at",
}

var PlaylistTableColumns = struct {
	ID        string
	OwnerID   string
	Title     string
	IsPublic  string
	CoverURL  string
	CreatedAt string
}{
	ID:        "playlists.id",
	OwnerID:   "playlists.owner_id",
	Title:     "playlists.title",
	IsPublic:  "playlists.is_public",
	CoverURL:  "playlists.cover_url",
	CreatedAt: "playlists.created_at",
}

// Generated where

var PlaylistWhere = struct {
	ID        whereHelperint64
	OwnerID   whereHelpernull_Int64
	Title     whereHelpernull_String
	IsPublic  whereHelpernull_Bool
	CoverURL  whereHelpernull_String
	CreatedAt whereHelpernull_Time
}{
	ID:        whereHelperint64{field: "\"playlists\".\"id\""},
	OwnerID:   whereHelpernull_Int64{field: "\"playlists\".\"owner_id\""},
	Title:     whereHelpernull_String{field: "\"playlists\".\"title\""},
	IsPublic:  whereHelpernull_Bool{field: "\"playlists\".\"is_public\""},
	CoverURL:  whereHelpernull_String{field: "\"playlists\".\"cover_url\""},
	CreatedAt: whereHelpernull_Time{field: "\"playlists\".\"created_at\""},
}

// PlaylistRels is where relationship names are stored.
var PlaylistRels = struct {
	Owner          string
	PlaylistTracks string
}{
	Owner:          "Owner",
	PlaylistTracks: "PlaylistTracks",
}

// playlistR is where relationships are stored.
type playlistR struct {
	Owner          *User              `boil:"Owner" json:"Owner" toml:"Owner" yaml:"Owner"`
	PlaylistTracks PlaylistTrackSlice `boil:"PlaylistTracks" json:"PlaylistTracks" toml:"PlaylistTracks" yaml:"PlaylistTracks"`
}

// NewStruct creates a new relationship struct
func (*playlistR) NewStruct() *playlistR {
	return &playlistR{}
}

func (o *Playlist) GetOwner() *User {
	if o == nil {
		return nil
	}

	return o.R.GetOwner()
}

func (r *playlistR) GetOwner() *User {
	if r == nil {
		return nil
	}

	return r.Owner
}

func (o *Playlist) GetPlaylistTracks() PlaylistTrackSlice {
	if o == nil {
		return nil
	}

	return o.R.GetPlaylistTracks()
}

func (r *playlistR) GetPlaylistTracks() PlaylistTrackSlice {
	if r == nil {
		return nil
	}

	return r.PlaylistTracks
}

// playlistL is where Load methods for each relationship are stored.
type playlistL struct{}

var (
	playlistAllColumns            = []string{"id", "owner_id", "title", "is_public", "cover_url", "created_at"}
	playlistColumnsWithoutDefault = []string{}
	playlistColumnsWithDefault    = []string{"id", "owner_id", "title", "is_public", "cover_url", "created_at"}
	playlistPrimaryKeyColumns     = []string{"id"}
	playlistGeneratedColumns      = []string{}
)

type (
	// PlaylistSlice is an alias for a slice of pointers to Playlist.
	// This should almost always be used instead of []Playlist.
	PlaylistSlice []*Playlist
	// PlaylistHook is the signature for custom Playlist hook methods
	PlaylistHook func(context.Context, boil.ContextExecutor, *Playlist) error

	playlistQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playlistType                 = reflect.TypeOf(&Playlist{})
	playlistMapping              = queries.MakeStructMapping(playlistType)
	playlistPrimaryKeyMapping, _ = queries.BindMapping(playlistType, playlistMapping, playlistPrimaryKeyColumns)
	playlistInsertCacheMut       sync.RWMutex
	playlistInsertCache          = make(map[string]insertCache)
	playlistUpdateCacheMut       sync.RWMutex
	playlistUpdateCache          = make(map[string]updateCache)
	playlistUpsertCacheMut       sync.RWMutex
	playlistUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var playlistAfterSelectMu sync.Mutex
var playlistAfterSelectHooks []PlaylistHook

var playlistBeforeInsertMu sync.Mutex
var playlistBeforeInsertHooks []PlaylistHook
var playlistAfterInsertMu sync.Mutex
var playlistAfterInsertHooks []PlaylistHook

var playlistBeforeUpdateMu sync.Mutex
var playlistBeforeUpdateHooks []PlaylistHook
var playlistAfterUpdateMu sync.Mutex
var playlistAfterUpdateHooks []PlaylistHook

var playlistBeforeDeleteMu sync.Mutex
var playlistBeforeDeleteHooks []PlaylistHook
var playlistAfterDeleteMu sync.Mutex
var playlistAfterDeleteHooks []PlaylistHook

var playlistBeforeUpsertMu sync.Mutex
var playlistBeforeUpsertHooks []PlaylistHook
var playlistAfterUpsertMu sync.Mutex
var playlistAfterUpsertHooks []PlaylistHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Playlist) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Playlist) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Playlist) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Playlist) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Playlist) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Playlist) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Playlist) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Playlist) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Playlist) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlaylistHook registers your hook function for all future operations.
func AddPlaylistHook(hookPoint boil.HookPoint, playlistHook PlaylistHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		playlistAfterSelectMu.Lock()
		playlistAfterSelectHooks = append(playlistAfterSelectHooks, playlistHook)
		playlistAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		playlistBeforeInsertMu.Lock()
		playlistBeforeInsertHooks = append(playlistBeforeInsertHooks, playlistHook)
		playlistBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		playlistAfterInsertMu.Lock()
		playlistAfterInsertHooks = append(playlistAfterInsertHooks, playlistHook)
		playlistAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		playlistBeforeUpdateMu.Lock()
		playlistBeforeUpdateHooks = append(playlistBeforeUpdateHooks, playlistHook)
		playlistBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		playlistAfterUpdateMu.Lock()
		playlistAfterUpdateHooks = append(playlistAfterUpdateHooks, playlistHook)
		playlistAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		playlistBeforeDeleteMu.Lock()
		playlistBeforeDeleteHooks = append(playlistBeforeDeleteHooks, playlistHook)
		playlistBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		playlistAfterDeleteMu.Lock()
		playlistAfterDeleteHooks = append(playlistAfterDeleteHooks, playlistHook)
		playlistAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		playlistBeforeUpsertMu.Lock()
		playlistBeforeUpsertHooks = append(playlistBeforeUpsertHooks, playlistHook)
		playlistBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		playlistAfterUpsertMu.Lock()
		playlistAfterUpsertHooks = append(playlistAfterUpsertHooks, playlistHook)
		playlistAfterUpsertMu.Unlock()
	}
}

// One returns a single playlist record from the query.
func (q playlistQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Playlist, error) {
	o := &Playlist{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for playlists")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Playlist records from the query.
func (q playlistQuery) All(ctx context.Context, exec boil.ContextExecutor) (PlaylistSlice, error) {
	var o []*Playlist

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Playlist slice")
	}

	if len(playlistAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Playlist records in the query.
func (q playlistQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count playlists rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q playlistQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if playlists exists")
	}

	return count > 0, nil
}

// Owner pointed to by the foreign key.
func (o *Playlist) Owner(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OwnerID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// PlaylistTracks retrieves all the playlist_track's PlaylistTracks with an executor.
func (o *Playlist) PlaylistTracks(mods ...qm.QueryMod) playlistTrackQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"playlist_tracks\".\"playlist_id\"=?", o.ID),
	)

	return PlaylistTracks(queryMods...)
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playlistL) LoadOwner(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlaylist interface{}, mods queries.Applicator) error {
	var slice []*Playlist
	var object *Playlist

	if singular {
		var ok bool
		object, ok = maybePlaylist.(*Playlist)
		if !ok {
			object = new(Playlist)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlaylist)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlaylist))
			}
		}
	} else {
		s, ok := maybePlaylist.(*[]*Playlist)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlaylist)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlaylist))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &playlistR{}
		}
		if !queries.IsNil(object.OwnerID) {
			args[object.OwnerID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playlistR{}
			}

			if !queries.IsNil(obj.OwnerID) {
				args[obj.OwnerID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.OwnerPlaylists = append(foreign.R.OwnerPlaylists, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OwnerID, foreign.ID) {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.OwnerPlaylists = append(foreign.R.OwnerPlaylists, local)
				break
			}
		}
	}

	return nil
}

// LoadPlaylistTracks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (playlistL) LoadPlaylistTracks(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlaylist interface{}, mods queries.Applicator) error {
	var slice []*Playlist
	var object *Playlist

	if singular {
		var ok bool
		object, ok = maybePlaylist.(*Playlist)
		if !ok {
			object = new(Playlist)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlaylist)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlaylist))
			}
		}
	} else {
		s, ok := maybePlaylist.(*[]*Playlist)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlaylist)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlaylist))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &playlistR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playlistR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`playlist_tracks`),
		qm.WhereIn(`playlist_tracks.playlist_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load playlist_tracks")
	}

	var resultSlice []*PlaylistTrack
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice playlist_tracks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on playlist_tracks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for playlist_tracks")
	}

	if len(playlistTrackAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PlaylistTracks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playlistTrackR{}
			}
			foreign.R.Playlist = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PlaylistID {
				local.R.PlaylistTracks = append(local.R.PlaylistTracks, foreign)
				if foreign.R == nil {
					foreign.R = &playlistTrackR{}
				}
				foreign.R.Playlist = local
				break
			}
		}
	}

	return nil
}

// SetOwner of the playlist to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerPlaylists.
func (o *Playlist) SetOwner(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"playlists\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
		strmangle.WhereClause("\"", "\"", 2, playlistPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OwnerID, related.ID)
	if o.R == nil {
		o.R = &playlistR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &userR{
			OwnerPlaylists: PlaylistSlice{o},
		}
	} else {
		related.R.OwnerPlaylists = append(related.R.OwnerPlaylists, o)
	}

	return nil
}

// RemoveOwner relationship.
// Sets o.R.Owner to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Playlist) RemoveOwner(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.OwnerID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("owner_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Owner = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OwnerPlaylists {
		if queries.Equal(o.OwnerID, ri.OwnerID) {
			continue
		}

		ln := len(related.R.OwnerPlaylists)
		if ln > 1 && i < ln-1 {
			related.R.OwnerPlaylists[i] = related.R.OwnerPlaylists[ln-1]
		}
		related.R.OwnerPlaylists = related.R.OwnerPlaylists[:ln-1]
		break
	}
	return nil
}

// AddPlaylistTracks adds the given related objects to the existing relationships
// of the playlist, optionally inserting them as new records.
// Appends related to o.R.PlaylistTracks.
// Sets related.R.Playlist appropriately.
func (o *Playlist) AddPlaylistTracks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PlaylistTrack) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlaylistID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"playlist_tracks\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"playlist_id"}),
				strmangle.WhereClause("\"", "\"", 2, playlistTrackPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.PlaylistID, rel.TrackID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlaylistID = o.ID
		}
	}

	if o.R == nil {
		o.R = &playlistR{
			PlaylistTracks: related,
		}
	} else {
		o.R.PlaylistTracks = append(o.R.PlaylistTracks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playlistTrackR{
				Playlist: o,
			}
		} else {
			rel.R.Playlist = o
		}
	}
	return nil
}

// Playlists retrieves all the records using an executor.
func Playlists(mods ...qm.QueryMod) playlistQuery {
	mods = append(mods, qm.From("\"playlists\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"playlists\".*"})
	}

	return playlistQuery{q}
}

// FindPlaylist retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlaylist(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Playlist, error) {
	playlistObj := &Playlist{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"playlists\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, playlistObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from playlists")
	}

	if err = playlistObj.doAfterSelectHooks(ctx, exec); err != nil {
		return playlistObj, err
	}

	return playlistObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Playlist) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no playlists provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playlistColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	playlistInsertCacheMut.RLock()
	cache, cached := playlistInsertCache[key]
	playlistInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			playlistAllColumns,
			playlistColumnsWithDefault,
			playlistColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(playlistType, playlistMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playlistType, playlistMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"playlists\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"playlists\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into playlists")
	}

	if !cached {
		playlistInsertCacheMut.Lock()
		playlistInsertCache[key] = cache
		playlistInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Playlist.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Playlist) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	playlistUpdateCacheMut.RLock()
	cache, cached := playlistUpdateCache[key]
	playlistUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			playlistAllColumns,
			playlistPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update playlists, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"playlists\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, playlistPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playlistType, playlistMapping, append(wl, playlistPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update playlists row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for playlists")
	}

	if !cached {
		playlistUpdateCacheMut.Lock()
		playlistUpdateCache[key] = cache
		playlistUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q playlistQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for playlists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for playlists")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlaylistSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playlistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"playlists\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, playlistPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in playlist slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all playlist")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Playlist) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no playlists provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playlistColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playlistUpsertCacheMut.RLock()
	cache, cached := playlistUpsertCache[key]
	playlistUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			playlistAllColumns,
			playlistColumnsWithDefault,
			playlistColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			playlistAllColumns,
			playlistPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert playlists, could not build update column list")
		}

		ret := strmangle.SetComplement(playlistAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(playlistPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert playlists, could not build conflict column list")
			}

			conflict = make([]string, len(playlistPrimaryKeyColumns))
			copy(conflict, playlistPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"playlists\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(playlistType, playlistMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playlistType, playlistMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert playlists")
	}

	if !cached {
		playlistUpsertCacheMut.Lock()
		playlistUpsertCache[key] = cache
		playlistUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Playlist record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Playlist) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Playlist provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playlistPrimaryKeyMapping)
	sql := "DELETE FROM \"playlists\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from playlists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for playlists")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q playlistQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no playlistQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from playlists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for playlists")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlaylistSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(playlistBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playlistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"playlists\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playlistPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from playlist slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for playlists")
	}

	if len(playlistAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Playlist) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPlaylist(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlaylistSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlaylistSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playlistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"playlists\".* FROM \"playlists\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playlistPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PlaylistSlice")
	}

	*o = slice

	return nil
}

// PlaylistExists checks if the Playlist row exists.
func PlaylistExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"playlists\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if playlists exists")
	}

	return exists, nil
}

// Exists checks if the Playlist row exists.
func (o *Playlist) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PlaylistExists(ctx, exec, o.ID)
}
