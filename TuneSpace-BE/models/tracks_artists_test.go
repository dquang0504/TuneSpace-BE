// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTracksArtists(t *testing.T) {
	t.Parallel()

	query := TracksArtists()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTracksArtistsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TracksArtist{}
	if err = randomize.Struct(seed, o, tracksArtistDBTypes, true, tracksArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TracksArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TracksArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTracksArtistsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TracksArtist{}
	if err = randomize.Struct(seed, o, tracksArtistDBTypes, true, tracksArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TracksArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TracksArtists().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TracksArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTracksArtistsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TracksArtist{}
	if err = randomize.Struct(seed, o, tracksArtistDBTypes, true, tracksArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TracksArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TracksArtistSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TracksArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTracksArtistsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TracksArtist{}
	if err = randomize.Struct(seed, o, tracksArtistDBTypes, true, tracksArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TracksArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TracksArtistExists(ctx, tx, o.TrackID, o.ArtistID)
	if err != nil {
		t.Errorf("Unable to check if TracksArtist exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TracksArtistExists to return true, but got false.")
	}
}

func testTracksArtistsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TracksArtist{}
	if err = randomize.Struct(seed, o, tracksArtistDBTypes, true, tracksArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TracksArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	tracksArtistFound, err := FindTracksArtist(ctx, tx, o.TrackID, o.ArtistID)
	if err != nil {
		t.Error(err)
	}

	if tracksArtistFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTracksArtistsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TracksArtist{}
	if err = randomize.Struct(seed, o, tracksArtistDBTypes, true, tracksArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TracksArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TracksArtists().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTracksArtistsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TracksArtist{}
	if err = randomize.Struct(seed, o, tracksArtistDBTypes, true, tracksArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TracksArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TracksArtists().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTracksArtistsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tracksArtistOne := &TracksArtist{}
	tracksArtistTwo := &TracksArtist{}
	if err = randomize.Struct(seed, tracksArtistOne, tracksArtistDBTypes, false, tracksArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TracksArtist struct: %s", err)
	}
	if err = randomize.Struct(seed, tracksArtistTwo, tracksArtistDBTypes, false, tracksArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TracksArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tracksArtistOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tracksArtistTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TracksArtists().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTracksArtistsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tracksArtistOne := &TracksArtist{}
	tracksArtistTwo := &TracksArtist{}
	if err = randomize.Struct(seed, tracksArtistOne, tracksArtistDBTypes, false, tracksArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TracksArtist struct: %s", err)
	}
	if err = randomize.Struct(seed, tracksArtistTwo, tracksArtistDBTypes, false, tracksArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TracksArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tracksArtistOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tracksArtistTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TracksArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func tracksArtistBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TracksArtist) error {
	*o = TracksArtist{}
	return nil
}

func tracksArtistAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TracksArtist) error {
	*o = TracksArtist{}
	return nil
}

func tracksArtistAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TracksArtist) error {
	*o = TracksArtist{}
	return nil
}

func tracksArtistBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TracksArtist) error {
	*o = TracksArtist{}
	return nil
}

func tracksArtistAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TracksArtist) error {
	*o = TracksArtist{}
	return nil
}

func tracksArtistBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TracksArtist) error {
	*o = TracksArtist{}
	return nil
}

func tracksArtistAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TracksArtist) error {
	*o = TracksArtist{}
	return nil
}

func tracksArtistBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TracksArtist) error {
	*o = TracksArtist{}
	return nil
}

func tracksArtistAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TracksArtist) error {
	*o = TracksArtist{}
	return nil
}

func testTracksArtistsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TracksArtist{}
	o := &TracksArtist{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tracksArtistDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TracksArtist object: %s", err)
	}

	AddTracksArtistHook(boil.BeforeInsertHook, tracksArtistBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tracksArtistBeforeInsertHooks = []TracksArtistHook{}

	AddTracksArtistHook(boil.AfterInsertHook, tracksArtistAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tracksArtistAfterInsertHooks = []TracksArtistHook{}

	AddTracksArtistHook(boil.AfterSelectHook, tracksArtistAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tracksArtistAfterSelectHooks = []TracksArtistHook{}

	AddTracksArtistHook(boil.BeforeUpdateHook, tracksArtistBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tracksArtistBeforeUpdateHooks = []TracksArtistHook{}

	AddTracksArtistHook(boil.AfterUpdateHook, tracksArtistAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tracksArtistAfterUpdateHooks = []TracksArtistHook{}

	AddTracksArtistHook(boil.BeforeDeleteHook, tracksArtistBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tracksArtistBeforeDeleteHooks = []TracksArtistHook{}

	AddTracksArtistHook(boil.AfterDeleteHook, tracksArtistAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tracksArtistAfterDeleteHooks = []TracksArtistHook{}

	AddTracksArtistHook(boil.BeforeUpsertHook, tracksArtistBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tracksArtistBeforeUpsertHooks = []TracksArtistHook{}

	AddTracksArtistHook(boil.AfterUpsertHook, tracksArtistAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tracksArtistAfterUpsertHooks = []TracksArtistHook{}
}

func testTracksArtistsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TracksArtist{}
	if err = randomize.Struct(seed, o, tracksArtistDBTypes, true, tracksArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TracksArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TracksArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTracksArtistsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TracksArtist{}
	if err = randomize.Struct(seed, o, tracksArtistDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TracksArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(tracksArtistPrimaryKeyColumns, tracksArtistColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := TracksArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTracksArtistToOneArtistUsingArtist(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TracksArtist
	var foreign Artist

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tracksArtistDBTypes, false, tracksArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TracksArtist struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, artistDBTypes, false, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ArtistID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Artist().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddArtistHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Artist) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TracksArtistSlice{&local}
	if err = local.L.LoadArtist(ctx, tx, false, (*[]*TracksArtist)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Artist == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Artist = nil
	if err = local.L.LoadArtist(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Artist == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTracksArtistToOneTrackUsingTrack(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TracksArtist
	var foreign Track

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tracksArtistDBTypes, false, tracksArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TracksArtist struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, trackDBTypes, false, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TrackID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Track().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddTrackHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Track) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TracksArtistSlice{&local}
	if err = local.L.LoadTrack(ctx, tx, false, (*[]*TracksArtist)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Track == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Track = nil
	if err = local.L.LoadTrack(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Track == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTracksArtistToOneSetOpArtistUsingArtist(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TracksArtist
	var b, c Artist

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tracksArtistDBTypes, false, strmangle.SetComplement(tracksArtistPrimaryKeyColumns, tracksArtistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, artistDBTypes, false, strmangle.SetComplement(artistPrimaryKeyColumns, artistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, artistDBTypes, false, strmangle.SetComplement(artistPrimaryKeyColumns, artistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Artist{&b, &c} {
		err = a.SetArtist(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Artist != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TracksArtists[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ArtistID != x.ID {
			t.Error("foreign key was wrong value", a.ArtistID)
		}

		if exists, err := TracksArtistExists(ctx, tx, a.TrackID, a.ArtistID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testTracksArtistToOneSetOpTrackUsingTrack(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TracksArtist
	var b, c Track

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tracksArtistDBTypes, false, strmangle.SetComplement(tracksArtistPrimaryKeyColumns, tracksArtistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Track{&b, &c} {
		err = a.SetTrack(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Track != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TracksArtists[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TrackID != x.ID {
			t.Error("foreign key was wrong value", a.TrackID)
		}

		if exists, err := TracksArtistExists(ctx, tx, a.TrackID, a.ArtistID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testTracksArtistsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TracksArtist{}
	if err = randomize.Struct(seed, o, tracksArtistDBTypes, true, tracksArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TracksArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTracksArtistsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TracksArtist{}
	if err = randomize.Struct(seed, o, tracksArtistDBTypes, true, tracksArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TracksArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TracksArtistSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTracksArtistsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TracksArtist{}
	if err = randomize.Struct(seed, o, tracksArtistDBTypes, true, tracksArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TracksArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TracksArtists().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tracksArtistDBTypes = map[string]string{`TrackID`: `bigint`, `ArtistID`: `bigint`, `Role`: `text`}
	_                   = bytes.MinRead
)

func testTracksArtistsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(tracksArtistPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(tracksArtistAllColumns) == len(tracksArtistPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TracksArtist{}
	if err = randomize.Struct(seed, o, tracksArtistDBTypes, true, tracksArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TracksArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TracksArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tracksArtistDBTypes, true, tracksArtistPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TracksArtist struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTracksArtistsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tracksArtistAllColumns) == len(tracksArtistPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TracksArtist{}
	if err = randomize.Struct(seed, o, tracksArtistDBTypes, true, tracksArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TracksArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TracksArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tracksArtistDBTypes, true, tracksArtistPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TracksArtist struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tracksArtistAllColumns, tracksArtistPrimaryKeyColumns) {
		fields = tracksArtistAllColumns
	} else {
		fields = strmangle.SetComplement(
			tracksArtistAllColumns,
			tracksArtistPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TracksArtistSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTracksArtistsUpsert(t *testing.T) {
	t.Parallel()

	if len(tracksArtistAllColumns) == len(tracksArtistPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TracksArtist{}
	if err = randomize.Struct(seed, &o, tracksArtistDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TracksArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TracksArtist: %s", err)
	}

	count, err := TracksArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, tracksArtistDBTypes, false, tracksArtistPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TracksArtist struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TracksArtist: %s", err)
	}

	count, err = TracksArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
