// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Artist is an object representing the database table.
type Artist struct {
	ID       int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID   null.Int64  `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	Name     string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Bio      null.String `boil:"bio" json:"bio,omitempty" toml:"bio" yaml:"bio,omitempty"`
	ImageURL null.String `boil:"image_url" json:"image_url,omitempty" toml:"image_url" yaml:"image_url,omitempty"`

	R *artistR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L artistL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ArtistColumns = struct {
	ID       string
	UserID   string
	Name     string
	Bio      string
	ImageURL string
}{
	ID:       "id",
	UserID:   "user_id",
	Name:     "name",
	Bio:      "bio",
	ImageURL: "image_url",
}

var ArtistTableColumns = struct {
	ID       string
	UserID   string
	Name     string
	Bio      string
	ImageURL string
}{
	ID:       "artists.id",
	UserID:   "artists.user_id",
	Name:     "artists.name",
	Bio:      "artists.bio",
	ImageURL: "artists.image_url",
}

// Generated where

var ArtistWhere = struct {
	ID       whereHelperint64
	UserID   whereHelpernull_Int64
	Name     whereHelperstring
	Bio      whereHelpernull_String
	ImageURL whereHelpernull_String
}{
	ID:       whereHelperint64{field: "\"artists\".\"id\""},
	UserID:   whereHelpernull_Int64{field: "\"artists\".\"user_id\""},
	Name:     whereHelperstring{field: "\"artists\".\"name\""},
	Bio:      whereHelpernull_String{field: "\"artists\".\"bio\""},
	ImageURL: whereHelpernull_String{field: "\"artists\".\"image_url\""},
}

// ArtistRels is where relationship names are stored.
var ArtistRels = struct {
	User          string
	Albums        string
	ArtistsAlbums string
	TracksArtists string
}{
	User:          "User",
	Albums:        "Albums",
	ArtistsAlbums: "ArtistsAlbums",
	TracksArtists: "TracksArtists",
}

// artistR is where relationships are stored.
type artistR struct {
	User          *User             `boil:"User" json:"User" toml:"User" yaml:"User"`
	Albums        AlbumSlice        `boil:"Albums" json:"Albums" toml:"Albums" yaml:"Albums"`
	ArtistsAlbums ArtistsAlbumSlice `boil:"ArtistsAlbums" json:"ArtistsAlbums" toml:"ArtistsAlbums" yaml:"ArtistsAlbums"`
	TracksArtists TracksArtistSlice `boil:"TracksArtists" json:"TracksArtists" toml:"TracksArtists" yaml:"TracksArtists"`
}

// NewStruct creates a new relationship struct
func (*artistR) NewStruct() *artistR {
	return &artistR{}
}

func (o *Artist) GetUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetUser()
}

func (r *artistR) GetUser() *User {
	if r == nil {
		return nil
	}

	return r.User
}

func (o *Artist) GetAlbums() AlbumSlice {
	if o == nil {
		return nil
	}

	return o.R.GetAlbums()
}

func (r *artistR) GetAlbums() AlbumSlice {
	if r == nil {
		return nil
	}

	return r.Albums
}

func (o *Artist) GetArtistsAlbums() ArtistsAlbumSlice {
	if o == nil {
		return nil
	}

	return o.R.GetArtistsAlbums()
}

func (r *artistR) GetArtistsAlbums() ArtistsAlbumSlice {
	if r == nil {
		return nil
	}

	return r.ArtistsAlbums
}

func (o *Artist) GetTracksArtists() TracksArtistSlice {
	if o == nil {
		return nil
	}

	return o.R.GetTracksArtists()
}

func (r *artistR) GetTracksArtists() TracksArtistSlice {
	if r == nil {
		return nil
	}

	return r.TracksArtists
}

// artistL is where Load methods for each relationship are stored.
type artistL struct{}

var (
	artistAllColumns            = []string{"id", "user_id", "name", "bio", "image_url"}
	artistColumnsWithoutDefault = []string{"name"}
	artistColumnsWithDefault    = []string{"id", "user_id", "bio", "image_url"}
	artistPrimaryKeyColumns     = []string{"id"}
	artistGeneratedColumns      = []string{}
)

type (
	// ArtistSlice is an alias for a slice of pointers to Artist.
	// This should almost always be used instead of []Artist.
	ArtistSlice []*Artist
	// ArtistHook is the signature for custom Artist hook methods
	ArtistHook func(context.Context, boil.ContextExecutor, *Artist) error

	artistQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	artistType                 = reflect.TypeOf(&Artist{})
	artistMapping              = queries.MakeStructMapping(artistType)
	artistPrimaryKeyMapping, _ = queries.BindMapping(artistType, artistMapping, artistPrimaryKeyColumns)
	artistInsertCacheMut       sync.RWMutex
	artistInsertCache          = make(map[string]insertCache)
	artistUpdateCacheMut       sync.RWMutex
	artistUpdateCache          = make(map[string]updateCache)
	artistUpsertCacheMut       sync.RWMutex
	artistUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var artistAfterSelectMu sync.Mutex
var artistAfterSelectHooks []ArtistHook

var artistBeforeInsertMu sync.Mutex
var artistBeforeInsertHooks []ArtistHook
var artistAfterInsertMu sync.Mutex
var artistAfterInsertHooks []ArtistHook

var artistBeforeUpdateMu sync.Mutex
var artistBeforeUpdateHooks []ArtistHook
var artistAfterUpdateMu sync.Mutex
var artistAfterUpdateHooks []ArtistHook

var artistBeforeDeleteMu sync.Mutex
var artistBeforeDeleteHooks []ArtistHook
var artistAfterDeleteMu sync.Mutex
var artistAfterDeleteHooks []ArtistHook

var artistBeforeUpsertMu sync.Mutex
var artistBeforeUpsertHooks []ArtistHook
var artistAfterUpsertMu sync.Mutex
var artistAfterUpsertHooks []ArtistHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Artist) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Artist) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Artist) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Artist) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Artist) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Artist) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Artist) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Artist) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Artist) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddArtistHook registers your hook function for all future operations.
func AddArtistHook(hookPoint boil.HookPoint, artistHook ArtistHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		artistAfterSelectMu.Lock()
		artistAfterSelectHooks = append(artistAfterSelectHooks, artistHook)
		artistAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		artistBeforeInsertMu.Lock()
		artistBeforeInsertHooks = append(artistBeforeInsertHooks, artistHook)
		artistBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		artistAfterInsertMu.Lock()
		artistAfterInsertHooks = append(artistAfterInsertHooks, artistHook)
		artistAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		artistBeforeUpdateMu.Lock()
		artistBeforeUpdateHooks = append(artistBeforeUpdateHooks, artistHook)
		artistBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		artistAfterUpdateMu.Lock()
		artistAfterUpdateHooks = append(artistAfterUpdateHooks, artistHook)
		artistAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		artistBeforeDeleteMu.Lock()
		artistBeforeDeleteHooks = append(artistBeforeDeleteHooks, artistHook)
		artistBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		artistAfterDeleteMu.Lock()
		artistAfterDeleteHooks = append(artistAfterDeleteHooks, artistHook)
		artistAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		artistBeforeUpsertMu.Lock()
		artistBeforeUpsertHooks = append(artistBeforeUpsertHooks, artistHook)
		artistBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		artistAfterUpsertMu.Lock()
		artistAfterUpsertHooks = append(artistAfterUpsertHooks, artistHook)
		artistAfterUpsertMu.Unlock()
	}
}

// One returns a single artist record from the query.
func (q artistQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Artist, error) {
	o := &Artist{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for artists")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Artist records from the query.
func (q artistQuery) All(ctx context.Context, exec boil.ContextExecutor) (ArtistSlice, error) {
	var o []*Artist

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Artist slice")
	}

	if len(artistAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Artist records in the query.
func (q artistQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count artists rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q artistQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if artists exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Artist) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Albums retrieves all the album's Albums with an executor.
func (o *Artist) Albums(mods ...qm.QueryMod) albumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"albums\".\"artist_id\"=?", o.ID),
	)

	return Albums(queryMods...)
}

// ArtistsAlbums retrieves all the artists_album's ArtistsAlbums with an executor.
func (o *Artist) ArtistsAlbums(mods ...qm.QueryMod) artistsAlbumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"artists_albums\".\"artist_id\"=?", o.ID),
	)

	return ArtistsAlbums(queryMods...)
}

// TracksArtists retrieves all the tracks_artist's TracksArtists with an executor.
func (o *Artist) TracksArtists(mods ...qm.QueryMod) tracksArtistQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tracks_artists\".\"artist_id\"=?", o.ID),
	)

	return TracksArtists(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (artistL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeArtist interface{}, mods queries.Applicator) error {
	var slice []*Artist
	var object *Artist

	if singular {
		var ok bool
		object, ok = maybeArtist.(*Artist)
		if !ok {
			object = new(Artist)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeArtist)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeArtist))
			}
		}
	} else {
		s, ok := maybeArtist.(*[]*Artist)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeArtist)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeArtist))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &artistR{}
		}
		if !queries.IsNil(object.UserID) {
			args[object.UserID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &artistR{}
			}

			if !queries.IsNil(obj.UserID) {
				args[obj.UserID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Artists = append(foreign.R.Artists, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Artists = append(foreign.R.Artists, local)
				break
			}
		}
	}

	return nil
}

// LoadAlbums allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (artistL) LoadAlbums(ctx context.Context, e boil.ContextExecutor, singular bool, maybeArtist interface{}, mods queries.Applicator) error {
	var slice []*Artist
	var object *Artist

	if singular {
		var ok bool
		object, ok = maybeArtist.(*Artist)
		if !ok {
			object = new(Artist)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeArtist)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeArtist))
			}
		}
	} else {
		s, ok := maybeArtist.(*[]*Artist)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeArtist)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeArtist))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &artistR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &artistR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`albums`),
		qm.WhereIn(`albums.artist_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load albums")
	}

	var resultSlice []*Album
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice albums")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on albums")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for albums")
	}

	if len(albumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Albums = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &albumR{}
			}
			foreign.R.Artist = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ArtistID) {
				local.R.Albums = append(local.R.Albums, foreign)
				if foreign.R == nil {
					foreign.R = &albumR{}
				}
				foreign.R.Artist = local
				break
			}
		}
	}

	return nil
}

// LoadArtistsAlbums allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (artistL) LoadArtistsAlbums(ctx context.Context, e boil.ContextExecutor, singular bool, maybeArtist interface{}, mods queries.Applicator) error {
	var slice []*Artist
	var object *Artist

	if singular {
		var ok bool
		object, ok = maybeArtist.(*Artist)
		if !ok {
			object = new(Artist)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeArtist)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeArtist))
			}
		}
	} else {
		s, ok := maybeArtist.(*[]*Artist)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeArtist)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeArtist))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &artistR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &artistR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`artists_albums`),
		qm.WhereIn(`artists_albums.artist_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load artists_albums")
	}

	var resultSlice []*ArtistsAlbum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice artists_albums")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on artists_albums")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for artists_albums")
	}

	if len(artistsAlbumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ArtistsAlbums = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &artistsAlbumR{}
			}
			foreign.R.Artist = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ArtistID {
				local.R.ArtistsAlbums = append(local.R.ArtistsAlbums, foreign)
				if foreign.R == nil {
					foreign.R = &artistsAlbumR{}
				}
				foreign.R.Artist = local
				break
			}
		}
	}

	return nil
}

// LoadTracksArtists allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (artistL) LoadTracksArtists(ctx context.Context, e boil.ContextExecutor, singular bool, maybeArtist interface{}, mods queries.Applicator) error {
	var slice []*Artist
	var object *Artist

	if singular {
		var ok bool
		object, ok = maybeArtist.(*Artist)
		if !ok {
			object = new(Artist)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeArtist)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeArtist))
			}
		}
	} else {
		s, ok := maybeArtist.(*[]*Artist)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeArtist)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeArtist))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &artistR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &artistR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tracks_artists`),
		qm.WhereIn(`tracks_artists.artist_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tracks_artists")
	}

	var resultSlice []*TracksArtist
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tracks_artists")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tracks_artists")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tracks_artists")
	}

	if len(tracksArtistAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TracksArtists = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tracksArtistR{}
			}
			foreign.R.Artist = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ArtistID {
				local.R.TracksArtists = append(local.R.TracksArtists, foreign)
				if foreign.R == nil {
					foreign.R = &tracksArtistR{}
				}
				foreign.R.Artist = local
				break
			}
		}
	}

	return nil
}

// SetUser of the artist to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Artists.
func (o *Artist) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"artists\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, artistPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &artistR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Artists: ArtistSlice{o},
		}
	} else {
		related.R.Artists = append(related.R.Artists, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Artist) RemoveUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.User = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Artists {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.Artists)
		if ln > 1 && i < ln-1 {
			related.R.Artists[i] = related.R.Artists[ln-1]
		}
		related.R.Artists = related.R.Artists[:ln-1]
		break
	}
	return nil
}

// AddAlbums adds the given related objects to the existing relationships
// of the artist, optionally inserting them as new records.
// Appends related to o.R.Albums.
// Sets related.R.Artist appropriately.
func (o *Artist) AddAlbums(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Album) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ArtistID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"albums\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"artist_id"}),
				strmangle.WhereClause("\"", "\"", 2, albumPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ArtistID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &artistR{
			Albums: related,
		}
	} else {
		o.R.Albums = append(o.R.Albums, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &albumR{
				Artist: o,
			}
		} else {
			rel.R.Artist = o
		}
	}
	return nil
}

// SetAlbums removes all previously related items of the
// artist replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Artist's Albums accordingly.
// Replaces o.R.Albums with related.
// Sets related.R.Artist's Albums accordingly.
func (o *Artist) SetAlbums(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Album) error {
	query := "update \"albums\" set \"artist_id\" = null where \"artist_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Albums {
			queries.SetScanner(&rel.ArtistID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Artist = nil
		}
		o.R.Albums = nil
	}

	return o.AddAlbums(ctx, exec, insert, related...)
}

// RemoveAlbums relationships from objects passed in.
// Removes related items from R.Albums (uses pointer comparison, removal does not keep order)
// Sets related.R.Artist.
func (o *Artist) RemoveAlbums(ctx context.Context, exec boil.ContextExecutor, related ...*Album) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ArtistID, nil)
		if rel.R != nil {
			rel.R.Artist = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("artist_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Albums {
			if rel != ri {
				continue
			}

			ln := len(o.R.Albums)
			if ln > 1 && i < ln-1 {
				o.R.Albums[i] = o.R.Albums[ln-1]
			}
			o.R.Albums = o.R.Albums[:ln-1]
			break
		}
	}

	return nil
}

// AddArtistsAlbums adds the given related objects to the existing relationships
// of the artist, optionally inserting them as new records.
// Appends related to o.R.ArtistsAlbums.
// Sets related.R.Artist appropriately.
func (o *Artist) AddArtistsAlbums(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ArtistsAlbum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ArtistID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"artists_albums\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"artist_id"}),
				strmangle.WhereClause("\"", "\"", 2, artistsAlbumPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ArtistID, rel.AlbumID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ArtistID = o.ID
		}
	}

	if o.R == nil {
		o.R = &artistR{
			ArtistsAlbums: related,
		}
	} else {
		o.R.ArtistsAlbums = append(o.R.ArtistsAlbums, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &artistsAlbumR{
				Artist: o,
			}
		} else {
			rel.R.Artist = o
		}
	}
	return nil
}

// AddTracksArtists adds the given related objects to the existing relationships
// of the artist, optionally inserting them as new records.
// Appends related to o.R.TracksArtists.
// Sets related.R.Artist appropriately.
func (o *Artist) AddTracksArtists(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TracksArtist) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ArtistID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tracks_artists\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"artist_id"}),
				strmangle.WhereClause("\"", "\"", 2, tracksArtistPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.TrackID, rel.ArtistID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ArtistID = o.ID
		}
	}

	if o.R == nil {
		o.R = &artistR{
			TracksArtists: related,
		}
	} else {
		o.R.TracksArtists = append(o.R.TracksArtists, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tracksArtistR{
				Artist: o,
			}
		} else {
			rel.R.Artist = o
		}
	}
	return nil
}

// Artists retrieves all the records using an executor.
func Artists(mods ...qm.QueryMod) artistQuery {
	mods = append(mods, qm.From("\"artists\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"artists\".*"})
	}

	return artistQuery{q}
}

// FindArtist retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindArtist(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Artist, error) {
	artistObj := &Artist{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"artists\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, artistObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from artists")
	}

	if err = artistObj.doAfterSelectHooks(ctx, exec); err != nil {
		return artistObj, err
	}

	return artistObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Artist) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no artists provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(artistColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	artistInsertCacheMut.RLock()
	cache, cached := artistInsertCache[key]
	artistInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			artistAllColumns,
			artistColumnsWithDefault,
			artistColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(artistType, artistMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(artistType, artistMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"artists\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"artists\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into artists")
	}

	if !cached {
		artistInsertCacheMut.Lock()
		artistInsertCache[key] = cache
		artistInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Artist.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Artist) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	artistUpdateCacheMut.RLock()
	cache, cached := artistUpdateCache[key]
	artistUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			artistAllColumns,
			artistPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update artists, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"artists\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, artistPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(artistType, artistMapping, append(wl, artistPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update artists row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for artists")
	}

	if !cached {
		artistUpdateCacheMut.Lock()
		artistUpdateCache[key] = cache
		artistUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q artistQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for artists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for artists")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ArtistSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), artistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"artists\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, artistPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in artist slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all artist")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Artist) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no artists provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(artistColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	artistUpsertCacheMut.RLock()
	cache, cached := artistUpsertCache[key]
	artistUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			artistAllColumns,
			artistColumnsWithDefault,
			artistColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			artistAllColumns,
			artistPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert artists, could not build update column list")
		}

		ret := strmangle.SetComplement(artistAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(artistPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert artists, could not build conflict column list")
			}

			conflict = make([]string, len(artistPrimaryKeyColumns))
			copy(conflict, artistPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"artists\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(artistType, artistMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(artistType, artistMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert artists")
	}

	if !cached {
		artistUpsertCacheMut.Lock()
		artistUpsertCache[key] = cache
		artistUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Artist record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Artist) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Artist provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), artistPrimaryKeyMapping)
	sql := "DELETE FROM \"artists\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from artists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for artists")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q artistQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no artistQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from artists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for artists")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ArtistSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(artistBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), artistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"artists\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, artistPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from artist slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for artists")
	}

	if len(artistAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Artist) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindArtist(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ArtistSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ArtistSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), artistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"artists\".* FROM \"artists\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, artistPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ArtistSlice")
	}

	*o = slice

	return nil
}

// ArtistExists checks if the Artist row exists.
func ArtistExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"artists\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if artists exists")
	}

	return exists, nil
}

// Exists checks if the Artist row exists.
func (o *Artist) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ArtistExists(ctx, exec, o.ID)
}
