// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testArtistsAlbums(t *testing.T) {
	t.Parallel()

	query := ArtistsAlbums()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testArtistsAlbumsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArtistsAlbum{}
	if err = randomize.Struct(seed, o, artistsAlbumDBTypes, true, artistsAlbumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArtistsAlbum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ArtistsAlbums().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testArtistsAlbumsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArtistsAlbum{}
	if err = randomize.Struct(seed, o, artistsAlbumDBTypes, true, artistsAlbumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArtistsAlbum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ArtistsAlbums().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ArtistsAlbums().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testArtistsAlbumsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArtistsAlbum{}
	if err = randomize.Struct(seed, o, artistsAlbumDBTypes, true, artistsAlbumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArtistsAlbum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ArtistsAlbumSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ArtistsAlbums().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testArtistsAlbumsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArtistsAlbum{}
	if err = randomize.Struct(seed, o, artistsAlbumDBTypes, true, artistsAlbumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArtistsAlbum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ArtistsAlbumExists(ctx, tx, o.ArtistID, o.AlbumID)
	if err != nil {
		t.Errorf("Unable to check if ArtistsAlbum exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ArtistsAlbumExists to return true, but got false.")
	}
}

func testArtistsAlbumsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArtistsAlbum{}
	if err = randomize.Struct(seed, o, artistsAlbumDBTypes, true, artistsAlbumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArtistsAlbum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	artistsAlbumFound, err := FindArtistsAlbum(ctx, tx, o.ArtistID, o.AlbumID)
	if err != nil {
		t.Error(err)
	}

	if artistsAlbumFound == nil {
		t.Error("want a record, got nil")
	}
}

func testArtistsAlbumsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArtistsAlbum{}
	if err = randomize.Struct(seed, o, artistsAlbumDBTypes, true, artistsAlbumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArtistsAlbum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ArtistsAlbums().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testArtistsAlbumsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArtistsAlbum{}
	if err = randomize.Struct(seed, o, artistsAlbumDBTypes, true, artistsAlbumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArtistsAlbum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ArtistsAlbums().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testArtistsAlbumsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	artistsAlbumOne := &ArtistsAlbum{}
	artistsAlbumTwo := &ArtistsAlbum{}
	if err = randomize.Struct(seed, artistsAlbumOne, artistsAlbumDBTypes, false, artistsAlbumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArtistsAlbum struct: %s", err)
	}
	if err = randomize.Struct(seed, artistsAlbumTwo, artistsAlbumDBTypes, false, artistsAlbumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArtistsAlbum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = artistsAlbumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = artistsAlbumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ArtistsAlbums().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testArtistsAlbumsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	artistsAlbumOne := &ArtistsAlbum{}
	artistsAlbumTwo := &ArtistsAlbum{}
	if err = randomize.Struct(seed, artistsAlbumOne, artistsAlbumDBTypes, false, artistsAlbumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArtistsAlbum struct: %s", err)
	}
	if err = randomize.Struct(seed, artistsAlbumTwo, artistsAlbumDBTypes, false, artistsAlbumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArtistsAlbum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = artistsAlbumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = artistsAlbumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ArtistsAlbums().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func artistsAlbumBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ArtistsAlbum) error {
	*o = ArtistsAlbum{}
	return nil
}

func artistsAlbumAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ArtistsAlbum) error {
	*o = ArtistsAlbum{}
	return nil
}

func artistsAlbumAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ArtistsAlbum) error {
	*o = ArtistsAlbum{}
	return nil
}

func artistsAlbumBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ArtistsAlbum) error {
	*o = ArtistsAlbum{}
	return nil
}

func artistsAlbumAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ArtistsAlbum) error {
	*o = ArtistsAlbum{}
	return nil
}

func artistsAlbumBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ArtistsAlbum) error {
	*o = ArtistsAlbum{}
	return nil
}

func artistsAlbumAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ArtistsAlbum) error {
	*o = ArtistsAlbum{}
	return nil
}

func artistsAlbumBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ArtistsAlbum) error {
	*o = ArtistsAlbum{}
	return nil
}

func artistsAlbumAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ArtistsAlbum) error {
	*o = ArtistsAlbum{}
	return nil
}

func testArtistsAlbumsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ArtistsAlbum{}
	o := &ArtistsAlbum{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, artistsAlbumDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ArtistsAlbum object: %s", err)
	}

	AddArtistsAlbumHook(boil.BeforeInsertHook, artistsAlbumBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	artistsAlbumBeforeInsertHooks = []ArtistsAlbumHook{}

	AddArtistsAlbumHook(boil.AfterInsertHook, artistsAlbumAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	artistsAlbumAfterInsertHooks = []ArtistsAlbumHook{}

	AddArtistsAlbumHook(boil.AfterSelectHook, artistsAlbumAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	artistsAlbumAfterSelectHooks = []ArtistsAlbumHook{}

	AddArtistsAlbumHook(boil.BeforeUpdateHook, artistsAlbumBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	artistsAlbumBeforeUpdateHooks = []ArtistsAlbumHook{}

	AddArtistsAlbumHook(boil.AfterUpdateHook, artistsAlbumAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	artistsAlbumAfterUpdateHooks = []ArtistsAlbumHook{}

	AddArtistsAlbumHook(boil.BeforeDeleteHook, artistsAlbumBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	artistsAlbumBeforeDeleteHooks = []ArtistsAlbumHook{}

	AddArtistsAlbumHook(boil.AfterDeleteHook, artistsAlbumAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	artistsAlbumAfterDeleteHooks = []ArtistsAlbumHook{}

	AddArtistsAlbumHook(boil.BeforeUpsertHook, artistsAlbumBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	artistsAlbumBeforeUpsertHooks = []ArtistsAlbumHook{}

	AddArtistsAlbumHook(boil.AfterUpsertHook, artistsAlbumAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	artistsAlbumAfterUpsertHooks = []ArtistsAlbumHook{}
}

func testArtistsAlbumsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArtistsAlbum{}
	if err = randomize.Struct(seed, o, artistsAlbumDBTypes, true, artistsAlbumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArtistsAlbum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ArtistsAlbums().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testArtistsAlbumsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArtistsAlbum{}
	if err = randomize.Struct(seed, o, artistsAlbumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ArtistsAlbum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(artistsAlbumPrimaryKeyColumns, artistsAlbumColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := ArtistsAlbums().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testArtistsAlbumToOneAlbumUsingAlbum(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ArtistsAlbum
	var foreign Album

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, artistsAlbumDBTypes, false, artistsAlbumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArtistsAlbum struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, albumDBTypes, false, albumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Album struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AlbumID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Album().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddAlbumHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Album) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ArtistsAlbumSlice{&local}
	if err = local.L.LoadAlbum(ctx, tx, false, (*[]*ArtistsAlbum)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Album == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Album = nil
	if err = local.L.LoadAlbum(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Album == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testArtistsAlbumToOneArtistUsingArtist(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ArtistsAlbum
	var foreign Artist

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, artistsAlbumDBTypes, false, artistsAlbumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArtistsAlbum struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, artistDBTypes, false, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ArtistID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Artist().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddArtistHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Artist) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ArtistsAlbumSlice{&local}
	if err = local.L.LoadArtist(ctx, tx, false, (*[]*ArtistsAlbum)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Artist == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Artist = nil
	if err = local.L.LoadArtist(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Artist == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testArtistsAlbumToOneSetOpAlbumUsingAlbum(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ArtistsAlbum
	var b, c Album

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, artistsAlbumDBTypes, false, strmangle.SetComplement(artistsAlbumPrimaryKeyColumns, artistsAlbumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, albumDBTypes, false, strmangle.SetComplement(albumPrimaryKeyColumns, albumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, albumDBTypes, false, strmangle.SetComplement(albumPrimaryKeyColumns, albumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Album{&b, &c} {
		err = a.SetAlbum(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Album != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ArtistsAlbums[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AlbumID != x.ID {
			t.Error("foreign key was wrong value", a.AlbumID)
		}

		if exists, err := ArtistsAlbumExists(ctx, tx, a.ArtistID, a.AlbumID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testArtistsAlbumToOneSetOpArtistUsingArtist(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ArtistsAlbum
	var b, c Artist

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, artistsAlbumDBTypes, false, strmangle.SetComplement(artistsAlbumPrimaryKeyColumns, artistsAlbumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, artistDBTypes, false, strmangle.SetComplement(artistPrimaryKeyColumns, artistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, artistDBTypes, false, strmangle.SetComplement(artistPrimaryKeyColumns, artistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Artist{&b, &c} {
		err = a.SetArtist(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Artist != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ArtistsAlbums[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ArtistID != x.ID {
			t.Error("foreign key was wrong value", a.ArtistID)
		}

		if exists, err := ArtistsAlbumExists(ctx, tx, a.ArtistID, a.AlbumID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testArtistsAlbumsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArtistsAlbum{}
	if err = randomize.Struct(seed, o, artistsAlbumDBTypes, true, artistsAlbumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArtistsAlbum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testArtistsAlbumsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArtistsAlbum{}
	if err = randomize.Struct(seed, o, artistsAlbumDBTypes, true, artistsAlbumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArtistsAlbum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ArtistsAlbumSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testArtistsAlbumsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArtistsAlbum{}
	if err = randomize.Struct(seed, o, artistsAlbumDBTypes, true, artistsAlbumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArtistsAlbum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ArtistsAlbums().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	artistsAlbumDBTypes = map[string]string{`AlbumID`: `bigint`, `ArtistID`: `bigint`, `Role`: `text`, `Status`: `boolean`}
	_                   = bytes.MinRead
)

func testArtistsAlbumsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(artistsAlbumPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(artistsAlbumAllColumns) == len(artistsAlbumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ArtistsAlbum{}
	if err = randomize.Struct(seed, o, artistsAlbumDBTypes, true, artistsAlbumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArtistsAlbum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ArtistsAlbums().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, artistsAlbumDBTypes, true, artistsAlbumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ArtistsAlbum struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testArtistsAlbumsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(artistsAlbumAllColumns) == len(artistsAlbumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ArtistsAlbum{}
	if err = randomize.Struct(seed, o, artistsAlbumDBTypes, true, artistsAlbumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArtistsAlbum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ArtistsAlbums().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, artistsAlbumDBTypes, true, artistsAlbumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ArtistsAlbum struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(artistsAlbumAllColumns, artistsAlbumPrimaryKeyColumns) {
		fields = artistsAlbumAllColumns
	} else {
		fields = strmangle.SetComplement(
			artistsAlbumAllColumns,
			artistsAlbumPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ArtistsAlbumSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testArtistsAlbumsUpsert(t *testing.T) {
	t.Parallel()

	if len(artistsAlbumAllColumns) == len(artistsAlbumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ArtistsAlbum{}
	if err = randomize.Struct(seed, &o, artistsAlbumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ArtistsAlbum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ArtistsAlbum: %s", err)
	}

	count, err := ArtistsAlbums().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, artistsAlbumDBTypes, false, artistsAlbumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ArtistsAlbum struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ArtistsAlbum: %s", err)
	}

	count, err = ArtistsAlbums().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
