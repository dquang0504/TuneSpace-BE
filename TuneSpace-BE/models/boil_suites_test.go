// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Albums", testAlbums)
	t.Run("Artists", testArtists)
	t.Run("ArtistsAlbums", testArtistsAlbums)
	t.Run("Comments", testComments)
	t.Run("Likes", testLikes)
	t.Run("PlaylistTracks", testPlaylistTracks)
	t.Run("Playlists", testPlaylists)
	t.Run("Roles", testRoles)
	t.Run("Streams", testStreams)
	t.Run("TrackFiles", testTrackFiles)
	t.Run("TrackOwnerships", testTrackOwnerships)
	t.Run("Tracks", testTracks)
	t.Run("TracksArtists", testTracksArtists)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Albums", testAlbumsDelete)
	t.Run("Artists", testArtistsDelete)
	t.Run("ArtistsAlbums", testArtistsAlbumsDelete)
	t.Run("Comments", testCommentsDelete)
	t.Run("Likes", testLikesDelete)
	t.Run("PlaylistTracks", testPlaylistTracksDelete)
	t.Run("Playlists", testPlaylistsDelete)
	t.Run("Roles", testRolesDelete)
	t.Run("Streams", testStreamsDelete)
	t.Run("TrackFiles", testTrackFilesDelete)
	t.Run("TrackOwnerships", testTrackOwnershipsDelete)
	t.Run("Tracks", testTracksDelete)
	t.Run("TracksArtists", testTracksArtistsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Albums", testAlbumsQueryDeleteAll)
	t.Run("Artists", testArtistsQueryDeleteAll)
	t.Run("ArtistsAlbums", testArtistsAlbumsQueryDeleteAll)
	t.Run("Comments", testCommentsQueryDeleteAll)
	t.Run("Likes", testLikesQueryDeleteAll)
	t.Run("PlaylistTracks", testPlaylistTracksQueryDeleteAll)
	t.Run("Playlists", testPlaylistsQueryDeleteAll)
	t.Run("Roles", testRolesQueryDeleteAll)
	t.Run("Streams", testStreamsQueryDeleteAll)
	t.Run("TrackFiles", testTrackFilesQueryDeleteAll)
	t.Run("TrackOwnerships", testTrackOwnershipsQueryDeleteAll)
	t.Run("Tracks", testTracksQueryDeleteAll)
	t.Run("TracksArtists", testTracksArtistsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Albums", testAlbumsSliceDeleteAll)
	t.Run("Artists", testArtistsSliceDeleteAll)
	t.Run("ArtistsAlbums", testArtistsAlbumsSliceDeleteAll)
	t.Run("Comments", testCommentsSliceDeleteAll)
	t.Run("Likes", testLikesSliceDeleteAll)
	t.Run("PlaylistTracks", testPlaylistTracksSliceDeleteAll)
	t.Run("Playlists", testPlaylistsSliceDeleteAll)
	t.Run("Roles", testRolesSliceDeleteAll)
	t.Run("Streams", testStreamsSliceDeleteAll)
	t.Run("TrackFiles", testTrackFilesSliceDeleteAll)
	t.Run("TrackOwnerships", testTrackOwnershipsSliceDeleteAll)
	t.Run("Tracks", testTracksSliceDeleteAll)
	t.Run("TracksArtists", testTracksArtistsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Albums", testAlbumsExists)
	t.Run("Artists", testArtistsExists)
	t.Run("ArtistsAlbums", testArtistsAlbumsExists)
	t.Run("Comments", testCommentsExists)
	t.Run("Likes", testLikesExists)
	t.Run("PlaylistTracks", testPlaylistTracksExists)
	t.Run("Playlists", testPlaylistsExists)
	t.Run("Roles", testRolesExists)
	t.Run("Streams", testStreamsExists)
	t.Run("TrackFiles", testTrackFilesExists)
	t.Run("TrackOwnerships", testTrackOwnershipsExists)
	t.Run("Tracks", testTracksExists)
	t.Run("TracksArtists", testTracksArtistsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Albums", testAlbumsFind)
	t.Run("Artists", testArtistsFind)
	t.Run("ArtistsAlbums", testArtistsAlbumsFind)
	t.Run("Comments", testCommentsFind)
	t.Run("Likes", testLikesFind)
	t.Run("PlaylistTracks", testPlaylistTracksFind)
	t.Run("Playlists", testPlaylistsFind)
	t.Run("Roles", testRolesFind)
	t.Run("Streams", testStreamsFind)
	t.Run("TrackFiles", testTrackFilesFind)
	t.Run("TrackOwnerships", testTrackOwnershipsFind)
	t.Run("Tracks", testTracksFind)
	t.Run("TracksArtists", testTracksArtistsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Albums", testAlbumsBind)
	t.Run("Artists", testArtistsBind)
	t.Run("ArtistsAlbums", testArtistsAlbumsBind)
	t.Run("Comments", testCommentsBind)
	t.Run("Likes", testLikesBind)
	t.Run("PlaylistTracks", testPlaylistTracksBind)
	t.Run("Playlists", testPlaylistsBind)
	t.Run("Roles", testRolesBind)
	t.Run("Streams", testStreamsBind)
	t.Run("TrackFiles", testTrackFilesBind)
	t.Run("TrackOwnerships", testTrackOwnershipsBind)
	t.Run("Tracks", testTracksBind)
	t.Run("TracksArtists", testTracksArtistsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Albums", testAlbumsOne)
	t.Run("Artists", testArtistsOne)
	t.Run("ArtistsAlbums", testArtistsAlbumsOne)
	t.Run("Comments", testCommentsOne)
	t.Run("Likes", testLikesOne)
	t.Run("PlaylistTracks", testPlaylistTracksOne)
	t.Run("Playlists", testPlaylistsOne)
	t.Run("Roles", testRolesOne)
	t.Run("Streams", testStreamsOne)
	t.Run("TrackFiles", testTrackFilesOne)
	t.Run("TrackOwnerships", testTrackOwnershipsOne)
	t.Run("Tracks", testTracksOne)
	t.Run("TracksArtists", testTracksArtistsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Albums", testAlbumsAll)
	t.Run("Artists", testArtistsAll)
	t.Run("ArtistsAlbums", testArtistsAlbumsAll)
	t.Run("Comments", testCommentsAll)
	t.Run("Likes", testLikesAll)
	t.Run("PlaylistTracks", testPlaylistTracksAll)
	t.Run("Playlists", testPlaylistsAll)
	t.Run("Roles", testRolesAll)
	t.Run("Streams", testStreamsAll)
	t.Run("TrackFiles", testTrackFilesAll)
	t.Run("TrackOwnerships", testTrackOwnershipsAll)
	t.Run("Tracks", testTracksAll)
	t.Run("TracksArtists", testTracksArtistsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Albums", testAlbumsCount)
	t.Run("Artists", testArtistsCount)
	t.Run("ArtistsAlbums", testArtistsAlbumsCount)
	t.Run("Comments", testCommentsCount)
	t.Run("Likes", testLikesCount)
	t.Run("PlaylistTracks", testPlaylistTracksCount)
	t.Run("Playlists", testPlaylistsCount)
	t.Run("Roles", testRolesCount)
	t.Run("Streams", testStreamsCount)
	t.Run("TrackFiles", testTrackFilesCount)
	t.Run("TrackOwnerships", testTrackOwnershipsCount)
	t.Run("Tracks", testTracksCount)
	t.Run("TracksArtists", testTracksArtistsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Albums", testAlbumsHooks)
	t.Run("Artists", testArtistsHooks)
	t.Run("ArtistsAlbums", testArtistsAlbumsHooks)
	t.Run("Comments", testCommentsHooks)
	t.Run("Likes", testLikesHooks)
	t.Run("PlaylistTracks", testPlaylistTracksHooks)
	t.Run("Playlists", testPlaylistsHooks)
	t.Run("Roles", testRolesHooks)
	t.Run("Streams", testStreamsHooks)
	t.Run("TrackFiles", testTrackFilesHooks)
	t.Run("TrackOwnerships", testTrackOwnershipsHooks)
	t.Run("Tracks", testTracksHooks)
	t.Run("TracksArtists", testTracksArtistsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Albums", testAlbumsInsert)
	t.Run("Albums", testAlbumsInsertWhitelist)
	t.Run("Artists", testArtistsInsert)
	t.Run("Artists", testArtistsInsertWhitelist)
	t.Run("ArtistsAlbums", testArtistsAlbumsInsert)
	t.Run("ArtistsAlbums", testArtistsAlbumsInsertWhitelist)
	t.Run("Comments", testCommentsInsert)
	t.Run("Comments", testCommentsInsertWhitelist)
	t.Run("Likes", testLikesInsert)
	t.Run("Likes", testLikesInsertWhitelist)
	t.Run("PlaylistTracks", testPlaylistTracksInsert)
	t.Run("PlaylistTracks", testPlaylistTracksInsertWhitelist)
	t.Run("Playlists", testPlaylistsInsert)
	t.Run("Playlists", testPlaylistsInsertWhitelist)
	t.Run("Roles", testRolesInsert)
	t.Run("Roles", testRolesInsertWhitelist)
	t.Run("Streams", testStreamsInsert)
	t.Run("Streams", testStreamsInsertWhitelist)
	t.Run("TrackFiles", testTrackFilesInsert)
	t.Run("TrackFiles", testTrackFilesInsertWhitelist)
	t.Run("TrackOwnerships", testTrackOwnershipsInsert)
	t.Run("TrackOwnerships", testTrackOwnershipsInsertWhitelist)
	t.Run("Tracks", testTracksInsert)
	t.Run("Tracks", testTracksInsertWhitelist)
	t.Run("TracksArtists", testTracksArtistsInsert)
	t.Run("TracksArtists", testTracksArtistsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("Albums", testAlbumsReload)
	t.Run("Artists", testArtistsReload)
	t.Run("ArtistsAlbums", testArtistsAlbumsReload)
	t.Run("Comments", testCommentsReload)
	t.Run("Likes", testLikesReload)
	t.Run("PlaylistTracks", testPlaylistTracksReload)
	t.Run("Playlists", testPlaylistsReload)
	t.Run("Roles", testRolesReload)
	t.Run("Streams", testStreamsReload)
	t.Run("TrackFiles", testTrackFilesReload)
	t.Run("TrackOwnerships", testTrackOwnershipsReload)
	t.Run("Tracks", testTracksReload)
	t.Run("TracksArtists", testTracksArtistsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Albums", testAlbumsReloadAll)
	t.Run("Artists", testArtistsReloadAll)
	t.Run("ArtistsAlbums", testArtistsAlbumsReloadAll)
	t.Run("Comments", testCommentsReloadAll)
	t.Run("Likes", testLikesReloadAll)
	t.Run("PlaylistTracks", testPlaylistTracksReloadAll)
	t.Run("Playlists", testPlaylistsReloadAll)
	t.Run("Roles", testRolesReloadAll)
	t.Run("Streams", testStreamsReloadAll)
	t.Run("TrackFiles", testTrackFilesReloadAll)
	t.Run("TrackOwnerships", testTrackOwnershipsReloadAll)
	t.Run("Tracks", testTracksReloadAll)
	t.Run("TracksArtists", testTracksArtistsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Albums", testAlbumsSelect)
	t.Run("Artists", testArtistsSelect)
	t.Run("ArtistsAlbums", testArtistsAlbumsSelect)
	t.Run("Comments", testCommentsSelect)
	t.Run("Likes", testLikesSelect)
	t.Run("PlaylistTracks", testPlaylistTracksSelect)
	t.Run("Playlists", testPlaylistsSelect)
	t.Run("Roles", testRolesSelect)
	t.Run("Streams", testStreamsSelect)
	t.Run("TrackFiles", testTrackFilesSelect)
	t.Run("TrackOwnerships", testTrackOwnershipsSelect)
	t.Run("Tracks", testTracksSelect)
	t.Run("TracksArtists", testTracksArtistsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Albums", testAlbumsUpdate)
	t.Run("Artists", testArtistsUpdate)
	t.Run("ArtistsAlbums", testArtistsAlbumsUpdate)
	t.Run("Comments", testCommentsUpdate)
	t.Run("Likes", testLikesUpdate)
	t.Run("PlaylistTracks", testPlaylistTracksUpdate)
	t.Run("Playlists", testPlaylistsUpdate)
	t.Run("Roles", testRolesUpdate)
	t.Run("Streams", testStreamsUpdate)
	t.Run("TrackFiles", testTrackFilesUpdate)
	t.Run("TrackOwnerships", testTrackOwnershipsUpdate)
	t.Run("Tracks", testTracksUpdate)
	t.Run("TracksArtists", testTracksArtistsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Albums", testAlbumsSliceUpdateAll)
	t.Run("Artists", testArtistsSliceUpdateAll)
	t.Run("ArtistsAlbums", testArtistsAlbumsSliceUpdateAll)
	t.Run("Comments", testCommentsSliceUpdateAll)
	t.Run("Likes", testLikesSliceUpdateAll)
	t.Run("PlaylistTracks", testPlaylistTracksSliceUpdateAll)
	t.Run("Playlists", testPlaylistsSliceUpdateAll)
	t.Run("Roles", testRolesSliceUpdateAll)
	t.Run("Streams", testStreamsSliceUpdateAll)
	t.Run("TrackFiles", testTrackFilesSliceUpdateAll)
	t.Run("TrackOwnerships", testTrackOwnershipsSliceUpdateAll)
	t.Run("Tracks", testTracksSliceUpdateAll)
	t.Run("TracksArtists", testTracksArtistsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
